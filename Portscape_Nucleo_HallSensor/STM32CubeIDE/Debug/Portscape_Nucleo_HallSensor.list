
Portscape_Nucleo_HallSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008578  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af8  08008af8  0002064c  2**0
                  CONTENTS
  4 .ARM          00000000  08008af8  08008af8  0002064c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008af8  08008af8  0002064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000064c  20000000  08008b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000650  0800914c  00020650  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  0800914c  00020a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002064c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000387a4  00000000  00000000  0002067c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0004b4a4  00000000  00000000  00058e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007157  00000000  00000000  000a42c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  000ab420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000cea5d  00000000  00000000  000acbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003c40  00000000  00000000  0017b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00020c5e  00000000  00000000  0017f298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026cbc  00000000  00000000  0019fef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  001c6bb2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000474c  00000000  00000000  001c6c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000650 	.word	0x20000650
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080086f0 	.word	0x080086f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000654 	.word	0x20000654
 80001cc:	080086f0 	.word	0x080086f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000276:	490e      	ldr	r1, [pc, #56]	; (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000278:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028a:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800028c:	4c0b      	ldr	r4, [pc, #44]	; (80002bc <LoopForever+0x16>)
  movs r3, #0
 800028e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800029a:	f002 ff19 	bl	80030d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800029e:	f007 fd8d 	bl	8007dbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002a2:	f000 fa91 	bl	80007c8 <main>

080002a6 <LoopForever>:

LoopForever:
    b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002a8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	2000064c 	.word	0x2000064c
  ldr r2, =_sidata
 80002b4:	08008b00 	.word	0x08008b00
  ldr r2, =_sbss
 80002b8:	20000650 	.word	0x20000650
  ldr r4, =_ebss
 80002bc:	20000a58 	.word	0x20000a58

080002c0 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <BusFault_Handler>
	...

080002c4 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 80002c4:	4a02      	ldr	r2, [pc, #8]	; (80002d0 <DAC_Init+0xc>)
 80002c6:	6813      	ldr	r3, [r2, #0]
 80002c8:	f043 0301 	orr.w	r3, r3, #1
 80002cc:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel1 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
}
 80002ce:	4770      	bx	lr
 80002d0:	40007400 	.word	0x40007400

080002d4 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 80002d4:	b510      	push	{r4, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 80002d6:	2200      	movs	r2, #0
 80002d8:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 80002dc:	f002 fcd6 	bl	8002c8c <UI_GetReg>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002e0:	f44f 0370 	mov.w	r3, #15728640	; 0xf00000
 80002e4:	fa93 f3a3 	rbit	r3, r3
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80002e8:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 80002ec:	fab3 f383 	clz	r3, r3
 80002f0:	40d9      	lsrs	r1, r3
 80002f2:	4c09      	ldr	r4, [pc, #36]	; (8000318 <DAC_Exec+0x44>)
  
  MODIFY_REG(*preg,
 80002f4:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80002f8:	b200      	sxth	r0, r0
 80002fa:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80002fe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000302:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
 8000306:	4313      	orrs	r3, r2
 8000308:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 800030c:	4a03      	ldr	r2, [pc, #12]	; (800031c <DAC_Exec+0x48>)
 800030e:	6853      	ldr	r3, [r2, #4]
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6053      	str	r3, [r2, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	40007408 	.word	0x40007408
 800031c:	40007400 	.word	0x40007400

08000320 <Home_Null_Offset>:



void Home_Null_Offset(){
//	Null_Offset = 0;
	no_of_times++;
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <Home_Null_Offset+0x1c>)
	Null_Offset = Null_Offset + HALL_M1.HallStateCounter;
 8000322:	4907      	ldr	r1, [pc, #28]	; (8000340 <Home_Null_Offset+0x20>)
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <Home_Null_Offset+0x24>)
	no_of_times++;
 8000326:	7802      	ldrb	r2, [r0, #0]
	Null_Offset = Null_Offset + HALL_M1.HallStateCounter;
 8000328:	f8b1 c000 	ldrh.w	ip, [r1]
 800032c:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
	no_of_times++;
 8000330:	3201      	adds	r2, #1
	Null_Offset = Null_Offset + HALL_M1.HallStateCounter;
 8000332:	4463      	add	r3, ip
	no_of_times++;
 8000334:	7002      	strb	r2, [r0, #0]
	Null_Offset = Null_Offset + HALL_M1.HallStateCounter;
 8000336:	800b      	strh	r3, [r1, #0]
//		}
//		else{
//			Null_Offset += (Null_Offset - temp);
//		}
//	}
}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	20000840 	.word	0x20000840
 8000340:	2000066c 	.word	0x2000066c
 8000344:	200000f4 	.word	0x200000f4

08000348 <Mode_Home>:
void Mode_Home(){
 8000348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint8_t HallState_Internal = HALL_M1.HallState;
 800034c:	4e99      	ldr	r6, [pc, #612]	; (80005b4 <Mode_Home+0x26c>)
	uint8_t HallStateCounter_Internal =  HALL_M1.HallStateCounter + Null_Offset;// + (Null_Offset/no_of_times);
 800034e:	f8df 8294 	ldr.w	r8, [pc, #660]	; 80005e4 <Mode_Home+0x29c>
 8000352:	f896 40a7 	ldrb.w	r4, [r6, #167]	; 0xa7
 8000356:	f8b8 3000 	ldrh.w	r3, [r8]
	uint8_t HallState_Home = HALL_M1.HallStateHomePosition;
	uint8_t HallStateCounter_Home = HALL_M1.HallCounterHomePosition;
 800035a:	f896 50a8 	ldrb.w	r5, [r6, #168]	; 0xa8
	uint8_t HallState_Internal = HALL_M1.HallState;
 800035e:	f896 70a6 	ldrb.w	r7, [r6, #166]	; 0xa6
	uint8_t HallStateCounter_Internal =  HALL_M1.HallStateCounter + Null_Offset;// + (Null_Offset/no_of_times);
 8000362:	441c      	add	r4, r3
 8000364:	b2e4      	uxtb	r4, r4
//	else{
//		HallStateCounter_Internal = tomove - HallStateCounter_Internal;
//	}

//	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Input:  %u\r\n", HallState_Internal), 100);
	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
 8000366:	42ac      	cmp	r4, r5
 8000368:	f000 80fd 	beq.w	8000566 <Mode_Home+0x21e>
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 5, HallState:  %u\r\n", HallState_Internal), 100);
//					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 2, HallCounter:  %u\r\n", HallStateCounter_Internal), 100);
//					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 5, HallStateCounter_Home:  %u\r\n", HallStateCounter_Home), 100);
					break;
				default:
					HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Error, HallState:  %u\r\n", HallState_Internal), 100);
 800036c:	f8df b278 	ldr.w	fp, [pc, #632]	; 80005e8 <Mode_Home+0x2a0>
 8000370:	f8df a24c 	ldr.w	sl, [pc, #588]	; 80005c0 <Mode_Home+0x278>
 8000374:	f107 39ff 	add.w	r9, r7, #4294967295
		switch(HallState_Internal){
 8000378:	f1b9 0f05 	cmp.w	r9, #5
 800037c:	f200 80fa 	bhi.w	8000574 <Mode_Home+0x22c>
 8000380:	e8df f019 	tbh	[pc, r9, lsl #1]
 8000384:	00f400e2 	.word	0x00f400e2
 8000388:	00e900e5 	.word	0x00e900e5
 800038c:	000600ed 	.word	0x000600ed
 8000390:	f8df 9258 	ldr.w	r9, [pc, #600]	; 80005ec <Mode_Home+0x2a4>
 8000394:	4f88      	ldr	r7, [pc, #544]	; (80005b8 <Mode_Home+0x270>)
 8000396:	e0a2      	b.n	80004de <Mode_Home+0x196>
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pulse);
 8000398:	4f87      	ldr	r7, [pc, #540]	; (80005b8 <Mode_Home+0x270>)
 800039a:	f8d9 3000 	ldr.w	r3, [r9]
 800039e:	f9b7 2000 	ldrsh.w	r2, [r7]
 80003a2:	635a      	str	r2, [r3, #52]	; 0x34
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 80003a4:	639a      	str	r2, [r3, #56]	; 0x38
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 1, HallState:  %u\r\n", HallState_Internal), 100);
 80003aa:	4984      	ldr	r1, [pc, #528]	; (80005bc <Mode_Home+0x274>)
 80003ac:	4884      	ldr	r0, [pc, #528]	; (80005c0 <Mode_Home+0x278>)
 80003ae:	2202      	movs	r2, #2
 80003b0:	f007 fd30 	bl	8007e14 <siprintf>
 80003b4:	2364      	movs	r3, #100	; 0x64
 80003b6:	2219      	movs	r2, #25
 80003b8:	4981      	ldr	r1, [pc, #516]	; (80005c0 <Mode_Home+0x278>)
 80003ba:	4882      	ldr	r0, [pc, #520]	; (80005c4 <Mode_Home+0x27c>)
 80003bc:	f005 f948 	bl	8005650 <HAL_UART_Transmit>
					  HallStateCounter_Internal++;
 80003c0:	3401      	adds	r4, #1
//					HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Error, HallCounter:  %u\r\n", HallStateCounter_Internal), 100);
//					HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 5, HallStateCounter_Home:  %u\r\n", HallStateCounter_Home), 100);
					break;
		}

		HallStateCounter_Internal = HallStateCounter_Internal%72;
 80003c2:	4b81      	ldr	r3, [pc, #516]	; (80005c8 <Mode_Home+0x280>)
					  HallStateCounter_Internal++;
 80003c4:	b2e4      	uxtb	r4, r4
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 80003c6:	fba3 2304 	umull	r2, r3, r3, r4
 80003ca:	091b      	lsrs	r3, r3, #4
 80003cc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80003d0:	eba4 04c3 	sub.w	r4, r4, r3, lsl #3
 80003d4:	b2e4      	uxtb	r4, r4
	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
 80003d6:	42a5      	cmp	r5, r4
 80003d8:	f000 80a2 	beq.w	8000520 <Mode_Home+0x1d8>
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80003dc:	f8d9 3000 	ldr.w	r3, [r9]
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 80003e0:	f9b7 1000 	ldrsh.w	r1, [r7]
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 2, HallState:  %u\r\n", HallState_Internal), 100);
 80003e4:	4876      	ldr	r0, [pc, #472]	; (80005c0 <Mode_Home+0x278>)
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80003e6:	2200      	movs	r2, #0
 80003e8:	635a      	str	r2, [r3, #52]	; 0x34
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 80003ea:	6399      	str	r1, [r3, #56]	; 0x38
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 80003ec:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 2, HallState:  %u\r\n", HallState_Internal), 100);
 80003ee:	4977      	ldr	r1, [pc, #476]	; (80005cc <Mode_Home+0x284>)
 80003f0:	2203      	movs	r2, #3
 80003f2:	f007 fd0f 	bl	8007e14 <siprintf>
 80003f6:	2364      	movs	r3, #100	; 0x64
 80003f8:	2219      	movs	r2, #25
 80003fa:	4971      	ldr	r1, [pc, #452]	; (80005c0 <Mode_Home+0x278>)
 80003fc:	4871      	ldr	r0, [pc, #452]	; (80005c4 <Mode_Home+0x27c>)
 80003fe:	f005 f927 	bl	8005650 <HAL_UART_Transmit>
					  HallStateCounter_Internal++;
 8000402:	3401      	adds	r4, #1
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 8000404:	4b70      	ldr	r3, [pc, #448]	; (80005c8 <Mode_Home+0x280>)
					  HallStateCounter_Internal++;
 8000406:	b2e4      	uxtb	r4, r4
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 8000408:	fba3 2304 	umull	r2, r3, r3, r4
 800040c:	091b      	lsrs	r3, r3, #4
 800040e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000412:	eba4 04c3 	sub.w	r4, r4, r3, lsl #3
 8000416:	b2e4      	uxtb	r4, r4
	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
 8000418:	42a5      	cmp	r5, r4
 800041a:	f000 8081 	beq.w	8000520 <Mode_Home+0x1d8>
				  	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800041e:	f8d9 3000 	ldr.w	r3, [r9]
				  	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 8000422:	f9b7 2000 	ldrsh.w	r2, [r7]
						  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 3, HallState:  %u\r\n", HallState_Internal), 100);
 8000426:	4866      	ldr	r0, [pc, #408]	; (80005c0 <Mode_Home+0x278>)
				  	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000428:	2100      	movs	r1, #0
 800042a:	6359      	str	r1, [r3, #52]	; 0x34
				  	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 800042c:	639a      	str	r2, [r3, #56]	; 0x38
						  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 3, HallState:  %u\r\n", HallState_Internal), 100);
 800042e:	4968      	ldr	r1, [pc, #416]	; (80005d0 <Mode_Home+0x288>)
				  	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 8000430:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 3, HallState:  %u\r\n", HallState_Internal), 100);
 8000432:	2204      	movs	r2, #4
 8000434:	f007 fcee 	bl	8007e14 <siprintf>
 8000438:	2364      	movs	r3, #100	; 0x64
 800043a:	2219      	movs	r2, #25
 800043c:	4960      	ldr	r1, [pc, #384]	; (80005c0 <Mode_Home+0x278>)
 800043e:	4861      	ldr	r0, [pc, #388]	; (80005c4 <Mode_Home+0x27c>)
 8000440:	f005 f906 	bl	8005650 <HAL_UART_Transmit>
						  HallStateCounter_Internal++;
 8000444:	3401      	adds	r4, #1
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 8000446:	4b60      	ldr	r3, [pc, #384]	; (80005c8 <Mode_Home+0x280>)
						  HallStateCounter_Internal++;
 8000448:	b2e4      	uxtb	r4, r4
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 800044a:	fba3 2304 	umull	r2, r3, r3, r4
 800044e:	091b      	lsrs	r3, r3, #4
 8000450:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000454:	eba4 04c3 	sub.w	r4, r4, r3, lsl #3
 8000458:	b2e4      	uxtb	r4, r4
	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
 800045a:	42ac      	cmp	r4, r5
 800045c:	d060      	beq.n	8000520 <Mode_Home+0x1d8>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800045e:	f8d9 3000 	ldr.w	r3, [r9]
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 8000462:	f9b7 1000 	ldrsh.w	r1, [r7]
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 4, HallState:  %u\r\n", HallState_Internal), 100);
 8000466:	4856      	ldr	r0, [pc, #344]	; (80005c0 <Mode_Home+0x278>)
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000468:	2200      	movs	r2, #0
 800046a:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800046c:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 800046e:	63d9      	str	r1, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 4, HallState:  %u\r\n", HallState_Internal), 100);
 8000470:	2205      	movs	r2, #5
 8000472:	4958      	ldr	r1, [pc, #352]	; (80005d4 <Mode_Home+0x28c>)
 8000474:	f007 fcce 	bl	8007e14 <siprintf>
 8000478:	2364      	movs	r3, #100	; 0x64
 800047a:	2219      	movs	r2, #25
 800047c:	4950      	ldr	r1, [pc, #320]	; (80005c0 <Mode_Home+0x278>)
 800047e:	4851      	ldr	r0, [pc, #324]	; (80005c4 <Mode_Home+0x27c>)
 8000480:	f005 f8e6 	bl	8005650 <HAL_UART_Transmit>
					  HallStateCounter_Internal++;
 8000484:	3401      	adds	r4, #1
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 8000486:	4b50      	ldr	r3, [pc, #320]	; (80005c8 <Mode_Home+0x280>)
					  HallStateCounter_Internal++;
 8000488:	b2e4      	uxtb	r4, r4
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 800048a:	fba3 2304 	umull	r2, r3, r3, r4
 800048e:	091b      	lsrs	r3, r3, #4
 8000490:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000494:	eba4 04c3 	sub.w	r4, r4, r3, lsl #3
 8000498:	b2e4      	uxtb	r4, r4
	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
 800049a:	42a5      	cmp	r5, r4
 800049c:	d040      	beq.n	8000520 <Mode_Home+0x1d8>
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pulse);
 800049e:	f8d9 3000 	ldr.w	r3, [r9]
 80004a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80004a6:	635a      	str	r2, [r3, #52]	; 0x34
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80004a8:	2100      	movs	r1, #0
 80004aa:	6399      	str	r1, [r3, #56]	; 0x38
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 5, HallState:  %u\r\n", HallState_Internal), 100);
 80004ac:	4844      	ldr	r0, [pc, #272]	; (80005c0 <Mode_Home+0x278>)
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 80004ae:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 5, HallState:  %u\r\n", HallState_Internal), 100);
 80004b0:	4949      	ldr	r1, [pc, #292]	; (80005d8 <Mode_Home+0x290>)
 80004b2:	2206      	movs	r2, #6
 80004b4:	f007 fcae 	bl	8007e14 <siprintf>
 80004b8:	2364      	movs	r3, #100	; 0x64
 80004ba:	2219      	movs	r2, #25
 80004bc:	4940      	ldr	r1, [pc, #256]	; (80005c0 <Mode_Home+0x278>)
 80004be:	4841      	ldr	r0, [pc, #260]	; (80005c4 <Mode_Home+0x27c>)
 80004c0:	f005 f8c6 	bl	8005650 <HAL_UART_Transmit>
					  HallStateCounter_Internal++;
 80004c4:	3401      	adds	r4, #1
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 80004c6:	4b40      	ldr	r3, [pc, #256]	; (80005c8 <Mode_Home+0x280>)
					  HallStateCounter_Internal++;
 80004c8:	b2e4      	uxtb	r4, r4
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 80004ca:	fba3 2304 	umull	r2, r3, r3, r4
 80004ce:	091b      	lsrs	r3, r3, #4
 80004d0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80004d4:	eba4 04c3 	sub.w	r4, r4, r3, lsl #3
 80004d8:	b2e4      	uxtb	r4, r4
	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d020      	beq.n	8000520 <Mode_Home+0x1d8>
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pulse);
 80004de:	f8d9 3000 	ldr.w	r3, [r9]
 80004e2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80004e6:	635a      	str	r2, [r3, #52]	; 0x34
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	639a      	str	r2, [r3, #56]	; 0x38
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 6, HallState:  %u\r\n", HallState_Internal), 100);
 80004ec:	493b      	ldr	r1, [pc, #236]	; (80005dc <Mode_Home+0x294>)
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 80004ee:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 6, HallState:  %u\r\n", HallState_Internal), 100);
 80004f0:	4833      	ldr	r0, [pc, #204]	; (80005c0 <Mode_Home+0x278>)
 80004f2:	2207      	movs	r2, #7
 80004f4:	f007 fc8e 	bl	8007e14 <siprintf>
 80004f8:	2364      	movs	r3, #100	; 0x64
 80004fa:	2219      	movs	r2, #25
 80004fc:	4930      	ldr	r1, [pc, #192]	; (80005c0 <Mode_Home+0x278>)
 80004fe:	4831      	ldr	r0, [pc, #196]	; (80005c4 <Mode_Home+0x27c>)
 8000500:	f005 f8a6 	bl	8005650 <HAL_UART_Transmit>
					  HallStateCounter_Internal++;
 8000504:	3401      	adds	r4, #1
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 8000506:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <Mode_Home+0x280>)
					  HallStateCounter_Internal++;
 8000508:	b2e4      	uxtb	r4, r4
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 800050a:	fba3 2304 	umull	r2, r3, r3, r4
 800050e:	091b      	lsrs	r3, r3, #4
 8000510:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000514:	eba4 04c3 	sub.w	r4, r4, r3, lsl #3
 8000518:	b2e4      	uxtb	r4, r4
	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
 800051a:	42a5      	cmp	r5, r4
 800051c:	f47f af3c 	bne.w	8000398 <Mode_Home+0x50>
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
	  //NOte this two lines
//	  HALL_M1.HallStateCounter = 0;
	  HALL_M1.HallStateCounter = HALL_M1.HallCounterHomePosition;
 8000520:	f896 50a8 	ldrb.w	r5, [r6, #168]	; 0xa8
	  HALL_M1.HallStateHomePosition = HALL_M1.HallState;
 8000524:	f896 70a6 	ldrb.w	r7, [r6, #166]	; 0xa6
	  no_of_times = 0;
 8000528:	492d      	ldr	r1, [pc, #180]	; (80005e0 <Mode_Home+0x298>)
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800052a:	f8d9 2000 	ldr.w	r2, [r9]
 800052e:	2300      	movs	r3, #0
	  no_of_times = 0;
 8000530:	700b      	strb	r3, [r1, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000532:	6353      	str	r3, [r2, #52]	; 0x34
	  Null_Offset = 0;
 8000534:	f8a8 3000 	strh.w	r3, [r8]
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000538:	6393      	str	r3, [r2, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 800053a:	63d3      	str	r3, [r2, #60]	; 0x3c
	  HALL_M1.HallStateCounter = HALL_M1.HallCounterHomePosition;
 800053c:	f886 50a7 	strb.w	r5, [r6, #167]	; 0xa7
	  HALL_M1.HallStateHomePosition = HALL_M1.HallState;
 8000540:	f886 70a9 	strb.w	r7, [r6, #169]	; 0xa9
}
 8000544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000548:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80005ec <Mode_Home+0x2a4>
 800054c:	e724      	b.n	8000398 <Mode_Home+0x50>
 800054e:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80005ec <Mode_Home+0x2a4>
 8000552:	4f19      	ldr	r7, [pc, #100]	; (80005b8 <Mode_Home+0x270>)
 8000554:	e763      	b.n	800041e <Mode_Home+0xd6>
 8000556:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80005ec <Mode_Home+0x2a4>
 800055a:	4f17      	ldr	r7, [pc, #92]	; (80005b8 <Mode_Home+0x270>)
 800055c:	e77f      	b.n	800045e <Mode_Home+0x116>
 800055e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80005ec <Mode_Home+0x2a4>
 8000562:	4f15      	ldr	r7, [pc, #84]	; (80005b8 <Mode_Home+0x270>)
 8000564:	e79b      	b.n	800049e <Mode_Home+0x156>
 8000566:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80005ec <Mode_Home+0x2a4>
 800056a:	e7dd      	b.n	8000528 <Mode_Home+0x1e0>
 800056c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80005ec <Mode_Home+0x2a4>
 8000570:	4f11      	ldr	r7, [pc, #68]	; (80005b8 <Mode_Home+0x270>)
 8000572:	e733      	b.n	80003dc <Mode_Home+0x94>
					HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Error, HallState:  %u\r\n", HallState_Internal), 100);
 8000574:	463a      	mov	r2, r7
 8000576:	4659      	mov	r1, fp
 8000578:	4650      	mov	r0, sl
 800057a:	f007 fc4b 	bl	8007e14 <siprintf>
 800057e:	2364      	movs	r3, #100	; 0x64
 8000580:	b282      	uxth	r2, r0
 8000582:	4651      	mov	r1, sl
 8000584:	480f      	ldr	r0, [pc, #60]	; (80005c4 <Mode_Home+0x27c>)
 8000586:	f005 f863 	bl	8005650 <HAL_UART_Transmit>
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 800058a:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <Mode_Home+0x280>)
 800058c:	fba3 2304 	umull	r2, r3, r3, r4
 8000590:	091b      	lsrs	r3, r3, #4
 8000592:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8000596:	eba4 04c3 	sub.w	r4, r4, r3, lsl #3
		if(HallState_Internal ==7)
 800059a:	2f07      	cmp	r7, #7
		HallStateCounter_Internal = HallStateCounter_Internal%72;
 800059c:	b2e4      	uxtb	r4, r4
		if(HallState_Internal ==7)
 800059e:	d102      	bne.n	80005a6 <Mode_Home+0x25e>
 80005a0:	f8df 9048 	ldr.w	r9, [pc, #72]	; 80005ec <Mode_Home+0x2a4>
 80005a4:	e7b9      	b.n	800051a <Mode_Home+0x1d2>
	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
 80005a6:	42a5      	cmp	r5, r4
 80005a8:	f47f aee6 	bne.w	8000378 <Mode_Home+0x30>
 80005ac:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80005ec <Mode_Home+0x2a4>
 80005b0:	e7b6      	b.n	8000520 <Mode_Home+0x1d8>
 80005b2:	bf00      	nop
 80005b4:	200000f4 	.word	0x200000f4
 80005b8:	20000000 	.word	0x20000000
 80005bc:	08008724 	.word	0x08008724
 80005c0:	20000670 	.word	0x20000670
 80005c4:	200007bc 	.word	0x200007bc
 80005c8:	38e38e39 	.word	0x38e38e39
 80005cc:	08008740 	.word	0x08008740
 80005d0:	0800875c 	.word	0x0800875c
 80005d4:	08008778 	.word	0x08008778
 80005d8:	08008794 	.word	0x08008794
 80005dc:	08008708 	.word	0x08008708
 80005e0:	20000840 	.word	0x20000840
 80005e4:	2000066c 	.word	0x2000066c
 80005e8:	080087b0 	.word	0x080087b0
 80005ec:	20000724 	.word	0x20000724

080005f0 <Mode_Home3>:
//	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Final HAll Home COunter: %u\r\n", HALL_M1.HallCounterHomePosition), 100);
//	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Final Hall state home POSITION: %u\r\n", HALL_M1.HallStateHomePosition), 100);
//	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Final hall COunter: %u\r\n", HALL_M1.HallStateCounter), 100);
//	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Final Hall POSITION: %u\r\n", HALL_M1.HallState), 100);
}
void Mode_Home3(){
 80005f0:	b538      	push	{r3, r4, r5, lr}

	uint8_t HallState_Internal = HALL_M1.HallState;
 80005f2:	4c41      	ldr	r4, [pc, #260]	; (80006f8 <Mode_Home3+0x108>)
	uint8_t HallStateCounter_Internal = HALL_M1.HallStateCounter;
	uint8_t HallState_Home = HALL_M1.HallStateHomePosition;
	uint8_t HallStateCounter_Home = HALL_M1.HallCounterHomePosition;

	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Input:  %u\r\n", HallState_Internal), 100);
 80005f4:	4941      	ldr	r1, [pc, #260]	; (80006fc <Mode_Home3+0x10c>)
	uint8_t HallState_Internal = HALL_M1.HallState;
 80005f6:	f894 50a6 	ldrb.w	r5, [r4, #166]	; 0xa6
	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Input:  %u\r\n", HallState_Internal), 100);
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <Mode_Home3+0x110>)
 80005fc:	462a      	mov	r2, r5
 80005fe:	f007 fc09 	bl	8007e14 <siprintf>
 8000602:	4602      	mov	r2, r0
 8000604:	2364      	movs	r3, #100	; 0x64
 8000606:	493e      	ldr	r1, [pc, #248]	; (8000700 <Mode_Home3+0x110>)
 8000608:	483e      	ldr	r0, [pc, #248]	; (8000704 <Mode_Home3+0x114>)
 800060a:	b292      	uxth	r2, r2
 800060c:	f005 f820 	bl	8005650 <HAL_UART_Transmit>
//	while (HallStateCounter_Internal != HallStateCounter_Home){ //&&(HallState_Home != HallState_Home)
		switch(HallState_Internal){
 8000610:	1e6b      	subs	r3, r5, #1
 8000612:	2b05      	cmp	r3, #5
 8000614:	d862      	bhi.n	80006dc <Mode_Home3+0xec>
 8000616:	e8df f003 	tbb	[pc, r3]
 800061a:	3125      	.short	0x3125
 800061c:	0355493d 	.word	0x0355493d
		//step 1
				case STATE_6:
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000620:	4d39      	ldr	r5, [pc, #228]	; (8000708 <Mode_Home3+0x118>)
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 8000622:	4a3a      	ldr	r2, [pc, #232]	; (800070c <Mode_Home3+0x11c>)
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000624:	682b      	ldr	r3, [r5, #0]
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 8000626:	f9b2 2000 	ldrsh.w	r2, [r2]
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800062a:	2100      	movs	r1, #0
 800062c:	6359      	str	r1, [r3, #52]	; 0x34
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
					  HallState_Internal++;
					  HallStateCounter_Internal++;
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 6, HallState:  %u\r\n", HallState_Internal), 100);
 800062e:	4938      	ldr	r1, [pc, #224]	; (8000710 <Mode_Home3+0x120>)
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 8000630:	639a      	str	r2, [r3, #56]	; 0x38
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 8000632:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 6, HallState:  %u\r\n", HallState_Internal), 100);
 8000634:	2207      	movs	r2, #7
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
					  HallState_Internal++;
					  HallStateCounter_Internal++;
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 1, HallState:  %u\r\n", HallState_Internal), 100);
 8000636:	4832      	ldr	r0, [pc, #200]	; (8000700 <Mode_Home3+0x110>)
 8000638:	f007 fbec 	bl	8007e14 <siprintf>
 800063c:	4930      	ldr	r1, [pc, #192]	; (8000700 <Mode_Home3+0x110>)
 800063e:	4831      	ldr	r0, [pc, #196]	; (8000704 <Mode_Home3+0x114>)
 8000640:	2364      	movs	r3, #100	; 0x64
 8000642:	2219      	movs	r2, #25
 8000644:	f005 f804 	bl	8005650 <HAL_UART_Transmit>
		{
			HallState_Internal =1;
		}

//	}
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000648:	682b      	ldr	r3, [r5, #0]
 800064a:	2200      	movs	r2, #0
 800064c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800064e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8000650:	63da      	str	r2, [r3, #60]	; 0x3c
	  //NOte this two lines
//	  HALL_M1.HallStateCounter = 0;
	  HALL_M1.HallStateCounter = HALL_M1.HallCounterHomePosition;
 8000652:	f894 20a8 	ldrb.w	r2, [r4, #168]	; 0xa8
	  HALL_M1.HallStateHomePosition = HALL_M1.HallState;
 8000656:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
	  HALL_M1.HallStateCounter = HALL_M1.HallCounterHomePosition;
 800065a:	f884 20a7 	strb.w	r2, [r4, #167]	; 0xa7
	  HALL_M1.HallStateHomePosition = HALL_M1.HallState;
 800065e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
}
 8000662:	bd38      	pop	{r3, r4, r5, pc}
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000664:	4d28      	ldr	r5, [pc, #160]	; (8000708 <Mode_Home3+0x118>)
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 8000666:	4a29      	ldr	r2, [pc, #164]	; (800070c <Mode_Home3+0x11c>)
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000668:	682b      	ldr	r3, [r5, #0]
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 800066a:	f9b2 1000 	ldrsh.w	r1, [r2]
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800066e:	2200      	movs	r2, #0
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000672:	639a      	str	r2, [r3, #56]	; 0x38
				  	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 8000674:	63d9      	str	r1, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 1, HallState:  %u\r\n", HallState_Internal), 100);
 8000676:	2202      	movs	r2, #2
 8000678:	4926      	ldr	r1, [pc, #152]	; (8000714 <Mode_Home3+0x124>)
 800067a:	e7dc      	b.n	8000636 <Mode_Home3+0x46>
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pulse);
 800067c:	4d22      	ldr	r5, [pc, #136]	; (8000708 <Mode_Home3+0x118>)
 800067e:	4a23      	ldr	r2, [pc, #140]	; (800070c <Mode_Home3+0x11c>)
 8000680:	682b      	ldr	r3, [r5, #0]
 8000682:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000688:	2100      	movs	r1, #0
 800068a:	6399      	str	r1, [r3, #56]	; 0x38
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,pulse);
 800068c:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 2, HallState:  %u\r\n", HallState_Internal), 100);
 800068e:	4922      	ldr	r1, [pc, #136]	; (8000718 <Mode_Home3+0x128>)
 8000690:	2203      	movs	r2, #3
 8000692:	e7d0      	b.n	8000636 <Mode_Home3+0x46>
				  	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pulse);
 8000694:	4d1c      	ldr	r5, [pc, #112]	; (8000708 <Mode_Home3+0x118>)
 8000696:	4a1d      	ldr	r2, [pc, #116]	; (800070c <Mode_Home3+0x11c>)
 8000698:	682b      	ldr	r3, [r5, #0]
 800069a:	f9b2 1000 	ldrsh.w	r1, [r2]
 800069e:	6359      	str	r1, [r3, #52]	; 0x34
				  	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	639a      	str	r2, [r3, #56]	; 0x38
						  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 3, HallState:  %u\r\n", HallState_Internal), 100);
 80006a4:	491d      	ldr	r1, [pc, #116]	; (800071c <Mode_Home3+0x12c>)
				  	    __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 80006a6:	63da      	str	r2, [r3, #60]	; 0x3c
						  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 3, HallState:  %u\r\n", HallState_Internal), 100);
 80006a8:	2204      	movs	r2, #4
 80006aa:	e7c4      	b.n	8000636 <Mode_Home3+0x46>
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pulse);
 80006ac:	4d16      	ldr	r5, [pc, #88]	; (8000708 <Mode_Home3+0x118>)
 80006ae:	4a17      	ldr	r2, [pc, #92]	; (800070c <Mode_Home3+0x11c>)
 80006b0:	682b      	ldr	r3, [r5, #0]
 80006b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 80006b8:	2100      	movs	r1, #0
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 80006ba:	639a      	str	r2, [r3, #56]	; 0x38
					__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 80006bc:	63d9      	str	r1, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 4, HallState:  %u\r\n", HallState_Internal), 100);
 80006be:	2205      	movs	r2, #5
 80006c0:	4917      	ldr	r1, [pc, #92]	; (8000720 <Mode_Home3+0x130>)
 80006c2:	e7b8      	b.n	8000636 <Mode_Home3+0x46>
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80006c4:	4d10      	ldr	r5, [pc, #64]	; (8000708 <Mode_Home3+0x118>)
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 80006c6:	4a11      	ldr	r2, [pc, #68]	; (800070c <Mode_Home3+0x11c>)
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80006c8:	682b      	ldr	r3, [r5, #0]
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 80006ca:	f9b2 1000 	ldrsh.w	r1, [r2]
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	635a      	str	r2, [r3, #52]	; 0x34
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse);
 80006d2:	6399      	str	r1, [r3, #56]	; 0x38
					 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 80006d4:	63da      	str	r2, [r3, #60]	; 0x3c
					  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t CASE 5, HallState:  %u\r\n", HallState_Internal), 100);
 80006d6:	4913      	ldr	r1, [pc, #76]	; (8000724 <Mode_Home3+0x134>)
 80006d8:	2206      	movs	r2, #6
 80006da:	e7ac      	b.n	8000636 <Mode_Home3+0x46>
					HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sprintf(buffer, "\t Error, HallState:  %u\r\n", HallState_Internal), 100);
 80006dc:	462a      	mov	r2, r5
 80006de:	4912      	ldr	r1, [pc, #72]	; (8000728 <Mode_Home3+0x138>)
 80006e0:	4807      	ldr	r0, [pc, #28]	; (8000700 <Mode_Home3+0x110>)
 80006e2:	4d09      	ldr	r5, [pc, #36]	; (8000708 <Mode_Home3+0x118>)
 80006e4:	f007 fb96 	bl	8007e14 <siprintf>
 80006e8:	4602      	mov	r2, r0
 80006ea:	4905      	ldr	r1, [pc, #20]	; (8000700 <Mode_Home3+0x110>)
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <Mode_Home3+0x114>)
 80006ee:	2364      	movs	r3, #100	; 0x64
 80006f0:	b292      	uxth	r2, r2
 80006f2:	f004 ffad 	bl	8005650 <HAL_UART_Transmit>
					break;
 80006f6:	e7a7      	b.n	8000648 <Mode_Home3+0x58>
 80006f8:	200000f4 	.word	0x200000f4
 80006fc:	080087cc 	.word	0x080087cc
 8000700:	20000670 	.word	0x20000670
 8000704:	200007bc 	.word	0x200007bc
 8000708:	20000724 	.word	0x20000724
 800070c:	20000000 	.word	0x20000000
 8000710:	08008708 	.word	0x08008708
 8000714:	08008724 	.word	0x08008724
 8000718:	08008740 	.word	0x08008740
 800071c:	0800875c 	.word	0x0800875c
 8000720:	08008778 	.word	0x08008778
 8000724:	08008794 	.word	0x08008794
 8000728:	080087b0 	.word	0x080087b0

0800072c <Home_Offset>:
	HALL_M1.HallCounterHomePosition = HALL_M1.HallCounterHomePosition +1;
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <Home_Offset+0x10>)
 800072e:	f892 30a8 	ldrb.w	r3, [r2, #168]	; 0xa8
 8000732:	3301      	adds	r3, #1
 8000734:	f882 30a8 	strb.w	r3, [r2, #168]	; 0xa8
	Mode_Home3();
 8000738:	f7ff bf5a 	b.w	80005f0 <Mode_Home3>
 800073c:	200000f4 	.word	0x200000f4

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b510      	push	{r4, lr}
 8000742:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000744:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000746:	2234      	movs	r2, #52	; 0x34
 8000748:	a811      	add	r0, sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	e9cd 110b 	strd	r1, r1, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	e9cd 1101 	strd	r1, r1, [sp, #4]
 8000752:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	9100      	str	r1, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075c:	f007 fb52 	bl	8007e04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000766:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076c:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000772:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000778:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800077e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f003 fb54 	bl	8003e2c <HAL_RCC_OscConfig>
 8000784:	b108      	cbz	r0, 800078a <SystemClock_Config+0x4a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000786:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000788:	e7fe      	b.n	8000788 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078a:	220f      	movs	r2, #15
 800078c:	2302      	movs	r3, #2
 800078e:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800079a:	4621      	mov	r1, r4
 800079c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a2:	f003 fe2b 	bl	80043fc <HAL_RCC_ClockConfig>
 80007a6:	b108      	cbz	r0, 80007ac <SystemClock_Config+0x6c>
 80007a8:	b672      	cpsid	i
  while (1)
 80007aa:	e7fe      	b.n	80007aa <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80007ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80007b0:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b4:	a811      	add	r0, sp, #68	; 0x44
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80007b6:	9211      	str	r2, [sp, #68]	; 0x44
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 80007b8:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ba:	f003 ff7f 	bl	80046bc <HAL_RCCEx_PeriphCLKConfig>
 80007be:	b108      	cbz	r0, 80007c4 <SystemClock_Config+0x84>
 80007c0:	b672      	cpsid	i
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <SystemClock_Config+0x82>
}
 80007c4:	b01e      	add	sp, #120	; 0x78
 80007c6:	bd10      	pop	{r4, pc}

080007c8 <main>:
{
 80007c8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	2400      	movs	r4, #0
{
 80007ce:	b0a3      	sub	sp, #140	; 0x8c
  HAL_Init();
 80007d0:	f002 fcac 	bl	800312c <HAL_Init>
  SystemClock_Config();
 80007d4:	f7ff ffb4 	bl	8000740 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 80007dc:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e0:	4baf      	ldr	r3, [pc, #700]	; (8000aa0 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	941a      	str	r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	48af      	ldr	r0, [pc, #700]	; (8000aa4 <main+0x2dc>)
  hadc1.Instance = ADC1;
 80007e8:	4daf      	ldr	r5, [pc, #700]	; (8000aa8 <main+0x2e0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	695a      	ldr	r2, [r3, #20]
 80007f2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80007f6:	9200      	str	r2, [sp, #0]
 80007f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fa:	695a      	ldr	r2, [r3, #20]
 80007fc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000800:	615a      	str	r2, [r3, #20]
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000808:	9201      	str	r2, [sp, #4]
 800080a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	695a      	ldr	r2, [r3, #20]
 8000816:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800081a:	9202      	str	r2, [sp, #8]
 800081c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000830:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000832:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000836:	f003 faf3 	bl	8003e20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 800083a:	489c      	ldr	r0, [pc, #624]	; (8000aac <main+0x2e4>)
 800083c:	4622      	mov	r2, r4
 800083e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000842:	f003 faed 	bl	8003e20 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800084a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800084e:	4897      	ldr	r0, [pc, #604]	; (8000aac <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	9418      	str	r4, [sp, #96]	; 0x60
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000852:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000854:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = LD2_Pin;
 8000858:	f04f 0a00 	mov.w	sl, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800085c:	f003 f9fc 	bl	8003c58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000860:	f04f 0b00 	mov.w	fp, #0
 8000864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000868:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086a:	488e      	ldr	r0, [pc, #568]	; (8000aa4 <main+0x2dc>)
 800086c:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = LD2_Pin;
 800086e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000872:	e9cd ab18 	strd	sl, fp, [sp, #96]	; 0x60
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000876:	f003 f9ef 	bl	8003c58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800087a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800087e:	2301      	movs	r3, #1
 8000880:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	4889      	ldr	r0, [pc, #548]	; (8000aac <main+0x2e4>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000886:	2303      	movs	r3, #3
 8000888:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	a916      	add	r1, sp, #88	; 0x58
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800088c:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000890:	f003 f9e2 	bl	8003c58 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000894:	2228      	movs	r2, #40	; 0x28
 8000896:	4621      	mov	r1, r4
 8000898:	a816      	add	r0, sp, #88	; 0x58
 800089a:	f007 fab3 	bl	8007e04 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800089e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a2:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
 80008a6:	e9c5 c300 	strd	ip, r3, [r5]
  hadc1.Init.NbrOfConversion = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ae:	2201      	movs	r2, #1
 80008b0:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008b2:	2601      	movs	r6, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80008b4:	f04f 0820 	mov.w	r8, #32
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b8:	2704      	movs	r7, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ba:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008be:	832c      	strh	r4, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c0:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 80008c2:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80008c6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 80008ca:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ce:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008d0:	612e      	str	r6, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d2:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80008d6:	f8c5 800c 	str.w	r8, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008da:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008de:	616f      	str	r7, [r5, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e0:	636e      	str	r6, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e2:	f002 fc87 	bl	80031f4 <HAL_ADC_Init>
 80008e6:	b108      	cbz	r0, 80008ec <main+0x124>
 80008e8:	b672      	cpsid	i
  while (1)
 80008ea:	e7fe      	b.n	80008ea <main+0x122>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80008ec:	e9cd 6616 	strd	r6, r6, [sp, #88]	; 0x58
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80008f0:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
  sConfigInjected.QueueInjectedContext = ENABLE;
 80008f4:	f88d 6076 	strb.w	r6, [sp, #118]	; 0x76
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80008f8:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80008fa:	f8ad 0074 	strh.w	r0, [sp, #116]	; 0x74
  sConfigInjected.InjectedNbrOfConversion = 3;
 80008fe:	2603      	movs	r6, #3
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000900:	2200      	movs	r2, #0
 8000902:	2340      	movs	r3, #64	; 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000904:	a916      	add	r1, sp, #88	; 0x58
 8000906:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000908:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 800090c:	9718      	str	r7, [sp, #96]	; 0x60
  sConfigInjected.InjectedNbrOfConversion = 3;
 800090e:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000910:	f002 fefc 	bl	800370c <HAL_ADCEx_InjectedConfigChannel>
 8000914:	b108      	cbz	r0, 800091a <main+0x152>
 8000916:	b672      	cpsid	i
  while (1)
 8000918:	e7fe      	b.n	8000918 <main+0x150>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800091a:	2207      	movs	r2, #7
 800091c:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800091e:	a916      	add	r1, sp, #88	; 0x58
 8000920:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000922:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000926:	f002 fef1 	bl	800370c <HAL_ADCEx_InjectedConfigChannel>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000930:	2206      	movs	r2, #6
 8000932:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000934:	a916      	add	r1, sp, #88	; 0x58
 8000936:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000938:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800093c:	f002 fee6 	bl	800370c <HAL_ADCEx_InjectedConfigChannel>
 8000940:	b108      	cbz	r0, 8000946 <main+0x17e>
 8000942:	b672      	cpsid	i
  while (1)
 8000944:	e7fe      	b.n	8000944 <main+0x17c>
  sConfig.Channel = ADC_CHANNEL_2;
 8000946:	2202      	movs	r2, #2
 8000948:	2301      	movs	r3, #1
 800094a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_2;
 8000950:	2205      	movs	r2, #5
 8000952:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000954:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 8000956:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 800095a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095e:	f002 fd3d 	bl	80033dc <HAL_ADC_ConfigChannel>
 8000962:	b108      	cbz	r0, 8000968 <main+0x1a0>
 8000964:	b672      	cpsid	i
  while (1)
 8000966:	e7fe      	b.n	8000966 <main+0x19e>
  sConfig.Channel = ADC_CHANNEL_8;
 8000968:	2208      	movs	r2, #8
 800096a:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	4628      	mov	r0, r5
 800096e:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_8;
 8000970:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000974:	f002 fd32 	bl	80033dc <HAL_ADC_ConfigChannel>
 8000978:	b108      	cbz	r0, 800097e <main+0x1b6>
 800097a:	b672      	cpsid	i
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x1b4>
  hdac.Instance = DAC;
 800097e:	4c4c      	ldr	r4, [pc, #304]	; (8000ab0 <main+0x2e8>)
 8000980:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <main+0x2ec>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8000982:	9018      	str	r0, [sp, #96]	; 0x60
 8000984:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000988:	4620      	mov	r0, r4
  hdac.Instance = DAC;
 800098a:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800098c:	f003 f92a 	bl	8003be4 <HAL_DAC_Init>
 8000990:	4602      	mov	r2, r0
 8000992:	b108      	cbz	r0, 8000998 <main+0x1d0>
 8000994:	b672      	cpsid	i
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x1ce>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000998:	4620      	mov	r0, r4
 800099a:	a916      	add	r1, sp, #88	; 0x58
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 800099c:	243c      	movs	r4, #60	; 0x3c
 800099e:	2502      	movs	r5, #2
 80009a0:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009a4:	f003 f934 	bl	8003c10 <HAL_DAC_ConfigChannel>
 80009a8:	4604      	mov	r4, r0
 80009aa:	b108      	cbz	r0, 80009b0 <main+0x1e8>
 80009ac:	b672      	cpsid	i
  while (1)
 80009ae:	e7fe      	b.n	80009ae <main+0x1e6>
  htim1.Instance = TIM1;
 80009b0:	4d41      	ldr	r5, [pc, #260]	; (8000ab8 <main+0x2f0>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009b2:	9008      	str	r0, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80009b8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 80009bc:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009c0:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80009c4:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	e9cd 0005 	strd	r0, r0, [sp, #20]
 80009cc:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ce:	9014      	str	r0, [sp, #80]	; 0x50
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009d0:	4601      	mov	r1, r0
 80009d2:	222c      	movs	r2, #44	; 0x2c
 80009d4:	a816      	add	r0, sp, #88	; 0x58
 80009d6:	f007 fa15 	bl	8007e04 <memset>
  htim1.Instance = TIM1;
 80009da:	4b38      	ldr	r3, [pc, #224]	; (8000abc <main+0x2f4>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80009dc:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 80009e0:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009e2:	f640 249c 	movw	r4, #2716	; 0xa9c
 80009e6:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ea:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009ec:	e9c5 4303 	strd	r4, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80009f0:	f8c5 8008 	str.w	r8, [r5, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80009f4:	616e      	str	r6, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009f6:	f003 ffdd 	bl	80049b4 <HAL_TIM_Base_Init>
 80009fa:	b108      	cbz	r0, 8000a00 <main+0x238>
 80009fc:	b672      	cpsid	i
  while (1)
 80009fe:	e7fe      	b.n	80009fe <main+0x236>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a00:	4628      	mov	r0, r5
 8000a02:	f004 f855 	bl	8004ab0 <HAL_TIM_PWM_Init>
 8000a06:	b108      	cbz	r0, 8000a0c <main+0x244>
 8000a08:	b672      	cpsid	i
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <main+0x242>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a0c:	2206      	movs	r2, #6
 8000a0e:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <main+0x2f0>)
 8000a12:	a908      	add	r1, sp, #32
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a14:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000a18:	f004 f9fa 	bl	8004e10 <HAL_TIM_SlaveConfigSynchro>
 8000a1c:	b108      	cbz	r0, 8000a22 <main+0x25a>
 8000a1e:	b672      	cpsid	i
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0x258>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a22:	2270      	movs	r2, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a24:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a26:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a28:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <main+0x2f0>)
 8000a2a:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000a2c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a30:	f004 fcc8 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4602      	mov	r2, r0
 8000a36:	b108      	cbz	r0, 8000a3c <main+0x274>
 8000a38:	b672      	cpsid	i
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <main+0x272>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3c:	f04f 0a00 	mov.w	sl, #0
 8000a40:	f04f 0b00 	mov.w	fp, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a44:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a46:	2660      	movs	r6, #96	; 0x60
 8000a48:	f240 574e 	movw	r7, #1358	; 0x54e
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4c:	481a      	ldr	r0, [pc, #104]	; (8000ab8 <main+0x2f0>)
 8000a4e:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a50:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8000a54:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
 8000a58:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a5c:	f004 fafa 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 8000a60:	b108      	cbz	r0, 8000a66 <main+0x29e>
 8000a62:	b672      	cpsid	i
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <main+0x29c>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a66:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <main+0x2f0>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	a90e      	add	r1, sp, #56	; 0x38
 8000a6c:	f004 faf2 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	b108      	cbz	r0, 8000a76 <main+0x2ae>
 8000a72:	b672      	cpsid	i
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <main+0x2ac>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a76:	4810      	ldr	r0, [pc, #64]	; (8000ab8 <main+0x2f0>)
 8000a78:	2208      	movs	r2, #8
 8000a7a:	a90e      	add	r1, sp, #56	; 0x38
 8000a7c:	f004 faea 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	b108      	cbz	r0, 8000a86 <main+0x2be>
 8000a82:	b672      	cpsid	i
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <main+0x2bc>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a86:	2670      	movs	r6, #112	; 0x70
 8000a88:	f640 279b 	movw	r7, #2715	; 0xa9b
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a8c:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <main+0x2f0>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a92:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a96:	f004 fadd 	bl	8005054 <HAL_TIM_PWM_ConfigChannel>
 8000a9a:	b188      	cbz	r0, 8000ac0 <main+0x2f8>
 8000a9c:	b672      	cpsid	i
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <main+0x2d6>
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	200006c0 	.word	0x200006c0
 8000aac:	48000800 	.word	0x48000800
 8000ab0:	20000710 	.word	0x20000710
 8000ab4:	40007400 	.word	0x40007400
 8000ab8:	20000724 	.word	0x20000724
 8000abc:	40012c00 	.word	0x40012c00
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac8:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8000acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000adc:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ae6:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aea:	9020      	str	r0, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000aec:	2200      	movs	r2, #0
 8000aee:	2307      	movs	r3, #7
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000af0:	4852      	ldr	r0, [pc, #328]	; (8000c3c <main+0x474>)
 8000af2:	a916      	add	r1, sp, #88	; 0x58
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000af4:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000af8:	f004 fc9c 	bl	8005434 <HAL_TIMEx_ConfigBreakDeadTime>
 8000afc:	4604      	mov	r4, r0
 8000afe:	b108      	cbz	r0, 8000b04 <main+0x33c>
 8000b00:	b672      	cpsid	i
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <main+0x33a>
  htim2.Instance = TIM2;
 8000b04:	4e4e      	ldr	r6, [pc, #312]	; (8000c40 <main+0x478>)
  HAL_TIM_MspPostInit(&htim1);
 8000b06:	484d      	ldr	r0, [pc, #308]	; (8000c3c <main+0x474>)
 8000b08:	f001 fdd2 	bl	80026b0 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b10:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b12:	4630      	mov	r0, r6
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b18:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8000b1c:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000b20:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000b24:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	e9cd 4408 	strd	r4, r4, [sp, #32]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2c:	e9c6 4401 	strd	r4, r4, [r6, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	940a      	str	r4, [sp, #40]	; 0x28
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	61b4      	str	r4, [r6, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000b36:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b38:	f003 ff3c 	bl	80049b4 <HAL_TIM_Base_Init>
 8000b3c:	b108      	cbz	r0, 8000b42 <main+0x37a>
 8000b3e:	b672      	cpsid	i
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x378>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b46:	a916      	add	r1, sp, #88	; 0x58
 8000b48:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4a:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4c:	f004 f8b0 	bl	8004cb0 <HAL_TIM_ConfigClockSource>
 8000b50:	b108      	cbz	r0, 8000b56 <main+0x38e>
 8000b52:	b672      	cpsid	i
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <main+0x38c>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b56:	220b      	movs	r2, #11
 8000b58:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000b5a:	a90e      	add	r1, sp, #56	; 0x38
 8000b5c:	4630      	mov	r0, r6
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b5e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8000b62:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000b66:	f004 fbc7 	bl	80052f8 <HAL_TIMEx_HallSensor_Init>
 8000b6a:	b108      	cbz	r0, 8000b70 <main+0x3a8>
 8000b6c:	b672      	cpsid	i
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <main+0x3a6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000b70:	2250      	movs	r2, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b74:	4832      	ldr	r0, [pc, #200]	; (8000c40 <main+0x478>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000b76:	9208      	str	r2, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b78:	a908      	add	r1, sp, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b7c:	f004 fc22 	bl	80053c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4602      	mov	r2, r0
 8000b82:	b108      	cbz	r0, 8000b88 <main+0x3c0>
 8000b84:	b672      	cpsid	i
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <main+0x3be>
  huart2.Instance = USART2;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <main+0x47c>)
  huart2.Init.BaudRate = 115200;
 8000b8a:	482f      	ldr	r0, [pc, #188]	; (8000c48 <main+0x480>)
 8000b8c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b90:	e9c3 0100 	strd	r0, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b94:	210c      	movs	r1, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b96:	4618      	mov	r0, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b98:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	e9c3 2104 	strd	r2, r1, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba4:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ba8:	f004 fe10 	bl	80057cc <HAL_UART_Init>
 8000bac:	4604      	mov	r4, r0
 8000bae:	b108      	cbz	r0, 8000bb4 <main+0x3ec>
 8000bb0:	b672      	cpsid	i
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <main+0x3ea>
  MX_MotorControl_Init();
 8000bb4:	f001 fa08 	bl	8001fc8 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2104      	movs	r1, #4
 8000bbc:	2018      	movs	r0, #24
 8000bbe:	f002 ffa5 	bl	8003b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000bc2:	2018      	movs	r0, #24
 8000bc4:	f002 ffe0 	bl	8003b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000bc8:	4622      	mov	r2, r4
 8000bca:	4621      	mov	r1, r4
 8000bcc:	2019      	movs	r0, #25
 8000bce:	f002 ff9d 	bl	8003b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bd2:	2019      	movs	r0, #25
 8000bd4:	f002 ffd8 	bl	8003b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8000bd8:	4622      	mov	r2, r4
 8000bda:	2102      	movs	r1, #2
 8000bdc:	2012      	movs	r0, #18
 8000bde:	f002 ff95 	bl	8003b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000be2:	2012      	movs	r0, #18
 8000be4:	f002 ffd0 	bl	8003b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000be8:	4622      	mov	r2, r4
 8000bea:	2103      	movs	r1, #3
 8000bec:	201c      	movs	r0, #28
 8000bee:	f002 ff8d 	bl	8003b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf2:	201c      	movs	r0, #28
 8000bf4:	f002 ffc8 	bl	8003b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000bf8:	2103      	movs	r1, #3
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2026      	movs	r0, #38	; 0x26
 8000bfe:	f002 ff85 	bl	8003b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c02:	2026      	movs	r0, #38	; 0x26
 8000c04:	f002 ffc0 	bl	8003b88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000c08:	4622      	mov	r2, r4
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	2028      	movs	r0, #40	; 0x28
 8000c0e:	f002 ff7d 	bl	8003b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c12:	2028      	movs	r0, #40	; 0x28
 8000c14:	f002 ffb8 	bl	8003b88 <HAL_NVIC_EnableIRQ>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000c18:	682b      	ldr	r3, [r5, #0]
     HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <main+0x474>)
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000c1c:	635c      	str	r4, [r3, #52]	; 0x34
     HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000c1e:	4621      	mov	r1, r4
     __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000c20:	639c      	str	r4, [r3, #56]	; 0x38
     __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8000c22:	63dc      	str	r4, [r3, #60]	; 0x3c
     HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000c24:	f003 ffc0 	bl	8004ba8 <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000c28:	2104      	movs	r1, #4
 8000c2a:	4804      	ldr	r0, [pc, #16]	; (8000c3c <main+0x474>)
 8000c2c:	f003 ffbc 	bl	8004ba8 <HAL_TIM_PWM_Start>
     HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <main+0x474>)
 8000c32:	2108      	movs	r1, #8
 8000c34:	f003 ffb8 	bl	8004ba8 <HAL_TIM_PWM_Start>
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <main+0x470>
 8000c3a:	bf00      	nop
 8000c3c:	20000724 	.word	0x20000724
 8000c40:	20000770 	.word	0x20000770
 8000c44:	200007bc 	.word	0x200007bc
 8000c48:	40004400 	.word	0x40004400

08000c4c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000c4c:	4b01      	ldr	r3, [pc, #4]	; (8000c54 <MC_StartMotor1+0x8>)
 8000c4e:	6818      	ldr	r0, [r3, #0]
 8000c50:	f000 b83a 	b.w	8000cc8 <MCI_StartMotor>
 8000c54:	2000092c 	.word	0x2000092c

08000c58 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000c58:	4b01      	ldr	r3, [pc, #4]	; (8000c60 <MC_StopMotor1+0x8>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	f000 b83e 	b.w	8000cdc <MCI_StopMotor>
 8000c60:	2000092c 	.word	0x2000092c

08000c64 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000c64:	4b01      	ldr	r3, [pc, #4]	; (8000c6c <MC_GetSTMStateMotor1+0x8>)
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	f000 b880 	b.w	8000d6c <MCI_GetSTMState>
 8000c6c:	2000092c 	.word	0x2000092c

08000c70 <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c70:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000c74:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000c78:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c7a:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000c7e:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000c82:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000c86:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000c8a:	4770      	bx	lr

08000c8c <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c8c:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c90:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c94:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000c98:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000c9a:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c9c:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000c9e:	4770      	bx	lr

08000ca0 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ca0:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ca4:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ca6:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000caa:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000cac:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cae:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000cb4:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000cb6:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cb8:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000cba:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000cbc:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cc0:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000cc2:	b002      	add	sp, #8
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000cc8:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000cca:	2103      	movs	r1, #3
{
 8000ccc:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000cce:	6800      	ldr	r0, [r0, #0]
 8000cd0:	f006 fe96 	bl	8007a00 <STM_NextState>

  if ( RetVal == true )
 8000cd4:	b108      	cbz	r0, 8000cda <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000cda:	bd10      	pop	{r4, pc}

08000cdc <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000cdc:	6800      	ldr	r0, [r0, #0]
 8000cde:	2107      	movs	r1, #7
 8000ce0:	f006 be8e 	b.w	8007a00 <STM_NextState>

08000ce4 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000ce4:	6800      	ldr	r0, [r0, #0]
 8000ce6:	f006 bf01 	b.w	8007aec <STM_FaultAcknowledged>
 8000cea:	bf00      	nop

08000cec <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000cec:	6800      	ldr	r0, [r0, #0]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	f006 be86 	b.w	8007a00 <STM_NextState>

08000cf4 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000cf4:	b178      	cbz	r0, 8000d16 <MCI_ExecBufferedCommands+0x22>
{
 8000cf6:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000cf8:	7e03      	ldrb	r3, [r0, #24]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	d000      	beq.n	8000d02 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000d00:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000d02:	7b01      	ldrb	r1, [r0, #12]
 8000d04:	2902      	cmp	r1, #2
 8000d06:	d020      	beq.n	8000d4a <MCI_ExecBufferedCommands+0x56>
 8000d08:	2903      	cmp	r1, #3
 8000d0a:	d005      	beq.n	8000d18 <MCI_ExecBufferedCommands+0x24>
 8000d0c:	2901      	cmp	r1, #1
 8000d0e:	d00c      	beq.n	8000d2a <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000d10:	2303      	movs	r3, #3
 8000d12:	7623      	strb	r3, [r4, #24]
}
 8000d14:	bd10      	pop	{r4, pc}
 8000d16:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000d18:	6882      	ldr	r2, [r0, #8]
 8000d1a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000d1e:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000d22:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000d24:	2302      	movs	r3, #2
 8000d26:	7623      	strb	r3, [r4, #24]
}
 8000d28:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d2a:	6883      	ldr	r3, [r0, #8]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000d32:	6840      	ldr	r0, [r0, #4]
 8000d34:	f006 fda0 	bl	8007878 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000d38:	8ae2      	ldrh	r2, [r4, #22]
 8000d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d3e:	6860      	ldr	r0, [r4, #4]
 8000d40:	f006 fd9e 	bl	8007880 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d0e3      	beq.n	8000d10 <MCI_ExecBufferedCommands+0x1c>
 8000d48:	e7ec      	b.n	8000d24 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d4a:	6883      	ldr	r3, [r0, #8]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000d52:	6840      	ldr	r0, [r0, #4]
 8000d54:	f006 fd90 	bl	8007878 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000d58:	8ae2      	ldrh	r2, [r4, #22]
 8000d5a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000d5e:	6860      	ldr	r0, [r4, #4]
 8000d60:	f006 fd8e 	bl	8007880 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d64:	2800      	cmp	r0, #0
 8000d66:	d0d3      	beq.n	8000d10 <MCI_ExecBufferedCommands+0x1c>
 8000d68:	e7dc      	b.n	8000d24 <MCI_ExecBufferedCommands+0x30>
 8000d6a:	bf00      	nop

08000d6c <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000d6c:	6800      	ldr	r0, [r0, #0]
 8000d6e:	f006 bebb 	b.w	8007ae8 <STM_GetState>
 8000d72:	bf00      	nop

08000d74 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000d74:	7e40      	ldrb	r0, [r0, #25]
 8000d76:	4770      	bx	lr

08000d78 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000d78:	7b03      	ldrb	r3, [r0, #12]
 8000d7a:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000d7c:	bf0c      	ite	eq
 8000d7e:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000d82:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000d88:	6840      	ldr	r0, [r0, #4]
 8000d8a:	f006 bdc1 	b.w	8007910 <STC_StopRamp>
 8000d8e:	bf00      	nop

08000d90 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000d90:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000d92:	6840      	ldr	r0, [r0, #4]
 8000d94:	f006 fd56 	bl	8007844 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000d9c:	f006 bcf4 	b.w	8007788 <SPD_GetAvrgMecSpeedUnit>

08000da0 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000da0:	6840      	ldr	r0, [r0, #4]
 8000da2:	f006 bd59 	b.w	8007858 <STC_GetMecSpeedRefUnit>
 8000da6:	bf00      	nop

08000da8 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000da8:	6882      	ldr	r2, [r0, #8]
 8000daa:	6810      	ldr	r0, [r2, #0]
 8000dac:	2300      	movs	r3, #0
 8000dae:	b282      	uxth	r2, r0
 8000db0:	f362 030f 	bfi	r3, r2, #0, #16
 8000db4:	0c00      	lsrs	r0, r0, #16
 8000db6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dba:	b082      	sub	sp, #8
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	b002      	add	sp, #8
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop

08000dc4 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000dc4:	6882      	ldr	r2, [r0, #8]
 8000dc6:	6850      	ldr	r0, [r2, #4]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	b282      	uxth	r2, r0
 8000dcc:	f362 030f 	bfi	r3, r2, #0, #16
 8000dd0:	0c00      	lsrs	r0, r0, #16
 8000dd2:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dd6:	b082      	sub	sp, #8
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	b002      	add	sp, #8
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000de0:	6882      	ldr	r2, [r0, #8]
 8000de2:	68d0      	ldr	r0, [r2, #12]
 8000de4:	2300      	movs	r3, #0
 8000de6:	b282      	uxth	r2, r0
 8000de8:	f362 030f 	bfi	r3, r2, #0, #16
 8000dec:	0c00      	lsrs	r0, r0, #16
 8000dee:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000df2:	b082      	sub	sp, #8
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	b002      	add	sp, #8
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000dfc:	6882      	ldr	r2, [r0, #8]
 8000dfe:	6910      	ldr	r0, [r2, #16]
 8000e00:	2300      	movs	r3, #0
 8000e02:	b282      	uxth	r2, r0
 8000e04:	f362 030f 	bfi	r3, r2, #0, #16
 8000e08:	0c00      	lsrs	r0, r0, #16
 8000e0a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e0e:	b082      	sub	sp, #8
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	b002      	add	sp, #8
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000e18:	6882      	ldr	r2, [r0, #8]
 8000e1a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	b282      	uxth	r2, r0
 8000e22:	f362 030f 	bfi	r3, r2, #0, #16
 8000e26:	0c00      	lsrs	r0, r0, #16
 8000e28:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e2c:	b082      	sub	sp, #8
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	b002      	add	sp, #8
 8000e32:	4770      	bx	lr

08000e34 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000e34:	6882      	ldr	r2, [r0, #8]
 8000e36:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	b282      	uxth	r2, r0
 8000e3e:	f362 030f 	bfi	r3, r2, #0, #16
 8000e42:	0c00      	lsrs	r0, r0, #16
 8000e44:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e48:	b082      	sub	sp, #8
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	b002      	add	sp, #8
 8000e4e:	4770      	bx	lr

08000e50 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000e50:	6883      	ldr	r3, [r0, #8]
}
 8000e52:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000e56:	4770      	bx	lr

08000e58 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	6882      	ldr	r2, [r0, #8]
 8000e5c:	f361 030f 	bfi	r3, r1, #0, #16
 8000e60:	f361 431f 	bfi	r3, r1, #16, #16
 8000e64:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000e6c:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000e6e:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000e72:	f006 fd8d 	bl	8007990 <STC_GetDefaultIqdref>
 8000e76:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000e7a:	8220      	strh	r0, [r4, #16]
 8000e7c:	8263      	strh	r3, [r4, #18]
}
 8000e7e:	bd10      	pop	{r4, pc}

08000e80 <MCI_Home_Osc>:

/*-- My code --*/
void MCI_Home_Osc(MCI_Handle_t * pHandle)
{
 8000e80:	b508      	push	{r3, lr}
	Enable_BacktoHome(M1);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f8e8 	bl	8001058 <Enable_BacktoHome>
	Mode_Home();
}
 8000e88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Mode_Home();
 8000e8c:	f7ff ba5c 	b.w	8000348 <Mode_Home>

08000e90 <MCI_Home_Offset>:
/*-- My code ends --*/

/*-- My code --*/
void MCI_Home_Offset(){
 8000e90:	b508      	push	{r3, lr}
	Enable_BacktoHome(M1);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f000 f8e0 	bl	8001058 <Enable_BacktoHome>
	Home_Offset();
}
 8000e98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Home_Offset();
 8000e9c:	f7ff bc46 	b.w	800072c <Home_Offset>

08000ea0 <MCI_Home_Null>:
/*-- My code ends --*/

/*-- My code --*/
void MCI_Home_Null(){
	Home_Null_Offset();
 8000ea0:	f7ff ba3e 	b.w	8000320 <Home_Null_Offset>

08000ea4 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000ea4:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000ea8:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000eaa:	fb13 f201 	smulbb	r2, r3, r1
{
 8000eae:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000eb2:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000eb6:	4250      	negs	r0, r2
 8000eb8:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000ebc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000ec0:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000ec2:	da05      	bge.n	8000ed0 <MCM_Clarke+0x2c>
 8000ec4:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000ec6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000eca:	da0c      	bge.n	8000ee6 <MCM_Clarke+0x42>
 8000ecc:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <MCM_Clarke+0x50>)
 8000ece:	e001      	b.n	8000ed4 <MCM_Clarke+0x30>
 8000ed0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f363 000f 	bfi	r0, r3, #0, #16
 8000edc:	b293      	uxth	r3, r2
 8000ede:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000ee6:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MCM_Clarke+0x50>)
 8000ee8:	b20a      	sxth	r2, r1
 8000eea:	4282      	cmp	r2, r0
 8000eec:	bfb8      	it	lt
 8000eee:	4602      	movlt	r2, r0
 8000ef0:	e7f0      	b.n	8000ed4 <MCM_Clarke+0x30>
 8000ef2:	bf00      	nop
 8000ef4:	ffff8001 	.word	0xffff8001

08000ef8 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000ef8:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000efc:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000f00:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000f04:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000f08:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000f0a:	d028      	beq.n	8000f5e <MCM_Trig_Functions+0x66>
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	461a      	mov	r2, r3
 8000f12:	d816      	bhi.n	8000f42 <MCM_Trig_Functions+0x4a>
 8000f14:	b361      	cbz	r1, 8000f70 <MCM_Trig_Functions+0x78>
 8000f16:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000f1a:	d109      	bne.n	8000f30 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f1c:	b2c0      	uxtb	r0, r0
 8000f1e:	43c2      	mvns	r2, r0
 8000f20:	491a      	ldr	r1, [pc, #104]	; (8000f8c <MCM_Trig_Functions+0x94>)
 8000f22:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f24:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f28:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f2c:	4252      	negs	r2, r2
 8000f2e:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	2000      	movs	r0, #0
 8000f34:	f363 000f 	bfi	r0, r3, #0, #16
 8000f38:	b292      	uxth	r2, r2
 8000f3a:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000f3e:	b002      	add	sp, #8
 8000f40:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000f42:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000f46:	d1f3      	bne.n	8000f30 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f48:	4910      	ldr	r1, [pc, #64]	; (8000f8c <MCM_Trig_Functions+0x94>)
 8000f4a:	b2c0      	uxtb	r0, r0
 8000f4c:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f4e:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f52:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f54:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f56:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f5a:	b21b      	sxth	r3, r3
      break;
 8000f5c:	e7e8      	b.n	8000f30 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f5e:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f60:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f62:	490a      	ldr	r1, [pc, #40]	; (8000f8c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f64:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f66:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f6a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8000f6e:	e7df      	b.n	8000f30 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f70:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f72:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f74:	4905      	ldr	r1, [pc, #20]	; (8000f8c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f76:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f78:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f80:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f82:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f84:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f86:	b21b      	sxth	r3, r3
      break;
 8000f88:	e7d2      	b.n	8000f30 <MCM_Trig_Functions+0x38>
 8000f8a:	bf00      	nop
 8000f8c:	080087dc 	.word	0x080087dc

08000f90 <MCM_Park>:
{
 8000f90:	b530      	push	{r4, r5, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	4603      	mov	r3, r0
 8000f96:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f98:	4608      	mov	r0, r1
 8000f9a:	141c      	asrs	r4, r3, #16
{
 8000f9c:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f9e:	f7ff ffab 	bl	8000ef8 <MCM_Trig_Functions>
 8000fa2:	b22d      	sxth	r5, r5
 8000fa4:	fa0f fc80 	sxth.w	ip, r0
 8000fa8:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000faa:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000fae:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8000fb2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000fb6:	da05      	bge.n	8000fc4 <MCM_Park+0x34>
 8000fb8:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000fba:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000fbe:	da22      	bge.n	8001006 <MCM_Park+0x76>
 8000fc0:	4914      	ldr	r1, [pc, #80]	; (8001014 <MCM_Park+0x84>)
 8000fc2:	e001      	b.n	8000fc8 <MCM_Park+0x38>
 8000fc4:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000fc8:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000fcc:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 8000fd0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000fd4:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000fd8:	da04      	bge.n	8000fe4 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 8000fda:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000fde:	da0c      	bge.n	8000ffa <MCM_Park+0x6a>
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MCM_Park+0x84>)
 8000fe2:	e001      	b.n	8000fe8 <MCM_Park+0x58>
 8000fe4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000fe8:	b28a      	uxth	r2, r1
 8000fea:	2000      	movs	r0, #0
 8000fec:	f362 000f 	bfi	r0, r2, #0, #16
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000ff6:	b005      	add	sp, #20
 8000ff8:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MCM_Park+0x84>)
 8000ffc:	b213      	sxth	r3, r2
 8000ffe:	4283      	cmp	r3, r0
 8001000:	bfb8      	it	lt
 8001002:	4603      	movlt	r3, r0
 8001004:	e7f0      	b.n	8000fe8 <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001006:	4903      	ldr	r1, [pc, #12]	; (8001014 <MCM_Park+0x84>)
 8001008:	b212      	sxth	r2, r2
 800100a:	4291      	cmp	r1, r2
 800100c:	bfb8      	it	lt
 800100e:	4611      	movlt	r1, r2
 8001010:	e7da      	b.n	8000fc8 <MCM_Park+0x38>
 8001012:	bf00      	nop
 8001014:	ffff8001 	.word	0xffff8001

08001018 <MCM_Rev_Park>:
{
 8001018:	b530      	push	{r4, r5, lr}
 800101a:	b085      	sub	sp, #20
 800101c:	4604      	mov	r4, r0
 800101e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001020:	4608      	mov	r0, r1
{
 8001022:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001024:	f7ff ff68 	bl	8000ef8 <MCM_Trig_Functions>
 8001028:	1424      	asrs	r4, r4, #16
 800102a:	1402      	asrs	r2, r0, #16
 800102c:	b22d      	sxth	r5, r5
 800102e:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001030:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001034:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001038:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800103c:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8001040:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001044:	2000      	movs	r0, #0
 8001046:	f363 000f 	bfi	r0, r3, #0, #16
 800104a:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 800104e:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001052:	b005      	add	sp, #20
 8001054:	bd30      	pop	{r4, r5, pc}
 8001056:	bf00      	nop

08001058 <Enable_BacktoHome>:
/*-- My code ends --*/

/* USER CODE BEGIN Private Functions */
/*-- My code --*/
void Enable_BacktoHome(uint8_t bMotor){
	R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8001058:	4b01      	ldr	r3, [pc, #4]	; (8001060 <Enable_BacktoHome+0x8>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f005 be04 	b.w	8006c68 <R3_1_TurnOnLowSides>
 8001060:	20000920 	.word	0x20000920

08001064 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001064:	2226      	movs	r2, #38	; 0x26
{
 8001066:	b538      	push	{r3, r4, r5, lr}
 8001068:	fb00 f202 	mul.w	r2, r0, r2
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 800106e:	2400      	movs	r4, #0
 8001070:	509c      	str	r4, [r3, r2]
{
 8001072:	4605      	mov	r5, r0
 8001074:	f102 0108 	add.w	r1, r2, #8
 8001078:	1898      	adds	r0, r3, r2
 800107a:	3210      	adds	r2, #16
 800107c:	4419      	add	r1, r3
 800107e:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001080:	4a11      	ldr	r2, [pc, #68]	; (80010c8 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001082:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001084:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001088:	604c      	str	r4, [r1, #4]
 800108a:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 800108c:	f8c3 4006 	str.w	r4, [r3, #6]
 8001090:	f8c3 400a 	str.w	r4, [r3, #10]
 8001094:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001098:	4621      	mov	r1, r4
 800109a:	f005 fa49 	bl	8006530 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <FOC_Clear+0x68>)
 80010a0:	4621      	mov	r1, r4
 80010a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80010a6:	f005 fa43 	bl	8006530 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <FOC_Clear+0x6c>)
 80010ac:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80010b0:	f006 fbca 	bl	8007848 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <FOC_Clear+0x70>)
 80010b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80010ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80010be:	f005 bc51 	b.w	8006964 <PWMC_SwitchOffPWM>
 80010c2:	bf00      	nop
 80010c4:	20000850 	.word	0x20000850
 80010c8:	2000090c 	.word	0x2000090c
 80010cc:	20000908 	.word	0x20000908
 80010d0:	20000918 	.word	0x20000918
 80010d4:	20000920 	.word	0x20000920

080010d8 <MCboot>:
{
 80010d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 80010dc:	4e5b      	ldr	r6, [pc, #364]	; (800124c <MCboot+0x174>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80010de:	4d5c      	ldr	r5, [pc, #368]	; (8001250 <MCboot+0x178>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 80010e0:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001298 <MCboot+0x1c0>
  HALL_Init (&HALL_M1);
 80010e4:	4f5b      	ldr	r7, [pc, #364]	; (8001254 <MCboot+0x17c>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80010e6:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800129c <MCboot+0x1c4>
  PID_HandleInit(&PIDIqHandle_M1);
 80010ea:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80012a0 <MCboot+0x1c8>
  PID_HandleInit(&PIDIdHandle_M1);
 80010ee:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 80012a4 <MCboot+0x1cc>
{
 80010f2:	b087      	sub	sp, #28
 80010f4:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 80010f6:	4630      	mov	r0, r6
{
 80010f8:	e9cd 3101 	strd	r3, r1, [sp, #4]
  STM_Init(&STM[M1]);
 80010fc:	f006 fc5e 	bl	80079bc <STM_Init>
  bMCBootCompleted = 0;
 8001100:	4a55      	ldr	r2, [pc, #340]	; (8001258 <MCboot+0x180>)
  pCLM[M1] = &CircleLimitationM1;
 8001102:	4b56      	ldr	r3, [pc, #344]	; (800125c <MCboot+0x184>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001104:	4856      	ldr	r0, [pc, #344]	; (8001260 <MCboot+0x188>)
 8001106:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 8001108:	2400      	movs	r4, #0
 800110a:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 800110c:	4a55      	ldr	r2, [pc, #340]	; (8001264 <MCboot+0x18c>)
 800110e:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8001110:	f005 fef8 	bl	8006f04 <R3_1_Init>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001114:	4d54      	ldr	r5, [pc, #336]	; (8001268 <MCboot+0x190>)
  startTimers();
 8001116:	f005 fa93 	bl	8006640 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 800111a:	4640      	mov	r0, r8
 800111c:	f005 f9f4 	bl	8006508 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001120:	4b52      	ldr	r3, [pc, #328]	; (800126c <MCboot+0x194>)
 8001122:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001124:	f8c9 8000 	str.w	r8, [r9]
  HALL_Init (&HALL_M1);
 8001128:	4638      	mov	r0, r7
 800112a:	f004 fcef 	bl	8005b0c <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 800112e:	463a      	mov	r2, r7
 8001130:	f8d9 1000 	ldr.w	r1, [r9]
 8001134:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001136:	f8df 8170 	ldr.w	r8, [pc, #368]	; 80012a8 <MCboot+0x1d0>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 800113a:	f006 fb6d 	bl	8007818 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 800113e:	4658      	mov	r0, fp
 8001140:	f005 f9e2 	bl	8006508 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001144:	4650      	mov	r0, sl
 8001146:	f005 f9df 	bl	8006508 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 800114a:	4949      	ldr	r1, [pc, #292]	; (8001270 <MCboot+0x198>)
  pPIDId[M1] = &PIDIdHandle_M1;
 800114c:	4b49      	ldr	r3, [pc, #292]	; (8001274 <MCboot+0x19c>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 800114e:	f8c1 b000 	str.w	fp, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001152:	4849      	ldr	r0, [pc, #292]	; (8001278 <MCboot+0x1a0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8001154:	f8c3 a000 	str.w	sl, [r3]
  NTC_Init(&TempSensorParamsM1);
 8001158:	f8df b150 	ldr.w	fp, [pc, #336]	; 80012ac <MCboot+0x1d4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 800115c:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 8001160:	f006 fa8a 	bl	8007678 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001164:	4a45      	ldr	r2, [pc, #276]	; (800127c <MCboot+0x1a4>)
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <MCboot+0x1a8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001168:	f8df a144 	ldr.w	sl, [pc, #324]	; 80012b0 <MCboot+0x1d8>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800116c:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 800116e:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001170:	f8d8 2000 	ldr.w	r2, [r8]
 8001174:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001178:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 800117c:	f005 f980 	bl	8006480 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001180:	4940      	ldr	r1, [pc, #256]	; (8001284 <MCboot+0x1ac>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001182:	4b41      	ldr	r3, [pc, #260]	; (8001288 <MCboot+0x1b0>)
 8001184:	4841      	ldr	r0, [pc, #260]	; (800128c <MCboot+0x1b4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001186:	f8c1 b000 	str.w	fp, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800118a:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 800118c:	f006 faf0 	bl	8007770 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001190:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff ff65 	bl	8001064 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 800119a:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800119e:	6828      	ldr	r0, [r5, #0]
 80011a0:	f006 fbf6 	bl	8007990 <STC_GetDefaultIqdref>
 80011a4:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80011a8:	6828      	ldr	r0, [r5, #0]
 80011aa:	f006 fbf1 	bl	8007990 <STC_GetDefaultIqdref>
 80011ae:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80011b2:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80011b6:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 80011b8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 80012b4 <MCboot+0x1dc>
 80011bc:	4834      	ldr	r0, [pc, #208]	; (8001290 <MCboot+0x1b8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80011be:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 80011c0:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80011c4:	4631      	mov	r1, r6
 80011c6:	f7ff fd53 	bl	8000c70 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80011ca:	f8da 3000 	ldr.w	r3, [sl]
 80011ce:	6828      	ldr	r0, [r5, #0]
 80011d0:	9303      	str	r3, [sp, #12]
 80011d2:	f006 fbd3 	bl	800797c <STC_GetMecSpeedRefUnitDefault>
 80011d6:	9b03      	ldr	r3, [sp, #12]
 80011d8:	4601      	mov	r1, r0
 80011da:	4622      	mov	r2, r4
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fd55 	bl	8000c8c <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 80011e2:	9801      	ldr	r0, [sp, #4]
 80011e4:	f8da 3000 	ldr.w	r3, [sl]
 80011e8:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MCboot+0x178>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 80011ec:	4820      	ldr	r0, [pc, #128]	; (8001270 <MCboot+0x198>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80011ee:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 80011f0:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <MCboot+0x1a4>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 80011f4:	4d23      	ldr	r5, [pc, #140]	; (8001284 <MCboot+0x1ac>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 80011f6:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 80011fa:	481e      	ldr	r0, [pc, #120]	; (8001274 <MCboot+0x19c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 80011fc:	f8d9 e000 	ldr.w	lr, [r9]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001200:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001202:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001206:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MCboot+0x1bc>)
  MCT[M1].pPIDId = pPIDId[M1];
 800120c:	6800      	ldr	r0, [r0, #0]
 800120e:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 8001210:	e9c3 2609 	strd	r2, r6, [r3, #36]	; 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001214:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001218:	e9c3 580b 	strd	r5, r8, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 800121c:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001220:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8001224:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8001228:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <MCboot+0x180>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800122e:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8001230:	619f      	str	r7, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001232:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001236:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8001238:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 800123a:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 800123c:	9902      	ldr	r1, [sp, #8]
 800123e:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 8001240:	f882 b000 	strb.w	fp, [r2]
}
 8001244:	b007      	add	sp, #28
 8001246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800124a:	bf00      	nop
 800124c:	200008e8 	.word	0x200008e8
 8001250:	20000920 	.word	0x20000920
 8001254:	200000f4 	.word	0x200000f4
 8001258:	200008ee 	.word	0x200008ee
 800125c:	20000900 	.word	0x20000900
 8001260:	20000354 	.word	0x20000354
 8001264:	20000004 	.word	0x20000004
 8001268:	20000918 	.word	0x20000918
 800126c:	2000040c 	.word	0x2000040c
 8001270:	2000090c 	.word	0x2000090c
 8001274:	20000908 	.word	0x20000908
 8001278:	200003e4 	.word	0x200003e4
 800127c:	20000904 	.word	0x20000904
 8001280:	20000240 	.word	0x20000240
 8001284:	2000091c 	.word	0x2000091c
 8001288:	20000914 	.word	0x20000914
 800128c:	200003cc 	.word	0x200003cc
 8001290:	200008cc 	.word	0x200008cc
 8001294:	20000878 	.word	0x20000878
 8001298:	20000214 	.word	0x20000214
 800129c:	20000910 	.word	0x20000910
 80012a0:	200001e8 	.word	0x200001e8
 80012a4:	200001bc 	.word	0x200001bc
 80012a8:	200008fc 	.word	0x200008fc
 80012ac:	20000440 	.word	0x20000440
 80012b0:	20000850 	.word	0x20000850
 80012b4:	200008f8 	.word	0x200008f8

080012b8 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop

080012bc <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80012bc:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 80012be:	4c08      	ldr	r4, [pc, #32]	; (80012e0 <FOC_CalcCurrRef+0x24>)
 80012c0:	2326      	movs	r3, #38	; 0x26
 80012c2:	fb03 4400 	mla	r4, r3, r0, r4
 80012c6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80012ca:	b103      	cbz	r3, 80012ce <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80012cc:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <FOC_CalcCurrRef+0x28>)
 80012d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80012d4:	f006 fb20 	bl	8007918 <STC_CalcTorqueReference>
 80012d8:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80012da:	8220      	strh	r0, [r4, #16]
}
 80012dc:	bd10      	pop	{r4, pc}
 80012de:	bf00      	nop
 80012e0:	20000850 	.word	0x20000850
 80012e4:	20000918 	.word	0x20000918

080012e8 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80012e8:	4b01      	ldr	r3, [pc, #4]	; (80012f0 <TSK_SetChargeBootCapDelayM1+0x8>)
 80012ea:	8018      	strh	r0, [r3, #0]
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200008f0 	.word	0x200008f0

080012f4 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80012f6:	8818      	ldrh	r0, [r3, #0]
 80012f8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80012fa:	fab0 f080 	clz	r0, r0
 80012fe:	0940      	lsrs	r0, r0, #5
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200008f0 	.word	0x200008f0

08001308 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001308:	4b01      	ldr	r3, [pc, #4]	; (8001310 <TSK_SetStopPermanencyTimeM1+0x8>)
 800130a:	8018      	strh	r0, [r3, #0]
}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200008f4 	.word	0x200008f4

08001314 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001316:	8818      	ldrh	r0, [r3, #0]
 8001318:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800131a:	fab0 f080 	clz	r0, r0
 800131e:	0940      	lsrs	r0, r0, #5
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	200008f4 	.word	0x200008f4

08001328 <TSK_MediumFrequencyTaskM1>:
{
 8001328:	b530      	push	{r4, r5, lr}
 800132a:	b083      	sub	sp, #12
  int16_t wAux = 0;
 800132c:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 800132e:	f10d 0106 	add.w	r1, sp, #6
 8001332:	484d      	ldr	r0, [pc, #308]	; (8001468 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8001334:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8001338:	f004 fd52 	bl	8005de0 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 800133c:	4d4b      	ldr	r5, [pc, #300]	; (800146c <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 800133e:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8001340:	6828      	ldr	r0, [r5, #0]
 8001342:	f005 f947 	bl	80065d4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001346:	484a      	ldr	r0, [pc, #296]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 8001348:	f006 fbce 	bl	8007ae8 <STM_GetState>
  switch ( StateM1 )
 800134c:	1ec3      	subs	r3, r0, #3
 800134e:	2b0f      	cmp	r3, #15
 8001350:	d80d      	bhi.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
 8001352:	e8df f003 	tbb	[pc, r3]
 8001356:	2b1f      	.short	0x2b1f
 8001358:	65524330 	.word	0x65524330
 800135c:	0c0c0c08 	.word	0x0c0c0c08
 8001360:	6e0c0c0c 	.word	0x6e0c0c0c
 8001364:	0e7c      	.short	0x0e7c
    STM_NextState( &STM[M1], IDLE );
 8001366:	4842      	ldr	r0, [pc, #264]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 8001368:	2100      	movs	r1, #0
 800136a:	f006 fb49 	bl	8007a00 <STM_NextState>
}
 800136e:	b003      	add	sp, #12
 8001370:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8001372:	483d      	ldr	r0, [pc, #244]	; (8001468 <TSK_MediumFrequencyTaskM1+0x140>)
 8001374:	f004 fc68 	bl	8005c48 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001378:	483d      	ldr	r0, [pc, #244]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 800137a:	2104      	movs	r1, #4
 800137c:	f006 fb40 	bl	8007a00 <STM_NextState>
 8001380:	2800      	cmp	r0, #0
 8001382:	d0f4      	beq.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff fe6d 	bl	8001064 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 800138a:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <TSK_MediumFrequencyTaskM1+0x14c>)
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	f005 fc95 	bl	8006cbc <R3_1_SwitchOnPWM>
 8001392:	e7ec      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	f005 fc66 	bl	8006c68 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800139c:	2014      	movs	r0, #20
 800139e:	f7ff ffa3 	bl	80012e8 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 80013a2:	2110      	movs	r1, #16
 80013a4:	4832      	ldr	r0, [pc, #200]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 80013a6:	f006 fb2b 	bl	8007a00 <STM_NextState>
    break;
 80013aa:	e7e0      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 80013ac:	2105      	movs	r1, #5
 80013ae:	4830      	ldr	r0, [pc, #192]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 80013b0:	f006 fb26 	bl	8007a00 <STM_NextState>
    break;
 80013b4:	e7db      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 80013b6:	2000      	movs	r0, #0
 80013b8:	f7ff ff7e 	bl	80012b8 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff ff7d 	bl	80012bc <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 80013c2:	2106      	movs	r1, #6
 80013c4:	482a      	ldr	r0, [pc, #168]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 80013c6:	f006 fb1b 	bl	8007a00 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <TSK_MediumFrequencyTaskM1+0x150>)
 80013cc:	6818      	ldr	r0, [r3, #0]
 80013ce:	f006 faed 	bl	80079ac <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <TSK_MediumFrequencyTaskM1+0x154>)
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	f7ff fc8d 	bl	8000cf4 <MCI_ExecBufferedCommands>
    break;
 80013da:	e7c8      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80013dc:	4b27      	ldr	r3, [pc, #156]	; (800147c <TSK_MediumFrequencyTaskM1+0x154>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	f7ff fc88 	bl	8000cf4 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff ff69 	bl	80012bc <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80013ea:	2c00      	cmp	r4, #0
 80013ec:	d1bf      	bne.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80013ee:	4622      	mov	r2, r4
 80013f0:	2120      	movs	r1, #32
 80013f2:	481f      	ldr	r0, [pc, #124]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 80013f4:	f006 fae8 	bl	80079c8 <STM_FaultProcessing>
 80013f8:	e7b9      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <TSK_MediumFrequencyTaskM1+0x14c>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	f005 fca5 	bl	8006d4c <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fe2e 	bl	8001064 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001408:	6828      	ldr	r0, [r5, #0]
 800140a:	f004 fff7 	bl	80063fc <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 800140e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001412:	f7ff ff79 	bl	8001308 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 8001416:	2108      	movs	r1, #8
 8001418:	4815      	ldr	r0, [pc, #84]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 800141a:	f006 faf1 	bl	8007a00 <STM_NextState>
    break;
 800141e:	e7a6      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001420:	f7ff ff78 	bl	8001314 <TSK_StopPermanencyTimeHasElapsedM1>
 8001424:	2800      	cmp	r0, #0
 8001426:	d0a2      	beq.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 8001428:	2109      	movs	r1, #9
 800142a:	4811      	ldr	r0, [pc, #68]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 800142c:	f006 fae8 	bl	8007a00 <STM_NextState>
 8001430:	e79d      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001432:	f7ff ff5f 	bl	80012f4 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001436:	2800      	cmp	r0, #0
 8001438:	d099      	beq.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <TSK_MediumFrequencyTaskM1+0x14c>)
 800143c:	2100      	movs	r1, #0
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f005 fa92 	bl	8006968 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001444:	2111      	movs	r1, #17
 8001446:	480a      	ldr	r0, [pc, #40]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 8001448:	f006 fada 	bl	8007a00 <STM_NextState>
 800144c:	e78f      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <TSK_MediumFrequencyTaskM1+0x14c>)
 8001450:	2101      	movs	r1, #1
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	f005 fa88 	bl	8006968 <PWMC_CurrentReadingCalibr>
 8001458:	2800      	cmp	r0, #0
 800145a:	d088      	beq.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 800145c:	2112      	movs	r1, #18
 800145e:	4804      	ldr	r0, [pc, #16]	; (8001470 <TSK_MediumFrequencyTaskM1+0x148>)
 8001460:	f006 face 	bl	8007a00 <STM_NextState>
 8001464:	e783      	b.n	800136e <TSK_MediumFrequencyTaskM1+0x46>
 8001466:	bf00      	nop
 8001468:	200000f4 	.word	0x200000f4
 800146c:	20000904 	.word	0x20000904
 8001470:	200008e8 	.word	0x200008e8
 8001474:	20000920 	.word	0x20000920
 8001478:	20000918 	.word	0x20000918
 800147c:	200008f8 	.word	0x200008f8

08001480 <MC_Scheduler>:
{
 8001480:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MC_Scheduler+0x48>)
 8001484:	781c      	ldrb	r4, [r3, #0]
 8001486:	2c01      	cmp	r4, #1
 8001488:	d000      	beq.n	800148c <MC_Scheduler+0xc>
}
 800148a:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 800148c:	4d0f      	ldr	r5, [pc, #60]	; (80014cc <MC_Scheduler+0x4c>)
 800148e:	882b      	ldrh	r3, [r5, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	b1ab      	cbz	r3, 80014c0 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001494:	882b      	ldrh	r3, [r5, #0]
 8001496:	3b01      	subs	r3, #1
 8001498:	b29b      	uxth	r3, r3
 800149a:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 800149c:	4a0c      	ldr	r2, [pc, #48]	; (80014d0 <MC_Scheduler+0x50>)
 800149e:	8813      	ldrh	r3, [r2, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	b11b      	cbz	r3, 80014ac <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80014a4:	8813      	ldrh	r3, [r2, #0]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <MC_Scheduler+0x54>)
 80014ae:	8813      	ldrh	r3, [r2, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0e9      	beq.n	800148a <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80014b6:	8813      	ldrh	r3, [r2, #0]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	8013      	strh	r3, [r2, #0]
}
 80014be:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 80014c0:	f7ff ff32 	bl	8001328 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80014c4:	802c      	strh	r4, [r5, #0]
 80014c6:	e7e9      	b.n	800149c <MC_Scheduler+0x1c>
 80014c8:	200008ee 	.word	0x200008ee
 80014cc:	200008f2 	.word	0x200008f2
 80014d0:	200008f0 	.word	0x200008f0
 80014d4:	200008f4 	.word	0x200008f4

080014d8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80014d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 80014dc:	4830      	ldr	r0, [pc, #192]	; (80015a0 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80014de:	4f31      	ldr	r7, [pc, #196]	; (80015a4 <TSK_HighFrequencyTask+0xcc>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80014e0:	4c31      	ldr	r4, [pc, #196]	; (80015a8 <TSK_HighFrequencyTask+0xd0>)
{
 80014e2:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 80014e4:	f004 fc5e 	bl	8005da4 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <TSK_HighFrequencyTask+0xd4>)
 80014ea:	6818      	ldr	r0, [r3, #0]
 80014ec:	f006 f9aa 	bl	8007844 <STC_GetSpeedSensor>
 80014f0:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 80014f2:	f006 f945 	bl	8007780 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80014f6:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 80014f8:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80014fa:	6838      	ldr	r0, [r7, #0]
 80014fc:	f005 f8fa 	bl	80066f4 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001500:	9803      	ldr	r0, [sp, #12]
 8001502:	f7ff fccf 	bl	8000ea4 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001506:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001508:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800150a:	f7ff fd41 	bl	8000f90 <MCM_Park>
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800150e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001512:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001514:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001516:	1ac9      	subs	r1, r1, r3
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <TSK_HighFrequencyTask+0xd8>)
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	f005 f814 	bl	8006548 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001520:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8001524:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001528:	1ac9      	subs	r1, r1, r3
 800152a:	4b22      	ldr	r3, [pc, #136]	; (80015b4 <TSK_HighFrequencyTask+0xdc>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 800152c:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	f005 f80a 	bl	8006548 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <TSK_HighFrequencyTask+0xe0>)
 8001536:	f8ad 8008 	strh.w	r8, [sp, #8]
 800153a:	f8ad 000a 	strh.w	r0, [sp, #10]
 800153e:	9902      	ldr	r1, [sp, #8]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	f004 fa77 	bl	8005a34 <Circle_Limitation>
 8001546:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001548:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800154a:	fa0f f883 	sxth.w	r8, r3
 800154e:	141d      	asrs	r5, r3, #16
 8001550:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001552:	f006 f91d 	bl	8007790 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001556:	4631      	mov	r1, r6
 8001558:	9802      	ldr	r0, [sp, #8]
 800155a:	f7ff fd5d 	bl	8001018 <MCM_Rev_Park>
 800155e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001560:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001562:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001564:	f005 f8c8 	bl	80066f8 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001568:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800156a:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 800156c:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800156e:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 8001570:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001572:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8001574:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001578:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 800157a:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800157c:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 800157e:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001580:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 8001584:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 8001586:	d003      	beq.n	8001590 <TSK_HighFrequencyTask+0xb8>
}
 8001588:	2000      	movs	r0, #0
 800158a:	b006      	add	sp, #24
 800158c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	480a      	ldr	r0, [pc, #40]	; (80015bc <TSK_HighFrequencyTask+0xe4>)
 8001594:	f006 fa18 	bl	80079c8 <STM_FaultProcessing>
}
 8001598:	2000      	movs	r0, #0
 800159a:	b006      	add	sp, #24
 800159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015a0:	200000f4 	.word	0x200000f4
 80015a4:	20000920 	.word	0x20000920
 80015a8:	20000850 	.word	0x20000850
 80015ac:	20000918 	.word	0x20000918
 80015b0:	2000090c 	.word	0x2000090c
 80015b4:	20000908 	.word	0x20000908
 80015b8:	20000900 	.word	0x20000900
 80015bc:	200008e8 	.word	0x200008e8

080015c0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80015c4:	4e20      	ldr	r6, [pc, #128]	; (8001648 <TSK_SafetyTask_PWMOFF+0x88>)
{
 80015c6:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80015c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80015cc:	f004 ff6a 	bl	80064a4 <NTC_CalcAvTemp>
 80015d0:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80015d2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80015d6:	f005 f9f1 	bl	80069bc <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80015da:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80015de:	4328      	orrs	r0, r5
 80015e0:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80015e2:	b334      	cbz	r4, 8001632 <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80015e4:	4f19      	ldr	r7, [pc, #100]	; (800164c <TSK_SafetyTask_PWMOFF+0x8c>)
 80015e6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80015ea:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 80015ee:	43ea      	mvns	r2, r5
 80015f0:	b292      	uxth	r2, r2
 80015f2:	4629      	mov	r1, r5
 80015f4:	4638      	mov	r0, r7
 80015f6:	f006 f9e7 	bl	80079c8 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80015fa:	4638      	mov	r0, r7
 80015fc:	f006 fa74 	bl	8007ae8 <STM_GetState>
 8001600:	280a      	cmp	r0, #10
 8001602:	d002      	beq.n	800160a <TSK_SafetyTask_PWMOFF+0x4a>
 8001604:	280b      	cmp	r0, #11
 8001606:	d00e      	beq.n	8001626 <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800160a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800160e:	f005 f9a9 	bl	8006964 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fd26 	bl	8001064 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <TSK_SafetyTask_PWMOFF+0x90>)
 800161a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800161e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8001622:	f004 beeb 	b.w	80063fc <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001626:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 800162a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800162e:	f005 b999 	b.w	8006964 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] & RVBS_CalcAvVbusFilt(pBusSensorM1);
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <TSK_SafetyTask_PWMOFF+0x94>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f006 f837 	bl	80076a8 <RVBS_CalcAvVbusFilt>
 800163a:	f000 000e 	and.w	r0, r0, #14
 800163e:	4305      	orrs	r5, r0
 8001640:	e7d0      	b.n	80015e4 <TSK_SafetyTask_PWMOFF+0x24>
 8001642:	bf00      	nop
 8001644:	2000091c 	.word	0x2000091c
 8001648:	20000920 	.word	0x20000920
 800164c:	200008e8 	.word	0x200008e8
 8001650:	20000904 	.word	0x20000904
 8001654:	200008fc 	.word	0x200008fc

08001658 <TSK_SafetyTask>:
{
 8001658:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <TSK_SafetyTask+0x1c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d000      	beq.n	8001664 <TSK_SafetyTask+0xc>
}
 8001662:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff ffab 	bl	80015c0 <TSK_SafetyTask_PWMOFF>
}
 800166a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800166e:	f000 bdff 	b.w	8002270 <RCM_ExecUserConv>
 8001672:	bf00      	nop
 8001674:	200008ee 	.word	0x200008ee

08001678 <MC_RunMotorControlTasks>:
{
 8001678:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <MC_RunMotorControlTasks+0x1c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b903      	cbnz	r3, 8001682 <MC_RunMotorControlTasks+0xa>
}
 8001680:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001682:	f7ff fefd 	bl	8001480 <MC_Scheduler>
    TSK_SafetyTask();
 8001686:	f7ff ffe7 	bl	8001658 <TSK_SafetyTask>
}
 800168a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 800168e:	f001 b917 	b.w	80028c0 <UI_Scheduler>
 8001692:	bf00      	nop
 8001694:	200008ee 	.word	0x200008ee

08001698 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <TSK_HardwareFaultTask+0x18>)
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	f005 fb55 	bl	8006d4c <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80016a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 80016a6:	4803      	ldr	r0, [pc, #12]	; (80016b4 <TSK_HardwareFaultTask+0x1c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	f006 b98c 	b.w	80079c8 <STM_FaultProcessing>
 80016b0:	20000920 	.word	0x20000920
 80016b4:	200008e8 	.word	0x200008e8

080016b8 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80016b8:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016ba:	4a41      	ldr	r2, [pc, #260]	; (80017c0 <mc_lock_pins+0x108>)
 80016bc:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <mc_lock_pins+0x10c>)
 80016be:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016c0:	2108      	movs	r1, #8
 80016c2:	b090      	sub	sp, #64	; 0x40
 80016c4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016c6:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016c8:	69d3      	ldr	r3, [r2, #28]
 80016ca:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016cc:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
  (void) temp;
 80016d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016d6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016d8:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016da:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  temp = READ_REG(GPIOx->LCKR);
 80016e0:	69d2      	ldr	r2, [r2, #28]
 80016e2:	920e      	str	r2, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016e8:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  (void) temp;
 80016ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016ee:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016f0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016f2:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80016f4:	69da      	ldr	r2, [r3, #28]
 80016f6:	920d      	str	r2, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 80016f8:	f44f 7080 	mov.w	r0, #256	; 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80016fc:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <mc_lock_pins+0x110>)
  (void) temp;
 80016fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001700:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001702:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001704:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001706:	69da      	ldr	r2, [r3, #28]
 8001708:	920c      	str	r2, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, PinMask);
 800170a:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800170e:	f44f 3281 	mov.w	r2, #66048	; 0x10200
  (void) temp;
 8001712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001714:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001716:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001718:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800171a:	69da      	ldr	r2, [r3, #28]
 800171c:	920b      	str	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800171e:	f44f 3084 	mov.w	r0, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001722:	f44f 6500 	mov.w	r5, #2048	; 0x800
  (void) temp;
 8001726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001728:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800172a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800172c:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	920a      	str	r2, [sp, #40]	; 0x28
  (void) temp;
 8001732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001734:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001736:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001738:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	9209      	str	r2, [sp, #36]	; 0x24
  (void) temp;
 800173e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001740:	4a22      	ldr	r2, [pc, #136]	; (80017cc <mc_lock_pins+0x114>)
 8001742:	f44f 3688 	mov.w	r6, #69632	; 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001746:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800174a:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800174c:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800174e:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001750:	69d6      	ldr	r6, [r2, #28]
 8001752:	9608      	str	r6, [sp, #32]
  (void) temp;
 8001754:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001756:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001758:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800175a:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800175c:	69d0      	ldr	r0, [r2, #28]
 800175e:	9007      	str	r0, [sp, #28]
  (void) temp;
 8001760:	9807      	ldr	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001762:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001764:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001766:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001768:	69d1      	ldr	r1, [r2, #28]
 800176a:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800176c:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800176e:	4918      	ldr	r1, [pc, #96]	; (80017d0 <mc_lock_pins+0x118>)
  (void) temp;
 8001770:	9806      	ldr	r0, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001772:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001774:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001776:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001778:	69d8      	ldr	r0, [r3, #28]
 800177a:	9005      	str	r0, [sp, #20]
  (void) temp;
 800177c:	9d05      	ldr	r5, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800177e:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001782:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001784:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001786:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001788:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	9304      	str	r3, [sp, #16]
  (void) temp;
 800178e:	9b04      	ldr	r3, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001790:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001792:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001794:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001796:	69d3      	ldr	r3, [r2, #28]
 8001798:	9303      	str	r3, [sp, #12]
  (void) temp;
 800179a:	9b03      	ldr	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800179c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800179e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017a0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017a2:	69d3      	ldr	r3, [r2, #28]
 80017a4:	9302      	str	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017a6:	2104      	movs	r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <mc_lock_pins+0x11c>)
  (void) temp;
 80017aa:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017ac:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017ae:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017b0:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017b2:	69d3      	ldr	r3, [r2, #28]
 80017b4:	9301      	str	r3, [sp, #4]
  (void) temp;
 80017b6:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 80017b8:	b010      	add	sp, #64	; 0x40
 80017ba:	bcf0      	pop	{r4, r5, r6, r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	48000400 	.word	0x48000400
 80017c4:	00010008 	.word	0x00010008
 80017c8:	00010100 	.word	0x00010100
 80017cc:	48000800 	.word	0x48000800
 80017d0:	00010002 	.word	0x00010002
 80017d4:	00010004 	.word	0x00010004

080017d8 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80017d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017dc:	b08e      	sub	sp, #56	; 0x38
 80017de:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 80017e0:	2700      	movs	r7, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 80017e2:	094a      	lsrs	r2, r1, #5
{
 80017e4:	460c      	mov	r4, r1
 80017e6:	4605      	mov	r5, r0
 80017e8:	4698      	mov	r8, r3
  bool bNoError = false; // Default is error
 80017ea:	f88d 7011 	strb.w	r7, [sp, #17]
  if (bMotorSelection != 0)
 80017ee:	d123      	bne.n	8001838 <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80017f0:	2912      	cmp	r1, #18
 80017f2:	d814      	bhi.n	800181e <MCP_ReceivedFrame+0x46>
 80017f4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80017f8:	02100016 	.word	0x02100016
 80017fc:	020400e9 	.word	0x020400e9
 8001800:	00130013 	.word	0x00130013
 8001804:	00810057 	.word	0x00810057
 8001808:	00c70096 	.word	0x00c70096
 800180c:	02b302a2 	.word	0x02b302a2
 8001810:	02ca02da 	.word	0x02ca02da
 8001814:	00130013 	.word	0x00130013
 8001818:	00130013 	.word	0x00130013
 800181c:	0016      	.short	0x0016
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 800181e:	2301      	movs	r3, #1
 8001820:	f88d 3016 	strb.w	r3, [sp, #22]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001824:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001828:	2301      	movs	r3, #1
 800182a:	f10d 0216 	add.w	r2, sp, #22
 800182e:	21ff      	movs	r1, #255	; 0xff
 8001830:	47a0      	blx	r4
    }
  }
}
 8001832:	b00e      	add	sp, #56	; 0x38
 8001834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001838:	3a01      	subs	r2, #1
 800183a:	4639      	mov	r1, r7
 800183c:	9203      	str	r2, [sp, #12]
 800183e:	f001 f89f 	bl	8002980 <UI_SetReg>
 8001842:	b300      	cbz	r0, 8001886 <MCP_ReceivedFrame+0xae>
      if (pHandle->pDAC)
 8001844:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 8001848:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 800184c:	b118      	cbz	r0, 8001856 <MCP_ReceivedFrame+0x7e>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 800184e:	9a03      	ldr	r2, [sp, #12]
 8001850:	4639      	mov	r1, r7
 8001852:	f001 f895 	bl	8002980 <UI_SetReg>
  switch (Code)
 8001856:	2c12      	cmp	r4, #18
 8001858:	f200 82c9 	bhi.w	8001dee <MCP_ReceivedFrame+0x616>
 800185c:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001860:	01dc0090 	.word	0x01dc0090
 8001864:	01d000b5 	.word	0x01d000b5
 8001868:	02c702c7 	.word	0x02c702c7
 800186c:	004d0023 	.word	0x004d0023
 8001870:	00930062 	.word	0x00930062
 8001874:	027f026e 	.word	0x027f026e
 8001878:	029602a6 	.word	0x029602a6
 800187c:	02c702c7 	.word	0x02c702c7
 8001880:	02c702c7 	.word	0x02c702c7
 8001884:	0090      	.short	0x0090
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001886:	230b      	movs	r3, #11
    if (bNoError)
 8001888:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 800188c:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 8001890:	2800      	cmp	r0, #0
 8001892:	d0c7      	beq.n	8001824 <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001894:	2300      	movs	r3, #0
 8001896:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 800189a:	461a      	mov	r2, r3
 800189c:	21f0      	movs	r1, #240	; 0xf0
 800189e:	47a0      	blx	r4
}
 80018a0:	b00e      	add	sp, #56	; 0x38
 80018a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        outBuff[i] = 0;
 80018a6:	ac06      	add	r4, sp, #24
 80018a8:	2100      	movs	r1, #0
 80018aa:	2220      	movs	r2, #32
 80018ac:	4620      	mov	r0, r4
 80018ae:	f006 faa9 	bl	8007e04 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80018b2:	f8d5 70c0 	ldr.w	r7, [r5, #192]	; 0xc0
 80018b6:	f10d 001a 	add.w	r0, sp, #26
 80018ba:	1e79      	subs	r1, r7, #1
 80018bc:	2300      	movs	r3, #0
 80018be:	e004      	b.n	80018ca <MCP_ReceivedFrame+0xf2>
 80018c0:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 80018c2:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80018c6:	f000 833e 	beq.w	8001f46 <MCP_ReceivedFrame+0x76e>
 80018ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80018ce:	2a09      	cmp	r2, #9
 80018d0:	b2de      	uxtb	r6, r3
 80018d2:	f103 0301 	add.w	r3, r3, #1
 80018d6:	d1f3      	bne.n	80018c0 <MCP_ReceivedFrame+0xe8>
      outBuff[0] = pHandle->s_fwVer[i+5];
 80018d8:	1d72      	adds	r2, r6, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 80018da:	1df3      	adds	r3, r6, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 80018dc:	3609      	adds	r6, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 80018de:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 80018e0:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 80018e2:	b2f6      	uxtb	r6, r6
      outBuff[0] = pHandle->s_fwVer[i+5];
 80018e4:	5cba      	ldrb	r2, [r7, r2]
 80018e6:	f88d 2018 	strb.w	r2, [sp, #24]
      outBuff[1] = pHandle->s_fwVer[i+7];
 80018ea:	5cfb      	ldrb	r3, [r7, r3]
 80018ec:	f88d 3019 	strb.w	r3, [sp, #25]
      outBuff[2] = pHandle->s_fwVer[i+9];
 80018f0:	5dbb      	ldrb	r3, [r7, r6]
 80018f2:	f88d 301a 	strb.w	r3, [sp, #26]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80018f6:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80018f8:	e270      	b.n	8001ddc <MCP_ReceivedFrame+0x604>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80018fa:	7871      	ldrb	r1, [r6, #1]
 80018fc:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80018fe:	7970      	ldrb	r0, [r6, #5]
 8001900:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001902:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001906:	78b1      	ldrb	r1, [r6, #2]
 8001908:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800190c:	78f1      	ldrb	r1, [r6, #3]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800190e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001912:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001916:	b292      	uxth	r2, r2
 8001918:	4628      	mov	r0, r5
 800191a:	f001 f93f 	bl	8002b9c <UI_ExecSpeedRamp>
 800191e:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001922:	e7b5      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001924:	f10d 0016 	add.w	r0, sp, #22
 8001928:	7831      	ldrb	r1, [r6, #0]
 800192a:	9000      	str	r0, [sp, #0]
 800192c:	ab05      	add	r3, sp, #20
 800192e:	f10d 0212 	add.w	r2, sp, #18
 8001932:	4628      	mov	r0, r5
 8001934:	f001 f94e 	bl	8002bd4 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001938:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
      outBuff[4] = (uint8_t)(FinalTorque);
 800193c:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
      outBuff[6] = (uint8_t)(Durationms);
 8001940:	f8bd 2012 	ldrh.w	r2, [sp, #18]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001944:	f88d 101c 	strb.w	r1, [sp, #28]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001948:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800194c:	005b      	lsls	r3, r3, #1
      outBuff[1] = (uint8_t)(rpm >> 8);
 800194e:	1218      	asrs	r0, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001950:	f88d 3018 	strb.w	r3, [sp, #24]
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001954:	f88d 0019 	strb.w	r0, [sp, #25]
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001958:	1418      	asrs	r0, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 800195a:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 800195c:	f88d 001a 	strb.w	r0, [sp, #26]
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001960:	f88d 301b 	strb.w	r3, [sp, #27]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001964:	1208      	asrs	r0, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001966:	0a13      	lsrs	r3, r2, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001968:	f88d 001d 	strb.w	r0, [sp, #29]
      outBuff[6] = (uint8_t)(Durationms);
 800196c:	f88d 201e 	strb.w	r2, [sp, #30]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001970:	f88d 301f 	strb.w	r3, [sp, #31]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001974:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001976:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001978:	2308      	movs	r3, #8
 800197a:	aa06      	add	r2, sp, #24
 800197c:	21f0      	movs	r1, #240	; 0xf0
 800197e:	47a0      	blx	r4
    if (bNoError)
 8001980:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8001984:	e784      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001986:	78b1      	ldrb	r1, [r6, #2]
 8001988:	7873      	ldrb	r3, [r6, #1]
 800198a:	78f2      	ldrb	r2, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800198c:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800198e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001992:	7931      	ldrb	r1, [r6, #4]
 8001994:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001998:	4a9e      	ldr	r2, [pc, #632]	; (8001c14 <MCP_ReceivedFrame+0x43c>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 800199a:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 800199e:	fb82 1203 	smull	r1, r2, r2, r3
 80019a2:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 80019a6:	7a31      	ldrb	r1, [r6, #8]
 80019a8:	79f2      	ldrb	r2, [r6, #7]
 80019aa:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019ae:	79b1      	ldrb	r1, [r6, #6]
 80019b0:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80019b4:	b200      	sxth	r0, r0
 80019b6:	7831      	ldrb	r1, [r6, #0]
 80019b8:	9000      	str	r0, [sp, #0]
 80019ba:	b21b      	sxth	r3, r3
 80019bc:	b292      	uxth	r2, r2
 80019be:	4628      	mov	r0, r5
 80019c0:	f001 f926 	bl	8002c10 <UI_SetRevupData>
 80019c4:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 80019c8:	e762      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80019ca:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80019cc:	2303      	movs	r3, #3
 80019ce:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 80019d2:	2988      	cmp	r1, #136	; 0x88
 80019d4:	d8d4      	bhi.n	8001980 <MCP_ReceivedFrame+0x1a8>
 80019d6:	a301      	add	r3, pc, #4	; (adr r3, 80019dc <MCP_ReceivedFrame+0x204>)
 80019d8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80019dc:	08001e83 	.word	0x08001e83
 80019e0:	08001e3f 	.word	0x08001e3f
 80019e4:	08001e83 	.word	0x08001e83
 80019e8:	08001e83 	.word	0x08001e83
 80019ec:	08001e3f 	.word	0x08001e3f
 80019f0:	08001dfb 	.word	0x08001dfb
 80019f4:	08001dfb 	.word	0x08001dfb
 80019f8:	08001dfb 	.word	0x08001dfb
 80019fc:	08001dfb 	.word	0x08001dfb
 8001a00:	08001dfb 	.word	0x08001dfb
 8001a04:	08001dfb 	.word	0x08001dfb
 8001a08:	08001dfb 	.word	0x08001dfb
 8001a0c:	08001dfb 	.word	0x08001dfb
 8001a10:	08001dfb 	.word	0x08001dfb
 8001a14:	08001dfb 	.word	0x08001dfb
 8001a18:	08001dfb 	.word	0x08001dfb
 8001a1c:	08001dfb 	.word	0x08001dfb
 8001a20:	08001dfb 	.word	0x08001dfb
 8001a24:	08001dfb 	.word	0x08001dfb
 8001a28:	08001dfb 	.word	0x08001dfb
 8001a2c:	08001dfb 	.word	0x08001dfb
 8001a30:	08001dfb 	.word	0x08001dfb
 8001a34:	08001dfb 	.word	0x08001dfb
 8001a38:	08001dfb 	.word	0x08001dfb
 8001a3c:	08001dfb 	.word	0x08001dfb
 8001a40:	08001dfb 	.word	0x08001dfb
 8001a44:	08001dfb 	.word	0x08001dfb
 8001a48:	08001dfb 	.word	0x08001dfb
 8001a4c:	08001f23 	.word	0x08001f23
 8001a50:	08001efb 	.word	0x08001efb
 8001a54:	08001e3f 	.word	0x08001e3f
 8001a58:	08001dfb 	.word	0x08001dfb
 8001a5c:	08001dfb 	.word	0x08001dfb
 8001a60:	08001dfb 	.word	0x08001dfb
 8001a64:	08001e83 	.word	0x08001e83
 8001a68:	08001981 	.word	0x08001981
 8001a6c:	08001981 	.word	0x08001981
 8001a70:	08001981 	.word	0x08001981
 8001a74:	08001981 	.word	0x08001981
 8001a78:	08001981 	.word	0x08001981
 8001a7c:	08001981 	.word	0x08001981
 8001a80:	08001981 	.word	0x08001981
 8001a84:	08001981 	.word	0x08001981
 8001a88:	08001981 	.word	0x08001981
 8001a8c:	08001981 	.word	0x08001981
 8001a90:	08001981 	.word	0x08001981
 8001a94:	08001981 	.word	0x08001981
 8001a98:	08001981 	.word	0x08001981
 8001a9c:	08001981 	.word	0x08001981
 8001aa0:	08001981 	.word	0x08001981
 8001aa4:	08001981 	.word	0x08001981
 8001aa8:	08001981 	.word	0x08001981
 8001aac:	08001981 	.word	0x08001981
 8001ab0:	08001981 	.word	0x08001981
 8001ab4:	08001981 	.word	0x08001981
 8001ab8:	08001981 	.word	0x08001981
 8001abc:	08001981 	.word	0x08001981
 8001ac0:	08001981 	.word	0x08001981
 8001ac4:	08001981 	.word	0x08001981
 8001ac8:	08001981 	.word	0x08001981
 8001acc:	08001981 	.word	0x08001981
 8001ad0:	08001981 	.word	0x08001981
 8001ad4:	08001981 	.word	0x08001981
 8001ad8:	08001981 	.word	0x08001981
 8001adc:	08001981 	.word	0x08001981
 8001ae0:	08001dfb 	.word	0x08001dfb
 8001ae4:	08001981 	.word	0x08001981
 8001ae8:	08001981 	.word	0x08001981
 8001aec:	08001981 	.word	0x08001981
 8001af0:	08001981 	.word	0x08001981
 8001af4:	08001e3f 	.word	0x08001e3f
 8001af8:	08001e3f 	.word	0x08001e3f
 8001afc:	08001e3f 	.word	0x08001e3f
 8001b00:	08001dfb 	.word	0x08001dfb
 8001b04:	08001dfb 	.word	0x08001dfb
 8001b08:	08001dfb 	.word	0x08001dfb
 8001b0c:	08001dfb 	.word	0x08001dfb
 8001b10:	08001e83 	.word	0x08001e83
 8001b14:	08001e3f 	.word	0x08001e3f
 8001b18:	08001dfb 	.word	0x08001dfb
 8001b1c:	08001dfb 	.word	0x08001dfb
 8001b20:	08001dfb 	.word	0x08001dfb
 8001b24:	08001dfb 	.word	0x08001dfb
 8001b28:	08001dfb 	.word	0x08001dfb
 8001b2c:	08001dfb 	.word	0x08001dfb
 8001b30:	08001dfb 	.word	0x08001dfb
 8001b34:	08001dfb 	.word	0x08001dfb
 8001b38:	08001dfb 	.word	0x08001dfb
 8001b3c:	08001dfb 	.word	0x08001dfb
 8001b40:	08001dfb 	.word	0x08001dfb
 8001b44:	08001e83 	.word	0x08001e83
 8001b48:	08001e3f 	.word	0x08001e3f
 8001b4c:	08001981 	.word	0x08001981
 8001b50:	08001dfb 	.word	0x08001dfb
 8001b54:	08001dfb 	.word	0x08001dfb
 8001b58:	08001dfb 	.word	0x08001dfb
 8001b5c:	08001dfb 	.word	0x08001dfb
 8001b60:	08001dfb 	.word	0x08001dfb
 8001b64:	08001981 	.word	0x08001981
 8001b68:	08001981 	.word	0x08001981
 8001b6c:	08001dfb 	.word	0x08001dfb
 8001b70:	08001dfb 	.word	0x08001dfb
 8001b74:	08001e83 	.word	0x08001e83
 8001b78:	08001e83 	.word	0x08001e83
 8001b7c:	08001e3f 	.word	0x08001e3f
 8001b80:	08001e3f 	.word	0x08001e3f
 8001b84:	08001e3f 	.word	0x08001e3f
 8001b88:	08001e3f 	.word	0x08001e3f
 8001b8c:	08001e3f 	.word	0x08001e3f
 8001b90:	08001e83 	.word	0x08001e83
 8001b94:	08001dfb 	.word	0x08001dfb
 8001b98:	08001dfb 	.word	0x08001dfb
 8001b9c:	08001e3f 	.word	0x08001e3f
 8001ba0:	08001981 	.word	0x08001981
 8001ba4:	08001dfb 	.word	0x08001dfb
 8001ba8:	08001dfb 	.word	0x08001dfb
 8001bac:	08001e83 	.word	0x08001e83
 8001bb0:	08001e3f 	.word	0x08001e3f
 8001bb4:	08001e3f 	.word	0x08001e3f
 8001bb8:	08001e3f 	.word	0x08001e3f
 8001bbc:	08001e3f 	.word	0x08001e3f
 8001bc0:	08001e3f 	.word	0x08001e3f
 8001bc4:	08001e3f 	.word	0x08001e3f
 8001bc8:	08001e3f 	.word	0x08001e3f
 8001bcc:	08001e3f 	.word	0x08001e3f
 8001bd0:	08001e3f 	.word	0x08001e3f
 8001bd4:	08001e3f 	.word	0x08001e3f
 8001bd8:	08001e3f 	.word	0x08001e3f
 8001bdc:	08001e83 	.word	0x08001e83
 8001be0:	08001981 	.word	0x08001981
 8001be4:	08001e83 	.word	0x08001e83
 8001be8:	08001e3f 	.word	0x08001e3f
 8001bec:	08001e3f 	.word	0x08001e3f
 8001bf0:	08001e3f 	.word	0x08001e3f
 8001bf4:	08001dfb 	.word	0x08001dfb
 8001bf8:	08001dfb 	.word	0x08001dfb
 8001bfc:	08001dfb 	.word	0x08001dfb
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001c00:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001c02:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001c04:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001c08:	4628      	mov	r0, r5
 8001c0a:	f000 ff7b 	bl	8002b04 <UI_ExecCmd>
 8001c0e:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001c12:	e63d      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
 8001c14:	2aaaaaab 	.word	0x2aaaaaab
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001c18:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8001c20:	2988      	cmp	r1, #136	; 0x88
 8001c22:	f200 80fc 	bhi.w	8001e1e <MCP_ReceivedFrame+0x646>
 8001c26:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001c2a:	0159      	.short	0x0159
 8001c2c:	00fa00fa 	.word	0x00fa00fa
 8001c30:	00fa013e 	.word	0x00fa013e
 8001c34:	01000100 	.word	0x01000100
 8001c38:	01000100 	.word	0x01000100
 8001c3c:	01000100 	.word	0x01000100
 8001c40:	01000100 	.word	0x01000100
 8001c44:	01000100 	.word	0x01000100
 8001c48:	011c0100 	.word	0x011c0100
 8001c4c:	00fa011c 	.word	0x00fa011c
 8001c50:	010000fa 	.word	0x010000fa
 8001c54:	01000100 	.word	0x01000100
 8001c58:	01000100 	.word	0x01000100
 8001c5c:	00fa00fa 	.word	0x00fa00fa
 8001c60:	014f00fa 	.word	0x014f00fa
 8001c64:	00fa0145 	.word	0x00fa0145
 8001c68:	00fa00fa 	.word	0x00fa00fa
 8001c6c:	00fa00fa 	.word	0x00fa00fa
 8001c70:	00fa00fa 	.word	0x00fa00fa
 8001c74:	00fa00fa 	.word	0x00fa00fa
 8001c78:	00fa00fa 	.word	0x00fa00fa
 8001c7c:	00fa00fa 	.word	0x00fa00fa
 8001c80:	00fa00fa 	.word	0x00fa00fa
 8001c84:	00fa00fa 	.word	0x00fa00fa
 8001c88:	00fa00fa 	.word	0x00fa00fa
 8001c8c:	00fa00fa 	.word	0x00fa00fa
 8001c90:	00fa00fa 	.word	0x00fa00fa
 8001c94:	00fa00fa 	.word	0x00fa00fa
 8001c98:	00fa00fa 	.word	0x00fa00fa
 8001c9c:	00fa00fa 	.word	0x00fa00fa
 8001ca0:	00fa00fa 	.word	0x00fa00fa
 8001ca4:	00fa00fa 	.word	0x00fa00fa
 8001ca8:	00fa00fa 	.word	0x00fa00fa
 8001cac:	00fa0100 	.word	0x00fa0100
 8001cb0:	00fa00fa 	.word	0x00fa00fa
 8001cb4:	011c00fa 	.word	0x011c00fa
 8001cb8:	011c011c 	.word	0x011c011c
 8001cbc:	00fa00fa 	.word	0x00fa00fa
 8001cc0:	00fa00fa 	.word	0x00fa00fa
 8001cc4:	00fa00fa 	.word	0x00fa00fa
 8001cc8:	00fa0100 	.word	0x00fa0100
 8001ccc:	00fa00fa 	.word	0x00fa00fa
 8001cd0:	01000100 	.word	0x01000100
 8001cd4:	01000100 	.word	0x01000100
 8001cd8:	01000100 	.word	0x01000100
 8001cdc:	00fa0100 	.word	0x00fa0100
 8001ce0:	00fa011c 	.word	0x00fa011c
 8001ce4:	00fa00fa 	.word	0x00fa00fa
 8001ce8:	00fa00fa 	.word	0x00fa00fa
 8001cec:	00fa0100 	.word	0x00fa0100
 8001cf0:	010000fa 	.word	0x010000fa
 8001cf4:	00fa0100 	.word	0x00fa0100
 8001cf8:	00fa00fa 	.word	0x00fa00fa
 8001cfc:	00fa00fa 	.word	0x00fa00fa
 8001d00:	00fa00fa 	.word	0x00fa00fa
 8001d04:	00fa00fa 	.word	0x00fa00fa
 8001d08:	00fa00fa 	.word	0x00fa00fa
 8001d0c:	00fa00fa 	.word	0x00fa00fa
 8001d10:	013e00fa 	.word	0x013e00fa
 8001d14:	011c011c 	.word	0x011c011c
 8001d18:	011c011c 	.word	0x011c011c
 8001d1c:	00fa011c 	.word	0x00fa011c
 8001d20:	00fa00fa 	.word	0x00fa00fa
 8001d24:	011c011c 	.word	0x011c011c
 8001d28:	00fa00fa 	.word	0x00fa00fa
 8001d2c:	00fa00fa 	.word	0x00fa00fa
 8001d30:	00fa00fa 	.word	0x00fa00fa
 8001d34:	010000fa 	.word	0x010000fa
 8001d38:	01000100 	.word	0x01000100
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d3c:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d3e:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d40:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d42:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d44:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d48:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001d4c:	b212      	sxth	r2, r2
 8001d4e:	b209      	sxth	r1, r1
 8001d50:	4628      	mov	r0, r5
 8001d52:	f000 ff79 	bl	8002c48 <UI_SetCurrentReferences>
      bNoError = true;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001d5c:	e59a      	b.n	8001894 <MCP_ReceivedFrame+0xbc>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d5e:	4c7c      	ldr	r4, [pc, #496]	; (8001f50 <MCP_ReceivedFrame+0x778>)
      stepList.data = buffer;
 8001d60:	9606      	str	r6, [sp, #24]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001d62:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d64:	4621      	mov	r1, r4
 8001d66:	a806      	add	r0, sp, #24
      stepList.len = Size;
 8001d68:	f88d 801c 	strb.w	r8, [sp, #28]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001d6c:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001d70:	f000 ff78 	bl	8002c64 <UI_GetMPInfo>
 8001d74:	f88d 0011 	strb.w	r0, [sp, #17]
      if (bNoError)
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	f43f ad53 	beq.w	8001824 <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001d7e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001d80:	7923      	ldrb	r3, [r4, #4]
 8001d82:	6822      	ldr	r2, [r4, #0]
 8001d84:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001d86:	21f0      	movs	r1, #240	; 0xf0
 8001d88:	47b0      	blx	r6
  if (RequireAck)
 8001d8a:	e552      	b.n	8001832 <MCP_ReceivedFrame+0x5a>
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001d8c:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001d8e:	7973      	ldrb	r3, [r6, #5]
 8001d90:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001d92:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001d94:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001d98:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001d9c:	b292      	uxth	r2, r2
 8001d9e:	b209      	sxth	r1, r1
 8001da0:	4628      	mov	r0, r5
 8001da2:	f000 ff0d 	bl	8002bc0 <UI_ExecTorqueRamp>
 8001da6:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001daa:	e571      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
 8001dac:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8001db0:	ac06      	add	r4, sp, #24
 8001db2:	3b01      	subs	r3, #1
 8001db4:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001db6:	2000      	movs	r0, #0
 8001db8:	e004      	b.n	8001dc4 <MCP_ReceivedFrame+0x5ec>
 8001dba:	3001      	adds	r0, #1
 8001dbc:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001dbe:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001dc2:	d00a      	beq.n	8001dda <MCP_ReceivedFrame+0x602>
 8001dc4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001dc8:	b2c6      	uxtb	r6, r0
 8001dca:	2900      	cmp	r1, #0
 8001dcc:	d1f5      	bne.n	8001dba <MCP_ReceivedFrame+0x5e2>
        outBuff[i] = 0;
 8001dce:	f1c6 0220 	rsb	r2, r6, #32
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	4420      	add	r0, r4
 8001dd6:	f006 f815 	bl	8007e04 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001dda:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001ddc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001dde:	2320      	movs	r3, #32
 8001de0:	4622      	mov	r2, r4
 8001de2:	21f0      	movs	r1, #240	; 0xf0
 8001de4:	47b0      	blx	r6
      bNoError = true;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001dec:	e552      	b.n	8001894 <MCP_ReceivedFrame+0xbc>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001dee:	2301      	movs	r3, #1
    if (bNoError)
 8001df0:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001df4:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8001df8:	e54a      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001dfa:	f10d 0211 	add.w	r2, sp, #17
 8001dfe:	4628      	mov	r0, r5
 8001e00:	f000 ff44 	bl	8002c8c <UI_GetReg>
          if ( bNoError == true )
 8001e04:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e08:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f43f ad0a 	beq.w	8001824 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001e10:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001e14:	2302      	movs	r3, #2
 8001e16:	aa06      	add	r2, sp, #24
 8001e18:	21f0      	movs	r1, #240	; 0xf0
 8001e1a:	47a0      	blx	r4
  if (RequireAck)
 8001e1c:	e509      	b.n	8001832 <MCP_ReceivedFrame+0x5a>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001e1e:	2302      	movs	r3, #2
    if (bNoError)
 8001e20:	f89d 0011 	ldrb.w	r0, [sp, #17]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001e24:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8001e28:	e532      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001e2a:	78b2      	ldrb	r2, [r6, #2]
 8001e2c:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001e2e:	4628      	mov	r0, r5
 8001e30:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001e34:	f000 fda4 	bl	8002980 <UI_SetReg>
 8001e38:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001e3c:	e528      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001e3e:	f10d 0211 	add.w	r2, sp, #17
 8001e42:	4628      	mov	r0, r5
 8001e44:	f000 ff22 	bl	8002c8c <UI_GetReg>
          if ( bNoError == true )
 8001e48:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001e4c:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f43f ace8 	beq.w	8001824 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001e54:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001e58:	2304      	movs	r3, #4
 8001e5a:	aa06      	add	r2, sp, #24
 8001e5c:	21f0      	movs	r1, #240	; 0xf0
 8001e5e:	47a0      	blx	r4
  if (RequireAck)
 8001e60:	e4e7      	b.n	8001832 <MCP_ReceivedFrame+0x5a>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001e62:	78b2      	ldrb	r2, [r6, #2]
 8001e64:	7873      	ldrb	r3, [r6, #1]
 8001e66:	78f0      	ldrb	r0, [r6, #3]
 8001e68:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001e6c:	7932      	ldrb	r2, [r6, #4]
 8001e6e:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001e72:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001e76:	4628      	mov	r0, r5
 8001e78:	f000 fd82 	bl	8002980 <UI_SetReg>
 8001e7c:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001e80:	e506      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e82:	f10d 0211 	add.w	r2, sp, #17
 8001e86:	4628      	mov	r0, r5
 8001e88:	f000 ff00 	bl	8002c8c <UI_GetReg>
           if ( bNoError == true )
 8001e8c:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e90:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f43f acc6 	beq.w	8001824 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001e98:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	aa06      	add	r2, sp, #24
 8001ea0:	21f0      	movs	r1, #240	; 0xf0
 8001ea2:	47a0      	blx	r4
  if (RequireAck)
 8001ea4:	e4c5      	b.n	8001832 <MCP_ReceivedFrame+0x5a>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001ea6:	7872      	ldrb	r2, [r6, #1]
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f000 fd69 	bl	8002980 <UI_SetReg>
 8001eae:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001eb2:	e4ed      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8001eb4:	7872      	ldrb	r2, [r6, #1]
 8001eb6:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001eba:	2101      	movs	r1, #1
 8001ebc:	f000 fedc 	bl	8002c78 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001ec6:	e4e5      	b.n	8001894 <MCP_ReceivedFrame+0xbc>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 8001ec8:	7872      	ldrb	r2, [r6, #1]
 8001eca:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f000 fed2 	bl	8002c78 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001eda:	e4db      	b.n	8001894 <MCP_ReceivedFrame+0xbc>
          int32_t wValue = (int32_t)(buffer[1]);
 8001edc:	7872      	ldrb	r2, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8001ede:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001ee2:	9203      	str	r2, [sp, #12]
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	f000 fd4b 	bl	8002980 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001eea:	9a03      	ldr	r2, [sp, #12]
 8001eec:	2100      	movs	r1, #0
 8001eee:	4628      	mov	r0, r5
 8001ef0:	f000 fd46 	bl	8002980 <UI_SetReg>
 8001ef4:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001ef8:	e4ca      	b.n	8001890 <MCP_ReceivedFrame+0xb8>
          if (pHandle->pDAC)
 8001efa:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001efe:	2800      	cmp	r0, #0
 8001f00:	f43f ad3e 	beq.w	8001980 <MCP_ReceivedFrame+0x1a8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001f04:	2101      	movs	r1, #1
 8001f06:	f000 febb 	bl	8002c80 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001f0a:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8001f0c:	f88d 0018 	strb.w	r0, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001f10:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001f12:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001f14:	aa06      	add	r2, sp, #24
 8001f16:	21f0      	movs	r1, #240	; 0xf0
 8001f18:	47a0      	blx	r4
            bNoError = true;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001f20:	e4b8      	b.n	8001894 <MCP_ReceivedFrame+0xbc>
          if (pHandle->pDAC)
 8001f22:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8001f26:	2800      	cmp	r0, #0
 8001f28:	f43f ad2a 	beq.w	8001980 <MCP_ReceivedFrame+0x1a8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f000 fea7 	bl	8002c80 <UI_GetDAC>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f88d 3018 	strb.w	r3, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001f38:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	aa06      	add	r2, sp, #24
 8001f40:	21f0      	movs	r1, #240	; 0xf0
 8001f42:	47a0      	blx	r4
  if (RequireAck)
 8001f44:	e475      	b.n	8001832 <MCP_ReceivedFrame+0x5a>
 8001f46:	2626      	movs	r6, #38	; 0x26
 8001f48:	2324      	movs	r3, #36	; 0x24
 8001f4a:	2222      	movs	r2, #34	; 0x22
 8001f4c:	e4ca      	b.n	80018e4 <MCP_ReceivedFrame+0x10c>
 8001f4e:	bf00      	nop
 8001f50:	20000924 	.word	0x20000924

08001f54 <MCP_WaitNextFrame>:
{
 8001f54:	b510      	push	{r4, lr}
 8001f56:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001f58:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001f5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f5c:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 8001f64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f66:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 8001f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001f6c:	4718      	bx	r3
 8001f6e:	bf00      	nop

08001f70 <MCP_Init>:
{
 8001f70:	b570      	push	{r4, r5, r6, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	4604      	mov	r4, r0
 8001f76:	461d      	mov	r5, r3
 8001f78:	9b07      	ldr	r3, [sp, #28]
  pHandle->pDAC = pDAC;
 8001f7a:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
{
 8001f7e:	9b08      	ldr	r3, [sp, #32]
  pHandle->s_fwVer = s_fwVer;
 8001f80:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MCP_Init+0x3c>)
  pHandle->pFCP = pFCP;
 8001f86:	6321      	str	r1, [r4, #48]	; 0x30
{
 8001f88:	4608      	mov	r0, r1
 8001f8a:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <MCP_Init+0x40>)
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <MCP_Init+0x44>)
 8001f92:	4621      	mov	r1, r4
 8001f94:	f003 fd9c 	bl	8005ad0 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001f98:	9b06      	ldr	r3, [sp, #24]
 8001f9a:	63e3      	str	r3, [r4, #60]	; 0x3c
  pHandle->fFcpReceive = fFcpReceive;
 8001f9c:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
  MCP_WaitNextFrame(pHandle);
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f7ff ffd7 	bl	8001f54 <MCP_WaitNextFrame>
}
 8001fa6:	b002      	add	sp, #8
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	bf00      	nop
 8001fac:	08001fb9 	.word	0x08001fb9
 8001fb0:	08001fc1 	.word	0x08001fc1
 8001fb4:	080017d9 	.word	0x080017d9

08001fb8 <MCP_OnTimeOut>:
{
 8001fb8:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001fba:	f7ff ffcb 	bl	8001f54 <MCP_WaitNextFrame>
}
 8001fbe:	bd08      	pop	{r3, pc}

08001fc0 <MCP_SentFrame>:
{
 8001fc0:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001fc2:	f7ff ffc7 	bl	8001f54 <MCP_WaitNextFrame>
}
 8001fc6:	bd08      	pop	{r3, pc}

08001fc8 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001fc8:	b530      	push	{r4, r5, lr}
 8001fca:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001fcc:	f002 fb40 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001fd2:	4d0c      	ldr	r5, [pc, #48]	; (8002004 <MX_MotorControl_Init+0x3c>)
 8001fd4:	4c0c      	ldr	r4, [pc, #48]	; (8002008 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001fd6:	fba3 3000 	umull	r3, r0, r3, r0
 8001fda:	09c0      	lsrs	r0, r0, #7
 8001fdc:	f001 fde2 	bl	8003ba4 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001fe0:	4629      	mov	r1, r5
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff f878 	bl	80010d8 <MCboot>
  mc_lock_pins();
 8001fe8:	f7ff fb66 	bl	80016b8 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <MX_MotorControl_Init+0x44>)
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4807      	ldr	r0, [pc, #28]	; (8002010 <MX_MotorControl_Init+0x48>)
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	f000 fbf2 	bl	80027e0 <UI_TaskInit>
}
 8001ffc:	b003      	add	sp, #12
 8001ffe:	bd30      	pop	{r4, r5, pc}
 8002000:	10624dd3 	.word	0x10624dd3
 8002004:	20000930 	.word	0x20000930
 8002008:	2000092c 	.word	0x2000092c
 800200c:	08008a60 	.word	0x08008a60
 8002010:	200005d4 	.word	0x200005d4

08002014 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002014:	4976      	ldr	r1, [pc, #472]	; (80021f0 <RCM_RegisterRegConv+0x1dc>)
{
 8002016:	b570      	push	{r4, r5, r6, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002018:	680c      	ldr	r4, [r1, #0]
{
 800201a:	4602      	mov	r2, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800201c:	2c00      	cmp	r4, #0
 800201e:	d02f      	beq.n	8002080 <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002020:	f890 c004 	ldrb.w	ip, [r0, #4]
 8002024:	7923      	ldrb	r3, [r4, #4]
 8002026:	459c      	cmp	ip, r3
 8002028:	d01d      	beq.n	8002066 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800202a:	684d      	ldr	r5, [r1, #4]
 800202c:	2d00      	cmp	r5, #0
 800202e:	f000 80c2 	beq.w	80021b6 <RCM_RegisterRegConv+0x1a2>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002032:	792b      	ldrb	r3, [r5, #4]
 8002034:	4563      	cmp	r3, ip
  uint8_t handle=255;
 8002036:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800203a:	d02b      	beq.n	8002094 <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800203c:	688c      	ldr	r4, [r1, #8]
 800203e:	2c00      	cmp	r4, #0
 8002040:	f000 80a5 	beq.w	800218e <RCM_RegisterRegConv+0x17a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002044:	7923      	ldrb	r3, [r4, #4]
 8002046:	4563      	cmp	r3, ip
 8002048:	d02a      	beq.n	80020a0 <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800204a:	68cc      	ldr	r4, [r1, #12]
 800204c:	2c00      	cmp	r4, #0
 800204e:	f000 80a7 	beq.w	80021a0 <RCM_RegisterRegConv+0x18c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002052:	7923      	ldrb	r3, [r4, #4]
 8002054:	4563      	cmp	r3, ip
 8002056:	f000 80a8 	beq.w	80021aa <RCM_RegisterRegConv+0x196>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 800205a:	2803      	cmp	r0, #3
 800205c:	bf88      	it	hi
 800205e:	20ff      	movhi	r0, #255	; 0xff
 8002060:	f240 80b7 	bls.w	80021d2 <RCM_RegisterRegConv+0x1be>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002064:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002066:	6803      	ldr	r3, [r0, #0]
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	4283      	cmp	r3, r0
 800206c:	d01e      	beq.n	80020ac <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800206e:	684d      	ldr	r5, [r1, #4]
 8002070:	2d00      	cmp	r5, #0
 8002072:	d1de      	bne.n	8002032 <RCM_RegisterRegConv+0x1e>
 8002074:	688c      	ldr	r4, [r1, #8]
 8002076:	2c00      	cmp	r4, #0
 8002078:	f000 80b0 	beq.w	80021dc <RCM_RegisterRegConv+0x1c8>
      i++;
 800207c:	2001      	movs	r0, #1
 800207e:	e7e1      	b.n	8002044 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002080:	684d      	ldr	r5, [r1, #4]
 8002082:	2d00      	cmp	r5, #0
 8002084:	f000 80a3 	beq.w	80021ce <RCM_RegisterRegConv+0x1ba>
 8002088:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800208c:	792b      	ldrb	r3, [r5, #4]
 800208e:	4563      	cmp	r3, ip
  uint8_t i=0;
 8002090:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002092:	d1d3      	bne.n	800203c <RCM_RegisterRegConv+0x28>
 8002094:	682c      	ldr	r4, [r5, #0]
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	429c      	cmp	r4, r3
 800209a:	d1cf      	bne.n	800203c <RCM_RegisterRegConv+0x28>
      i++;
 800209c:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 800209e:	e006      	b.n	80020ae <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80020a0:	6824      	ldr	r4, [r4, #0]
 80020a2:	6813      	ldr	r3, [r2, #0]
 80020a4:	429c      	cmp	r4, r3
 80020a6:	d1d0      	bne.n	800204a <RCM_RegisterRegConv+0x36>
      i++;
 80020a8:	2002      	movs	r0, #2
 80020aa:	e000      	b.n	80020ae <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 80020ac:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 80020ae:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80020b2:	6899      	ldr	r1, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80020b4:	4c4f      	ldr	r4, [pc, #316]	; (80021f4 <RCM_RegisterRegConv+0x1e0>)
 80020b6:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80020b8:	07c9      	lsls	r1, r1, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80020ba:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80020be:	d41e      	bmi.n	80020fe <RCM_RegisterRegConv+0xea>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80020c0:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80020c2:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80020c4:	f021 0104 	bic.w	r1, r1, #4
 80020c8:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80020ca:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80020cc:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80020ce:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80020d0:	f021 0120 	bic.w	r1, r1, #32
 80020d4:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80020d6:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80020de:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80020e2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80020e6:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80020e8:	6899      	ldr	r1, [r3, #8]
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 80020ea:	2900      	cmp	r1, #0
 80020ec:	dbfc      	blt.n	80020e8 <RCM_RegisterRegConv+0xd4>
  MODIFY_REG(ADCx->CR,
 80020ee:	6899      	ldr	r1, [r3, #8]
 80020f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80020f4:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80020f8:	f041 0101 	orr.w	r1, r1, #1
 80020fc:	6099      	str	r1, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80020fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002100:	f021 010f 	bic.w	r1, r1, #15
 8002104:	6319      	str	r1, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002106:	7914      	ldrb	r4, [r2, #4]
 8002108:	2c09      	cmp	r4, #9
 800210a:	d830      	bhi.n	800216e <RCM_RegisterRegConv+0x15a>
 800210c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8002110:	06a1      	lsls	r1, r4, #26
 8002112:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 8002116:	2502      	movs	r5, #2
 8002118:	fa05 f404 	lsl.w	r4, r5, r4
 800211c:	4321      	orrs	r1, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800211e:	f001 7e00 	and.w	lr, r1, #33554432	; 0x2000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002126:	fa94 f4a4 	rbit	r4, r4
 800212a:	fab4 f484 	clz	r4, r4
 800212e:	fa2e fe04 	lsr.w	lr, lr, r4
 8002132:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8002134:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8002138:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
 800213c:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8002140:	fa9c f5ac 	rbit	r5, ip
 8002144:	fab5 f585 	clz	r5, r5
 8002148:	fa9c fcac 	rbit	ip, ip
 800214c:	6896      	ldr	r6, [r2, #8]
 800214e:	fabc fc8c 	clz	ip, ip
 8002152:	fa21 f205 	lsr.w	r2, r1, r5
 8002156:	fa21 f10c 	lsr.w	r1, r1, ip
 800215a:	fa06 f501 	lsl.w	r5, r6, r1
 800215e:	2107      	movs	r1, #7
 8002160:	4091      	lsls	r1, r2
 8002162:	ea24 0101 	bic.w	r1, r4, r1
 8002166:	4329      	orrs	r1, r5
 8002168:	f843 102e 	str.w	r1, [r3, lr, lsl #2]
}
 800216c:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800216e:	2103      	movs	r1, #3
 8002170:	f06f 051d 	mvn.w	r5, #29
 8002174:	fb11 5504 	smlabb	r5, r1, r4, r5
 8002178:	2102      	movs	r1, #2
 800217a:	40a1      	lsls	r1, r4
 800217c:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 8002180:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8002184:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002188:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 800218c:	e7c9      	b.n	8002122 <RCM_RegisterRegConv+0x10e>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800218e:	2804      	cmp	r0, #4
 8002190:	d917      	bls.n	80021c2 <RCM_RegisterRegConv+0x1ae>
 8002192:	68cc      	ldr	r4, [r1, #12]
 8002194:	b114      	cbz	r4, 800219c <RCM_RegisterRegConv+0x188>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002196:	7923      	ldrb	r3, [r4, #4]
 8002198:	4563      	cmp	r3, ip
 800219a:	d01c      	beq.n	80021d6 <RCM_RegisterRegConv+0x1c2>
 800219c:	6813      	ldr	r3, [r2, #0]
 800219e:	e783      	b.n	80020a8 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021a0:	2804      	cmp	r0, #4
 80021a2:	6813      	ldr	r3, [r2, #0]
 80021a4:	d983      	bls.n	80020ae <RCM_RegisterRegConv+0x9a>
      i++;
 80021a6:	2003      	movs	r0, #3
 80021a8:	e781      	b.n	80020ae <RCM_RegisterRegConv+0x9a>
 80021aa:	6813      	ldr	r3, [r2, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021ac:	6824      	ldr	r4, [r4, #0]
 80021ae:	429c      	cmp	r4, r3
 80021b0:	f47f af53 	bne.w	800205a <RCM_RegisterRegConv+0x46>
 80021b4:	e7f7      	b.n	80021a6 <RCM_RegisterRegConv+0x192>
      i++;
 80021b6:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021b8:	688c      	ldr	r4, [r1, #8]
 80021ba:	b11c      	cbz	r4, 80021c4 <RCM_RegisterRegConv+0x1b0>
 80021bc:	f892 c004 	ldrb.w	ip, [r2, #4]
 80021c0:	e740      	b.n	8002044 <RCM_RegisterRegConv+0x30>
 80021c2:	4620      	mov	r0, r4
 80021c4:	68cc      	ldr	r4, [r1, #12]
 80021c6:	b124      	cbz	r4, 80021d2 <RCM_RegisterRegConv+0x1be>
 80021c8:	f892 c004 	ldrb.w	ip, [r2, #4]
 80021cc:	e741      	b.n	8002052 <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 80021ce:	4628      	mov	r0, r5
 80021d0:	e7f2      	b.n	80021b8 <RCM_RegisterRegConv+0x1a4>
 80021d2:	6813      	ldr	r3, [r2, #0]
 80021d4:	e76b      	b.n	80020ae <RCM_RegisterRegConv+0x9a>
 80021d6:	6813      	ldr	r3, [r2, #0]
      i++;
 80021d8:	2002      	movs	r0, #2
 80021da:	e7e7      	b.n	80021ac <RCM_RegisterRegConv+0x198>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021dc:	68cc      	ldr	r4, [r1, #12]
 80021de:	2c00      	cmp	r4, #0
 80021e0:	f43f af5c 	beq.w	800209c <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021e4:	7920      	ldrb	r0, [r4, #4]
 80021e6:	4560      	cmp	r0, ip
 80021e8:	f47f af58 	bne.w	800209c <RCM_RegisterRegConv+0x88>
      i++;
 80021ec:	2001      	movs	r0, #1
 80021ee:	e7dd      	b.n	80021ac <RCM_RegisterRegConv+0x198>
 80021f0:	20000958 	.word	0x20000958
 80021f4:	20000934 	.word	0x20000934

080021f8 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <RCM_ExecRegularConv+0x74>)
 80021fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80021fe:	7919      	ldrb	r1, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2909      	cmp	r1, #9
 8002204:	d823      	bhi.n	800224e <RCM_ExecRegularConv+0x56>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002206:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 800220a:	068b      	lsls	r3, r1, #26
 800220c:	2002      	movs	r0, #2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800220e:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002212:	fa00 f101 	lsl.w	r1, r0, r1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002216:	430b      	orrs	r3, r1
 8002218:	f44f 7140 	mov.w	r1, #768	; 0x300
 800221c:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 8002220:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002222:	0d1b      	lsrs	r3, r3, #20
 8002224:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002228:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 800222c:	430b      	orrs	r3, r1
 800222e:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002230:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002232:	6893      	ldr	r3, [r2, #8]
 8002234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8002242:	6813      	ldr	r3, [r2, #0]

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 8002244:	075b      	lsls	r3, r3, #29
 8002246:	d5fc      	bpl.n	8002242 <RCM_ExecRegularConv+0x4a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002248:	6c10      	ldr	r0, [r2, #64]	; 0x40
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 800224a:	b280      	uxth	r0, r0
 800224c:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800224e:	2003      	movs	r0, #3
 8002250:	f06f 0c1d 	mvn.w	ip, #29
 8002254:	2302      	movs	r3, #2
 8002256:	fb10 c001 	smlabb	r0, r0, r1, ip
 800225a:	408b      	lsls	r3, r1
 800225c:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8002260:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002268:	e7d6      	b.n	8002218 <RCM_ExecRegularConv+0x20>
 800226a:	bf00      	nop
 800226c:	20000958 	.word	0x20000958

08002270 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8002270:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8002272:	4c0f      	ldr	r4, [pc, #60]	; (80022b0 <RCM_ExecUserConv+0x40>)
 8002274:	7823      	ldrb	r3, [r4, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d000      	beq.n	800227c <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 800227a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800227c:	4d0d      	ldr	r5, [pc, #52]	; (80022b4 <RCM_ExecUserConv+0x44>)
 800227e:	7828      	ldrb	r0, [r5, #0]
 8002280:	f7ff ffba 	bl	80021f8 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002284:	f895 c000 	ldrb.w	ip, [r5]
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800228a:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800228c:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002290:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002292:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002294:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002296:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002298:	2d00      	cmp	r5, #0
 800229a:	d0ee      	beq.n	800227a <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800229c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80022a0:	4660      	mov	r0, ip
 80022a2:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80022a8:	462b      	mov	r3, r5
}
 80022aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 80022ae:	4718      	bx	r3
 80022b0:	20000955 	.word	0x20000955
 80022b4:	20000954 	.word	0x20000954
 80022b8:	20000934 	.word	0x20000934
 80022bc:	20000956 	.word	0x20000956

080022c0 <ADC1_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 80022c0:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80022c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  UI_DACUpdate(TSK_HighFrequencyTask());
 80022ca:	f7ff f905 	bl	80014d8 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 80022ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 80022d2:	f000 bb17 	b.w	8002904 <UI_DACUpdate>
 80022d6:	bf00      	nop

080022d8 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80022da:	4804      	ldr	r0, [pc, #16]	; (80022ec <TIM1_UP_TIM16_IRQHandler+0x14>)
 80022dc:	f06f 0201 	mvn.w	r2, #1
 80022e0:	611a      	str	r2, [r3, #16]
 80022e2:	f005 b825 	b.w	8007330 <R3_1_TIMx_UP_IRQHandler>
 80022e6:	bf00      	nop
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	20000354 	.word	0x20000354

080022f0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80022f0:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	0611      	lsls	r1, r2, #24
 80022f8:	d505      	bpl.n	8002306 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80022fa:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 80022fe:	480a      	ldr	r0, [pc, #40]	; (8002328 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	f005 f851 	bl	80073a8 <R3_1_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	05d2      	lsls	r2, r2, #23
 800230c:	d505      	bpl.n	800231a <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800230e:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002314:	611a      	str	r2, [r3, #16]
 8002316:	f005 f827 	bl	8007368 <R3_1_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800231a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800231e:	f7ff b8af 	b.w	8001480 <MC_Scheduler>
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	20000354 	.word	0x20000354

0800232c <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 800232c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx) != 0)
 800232e:	4c0c      	ldr	r4, [pc, #48]	; (8002360 <TIM2_IRQHandler+0x34>)
 8002330:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	07d1      	lsls	r1, r2, #31
 8002336:	d40b      	bmi.n	8002350 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002338:	691a      	ldr	r2, [r3, #16]
 800233a:	0792      	lsls	r2, r2, #30
 800233c:	d507      	bpl.n	800234e <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800233e:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8002346:	4806      	ldr	r0, [pc, #24]	; (8002360 <TIM2_IRQHandler+0x34>)
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	f003 bd93 	b.w	8005e74 <HALL_TIMx_CC_IRQHandler>
}
 800234e:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002350:	f06f 0201 	mvn.w	r2, #1
 8002354:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8002356:	4620      	mov	r0, r4
 8002358:	f003 ff96 	bl	8006288 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 800235c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800235e:	e7eb      	b.n	8002338 <TIM2_IRQHandler+0xc>
 8002360:	200000f4 	.word	0x200000f4

08002364 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002364:	b510      	push	{r4, lr}

 /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002366:	4c18      	ldr	r4, [pc, #96]	; (80023c8 <USART2_IRQHandler+0x64>)
 8002368:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 800236c:	69da      	ldr	r2, [r3, #28]
 800236e:	0691      	lsls	r1, r2, #26
 8002370:	d50b      	bpl.n	800238a <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002372:	8c99      	ldrh	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx));
 8002374:	4620      	mov	r0, r4
 8002376:	b2c9      	uxtb	r1, r1
 8002378:	f005 fc70 	bl	8007c5c <UFCP_RX_IRQ_Handler>
 800237c:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800237e:	2b01      	cmp	r3, #1
 8002380:	d01a      	beq.n	80023b8 <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8002382:	2b02      	cmp	r3, #2
 8002384:	d01d      	beq.n	80023c2 <USART2_IRQHandler+0x5e>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002386:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800238a:	69da      	ldr	r2, [r3, #28]
 800238c:	0612      	lsls	r2, r2, #24
 800238e:	d504      	bpl.n	800239a <USART2_IRQHandler+0x36>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <USART2_IRQHandler+0x64>)
 8002392:	f005 fbbf 	bl	8007b14 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002396:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	071b      	lsls	r3, r3, #28
 800239e:	d50a      	bpl.n	80023b6 <USART2_IRQHandler+0x52>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <USART2_IRQHandler+0x64>)
 80023a2:	f005 fcc5 	bl	8007d30 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80023a6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80023aa:	2208      	movs	r2, #8
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */

}
 80023ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023b0:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 80023b2:	f000 bab7 	b.w	8002924 <UI_SerialCommunicationTimeOutStop>
}
 80023b6:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 80023b8:	f000 faba 	bl	8002930 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80023bc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80023c0:	e7e3      	b.n	800238a <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 80023c2:	f000 faaf 	bl	8002924 <UI_SerialCommunicationTimeOutStop>
 80023c6:	e7de      	b.n	8002386 <USART2_IRQHandler+0x22>
 80023c8:	20000498 	.word	0x20000498

080023cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80023cc:	b538      	push	{r3, r4, r5, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80023ce:	f7ff f963 	bl	8001698 <TSK_HardwareFaultTask>
 80023d2:	4c18      	ldr	r4, [pc, #96]	; (8002434 <HardFault_Handler+0x68>)
 80023d4:	2508      	movs	r5, #8

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80023d6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80023da:	69da      	ldr	r2, [r3, #28]
 80023dc:	0711      	lsls	r1, r2, #28
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80023de:	4620      	mov	r0, r4
 80023e0:	d508      	bpl.n	80023f4 <HardFault_Handler+0x28>
 80023e2:	f005 fca5 	bl	8007d30 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80023e6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80023ea:	621d      	str	r5, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 80023ec:	f000 fa9a 	bl	8002924 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80023f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	0612      	lsls	r2, r2, #24
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 80023f8:	4620      	mov	r0, r4
 80023fa:	d513      	bpl.n	8002424 <HardFault_Handler+0x58>
 80023fc:	f005 fb8a 	bl	8007b14 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002400:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	0691      	lsls	r1, r2, #26
 8002408:	d5e7      	bpl.n	80023da <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800240a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800240c:	4620      	mov	r0, r4
 800240e:	b2c9      	uxtb	r1, r1
 8002410:	f005 fc24 	bl	8007c5c <UFCP_RX_IRQ_Handler>
 8002414:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002416:	2b01      	cmp	r3, #1
 8002418:	d008      	beq.n	800242c <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 800241a:	2b02      	cmp	r3, #2
 800241c:	d1db      	bne.n	80023d6 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 800241e:	f000 fa81 	bl	8002924 <UI_SerialCommunicationTimeOutStop>
 8002422:	e7d8      	b.n	80023d6 <HardFault_Handler+0xa>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	0692      	lsls	r2, r2, #26
 8002428:	d5d7      	bpl.n	80023da <HardFault_Handler+0xe>
 800242a:	e7ee      	b.n	800240a <HardFault_Handler+0x3e>
          UI_SerialCommunicationTimeOutStart();
 800242c:	f000 fa80 	bl	8002930 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002430:	e7d1      	b.n	80023d6 <HardFault_Handler+0xa>
 8002432:	bf00      	nop
 8002434:	20000498 	.word	0x20000498

08002438 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002438:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800243a:	4c0a      	ldr	r4, [pc, #40]	; (8002464 <SysTick_Handler+0x2c>)
 800243c:	7823      	ldrb	r3, [r4, #0]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d006      	beq.n	8002450 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002442:	3301      	adds	r3, #1
 8002444:	b2db      	uxtb	r3, r3
 8002446:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800244c:	f7ff b914 	b.w	8001678 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8002450:	f000 fe7e 	bl	8003150 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002454:	f001 fbc2 	bl	8003bdc <HAL_SYSTICK_IRQHandler>
 8002458:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 800245a:	7023      	strb	r3, [r4, #0]
}
 800245c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002460:	f7ff b90a 	b.w	8001678 <MC_RunMotorControlTasks>
 8002464:	200005d8 	.word	0x200005d8

08002468 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <EXTI15_10_IRQHandler+0x14>)
 800246a:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 800246c:	0492      	lsls	r2, r2, #18
 800246e:	d400      	bmi.n	8002472 <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 8002470:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8002472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002476:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002478:	f000 ba60 	b.w	800293c <UI_HandleStartStopButton_cb>
 800247c:	40010400 	.word	0x40010400

08002480 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_MspInit+0x30>)
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	f042 0201 	orr.w	r2, r2, #1
 8002488:	619a      	str	r2, [r3, #24]
 800248a:	699a      	ldr	r2, [r3, #24]
{
 800248c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	f002 0201 	and.w	r2, r2, #1
 8002492:	9200      	str	r2, [sp, #0]
 8002494:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800249c:	61da      	str	r2, [r3, #28]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80024a8:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80024ac:	f001 bb1c 	b.w	8003ae8 <HAL_NVIC_SetPriorityGrouping>
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024b4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80024b6:	6803      	ldr	r3, [r0, #0]
{
 80024b8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ba:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80024bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80024c4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80024c8:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 80024ca:	d001      	beq.n	80024d0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80024cc:	b00a      	add	sp, #40	; 0x28
 80024ce:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024d0:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80024d4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d8:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024da:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024dc:	4816      	ldr	r0, [pc, #88]	; (8002538 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024e2:	615a      	str	r2, [r3, #20]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80024ea:	9201      	str	r2, [sp, #4]
 80024ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80024f4:	615a      	str	r2, [r3, #20]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80024fc:	9202      	str	r2, [sp, #8]
 80024fe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002506:	615a      	str	r2, [r3, #20]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8002510:	2207      	movs	r2, #7
 8002512:	2303      	movs	r3, #3
 8002514:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251a:	f001 fb9d 	bl	8003c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 800251e:	2203      	movs	r2, #3
 8002520:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	a904      	add	r1, sp, #16
 8002524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8002528:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f001 fb93 	bl	8003c58 <HAL_GPIO_Init>
}
 8002532:	b00a      	add	sp, #40	; 0x28
 8002534:	bd10      	pop	{r4, pc}
 8002536:	bf00      	nop
 8002538:	48000800 	.word	0x48000800
 800253c:	00000000 	.word	0x00000000

08002540 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002540:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_DAC_MspInit+0x70>)
 8002544:	6801      	ldr	r1, [r0, #0]
{
 8002546:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 800254a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002550:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002554:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 8002556:	d002      	beq.n	800255e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002558:	b009      	add	sp, #36	; 0x24
 800255a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 800255e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002562:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8002566:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80025a8 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 800256a:	69da      	ldr	r2, [r3, #28]
 800256c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002570:	61da      	str	r2, [r3, #28]
 8002572:	69da      	ldr	r2, [r3, #28]
 8002574:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8002578:	9200      	str	r2, [sp, #0]
 800257a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002582:	615a      	str	r2, [r3, #20]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 800258c:	a902      	add	r1, sp, #8
 800258e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8002592:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8002598:	f001 fb5e 	bl	8003c58 <HAL_GPIO_Init>
}
 800259c:	b009      	add	sp, #36	; 0x24
 800259e:	f85d fb04 	ldr.w	pc, [sp], #4
 80025a2:	bf00      	nop
 80025a4:	f3af 8000 	nop.w
 80025a8:	00000010 	.word	0x00000010
 80025ac:	00000003 	.word	0x00000003
 80025b0:	40007400 	.word	0x40007400
 80025b4:	00000000 	.word	0x00000000

080025b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80025ba:	6802      	ldr	r2, [r0, #0]
 80025bc:	4938      	ldr	r1, [pc, #224]	; (80026a0 <HAL_TIM_Base_MspInit+0xe8>)
{
 80025be:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 80025c2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80025c8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80025cc:	930a      	str	r3, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 80025ce:	d004      	beq.n	80025da <HAL_TIM_Base_MspInit+0x22>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80025d0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80025d4:	d026      	beq.n	8002624 <HAL_TIM_Base_MspInit+0x6c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025d6:	b00c      	add	sp, #48	; 0x30
 80025d8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025de:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80025e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8002698 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025f4:	9201      	str	r2, [sp, #4]
 80025f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025fe:	615a      	str	r2, [r3, #20]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002608:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 800260a:	230c      	movs	r3, #12
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800260c:	a906      	add	r1, sp, #24
 800260e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002612:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	9c02      	ldr	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002618:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1;
 800261a:	930a      	str	r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800261c:	f001 fb1c 	bl	8003c58 <HAL_GPIO_Init>
}
 8002620:	b00c      	add	sp, #48	; 0x30
 8002622:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <HAL_TIM_Base_MspInit+0xec>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002626:	4820      	ldr	r0, [pc, #128]	; (80026a8 <HAL_TIM_Base_MspInit+0xf0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002628:	69da      	ldr	r2, [r3, #28]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	61da      	str	r2, [r3, #28]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	f002 0201 	and.w	r2, r2, #1
 8002636:	9203      	str	r2, [sp, #12]
 8002638:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800263a:	695a      	ldr	r2, [r3, #20]
 800263c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002648:	9204      	str	r2, [sp, #16]
 800264a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264c:	695a      	ldr	r2, [r3, #20]
 800264e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002652:	615a      	str	r2, [r3, #20]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 800265c:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8002660:	2302      	movs	r3, #2
 8002662:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002666:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800266a:	2303      	movs	r3, #3
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800266c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002670:	9a05      	ldr	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f001 faf1 	bl	8003c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002676:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800267a:	2302      	movs	r3, #2
 800267c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002680:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 8002682:	2200      	movs	r2, #0
 8002684:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 800268a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800268e:	940a      	str	r4, [sp, #40]	; 0x28
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 8002690:	f001 fae2 	bl	8003c58 <HAL_GPIO_Init>
}
 8002694:	b00c      	add	sp, #48	; 0x30
 8002696:	bd10      	pop	{r4, pc}
 8002698:	00000800 	.word	0x00000800
 800269c:	00000002 	.word	0x00000002
 80026a0:	40012c00 	.word	0x40012c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	48000400 	.word	0x48000400
 80026ac:	00000000 	.word	0x00000000

080026b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80026b2:	4a1b      	ldr	r2, [pc, #108]	; (8002720 <HAL_TIM_MspPostInit+0x70>)
 80026b4:	6801      	ldr	r1, [r0, #0]
{
 80026b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80026ba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80026c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80026c4:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80026c6:	d002      	beq.n	80026ce <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026c8:	b009      	add	sp, #36	; 0x24
 80026ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80026d6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8002710 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	695a      	ldr	r2, [r3, #20]
 80026dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026e0:	615a      	str	r2, [r3, #20]
 80026e2:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80026e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80026e8:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8002718 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80026f4:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80026fa:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fe:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002700:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	f001 faa9 	bl	8003c58 <HAL_GPIO_Init>
}
 8002706:	b009      	add	sp, #36	; 0x24
 8002708:	f85d fb04 	ldr.w	pc, [sp], #4
 800270c:	f3af 8000 	nop.w
 8002710:	00000700 	.word	0x00000700
 8002714:	00000002 	.word	0x00000002
 8002718:	00000002 	.word	0x00000002
 800271c:	00000003 	.word	0x00000003
 8002720:	40012c00 	.word	0x40012c00
 8002724:	00000000 	.word	0x00000000

08002728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002728:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800272a:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <HAL_UART_MspInit+0x70>)
 800272c:	6801      	ldr	r1, [r0, #0]
{
 800272e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 8002732:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002738:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800273c:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 800273e:	d002      	beq.n	8002746 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002740:	b009      	add	sp, #36	; 0x24
 8002742:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8002746:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800274a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800274e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002790 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002758:	61da      	str	r2, [r3, #28]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002760:	9200      	str	r2, [sp, #0]
 8002762:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800276a:	615a      	str	r2, [r3, #20]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002776:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800277c:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002782:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f001 fa68 	bl	8003c58 <HAL_GPIO_Init>
}
 8002788:	b009      	add	sp, #36	; 0x24
 800278a:	f85d fb04 	ldr.w	pc, [sp], #4
 800278e:	bf00      	nop
 8002790:	0000000c 	.word	0x0000000c
 8002794:	00000002 	.word	0x00000002
 8002798:	40004400 	.word	0x40004400

0800279c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800279c:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279e:	4c0c      	ldr	r4, [pc, #48]	; (80027d0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <_sbrk+0x38>)
 80027a2:	490d      	ldr	r1, [pc, #52]	; (80027d8 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 80027a4:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a6:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80027a8:	b12a      	cbz	r2, 80027b6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4410      	add	r0, r2
 80027ac:	4288      	cmp	r0, r1
 80027ae:	d807      	bhi.n	80027c0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80027b0:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80027b2:	4610      	mov	r0, r2
 80027b4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <_sbrk+0x40>)
 80027b8:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4410      	add	r0, r2
 80027bc:	4288      	cmp	r0, r1
 80027be:	d9f7      	bls.n	80027b0 <_sbrk+0x14>
    errno = ENOMEM;
 80027c0:	f005 faf6 	bl	8007db0 <__errno>
 80027c4:	230c      	movs	r3, #12
    return (void *)-1;
 80027c6:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 80027ca:	6003      	str	r3, [r0, #0]
}
 80027cc:	4610      	mov	r0, r2
 80027ce:	bd10      	pop	{r4, pc}
 80027d0:	20000968 	.word	0x20000968
 80027d4:	20004000 	.word	0x20004000
 80027d8:	00000400 	.word	0x00000400
 80027dc:	20000a58 	.word	0x20000a58

080027e0 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 80027e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 80027e4:	4d2d      	ldr	r5, [pc, #180]	; (800289c <UI_TaskInit+0xbc>)
      pDAC = &DAC_UI_Params;
 80027e6:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 80028b4 <UI_TaskInit+0xd4>
 80027ea:	4e2d      	ldr	r6, [pc, #180]	; (80028a0 <UI_TaskInit+0xc0>)
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
 80027ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80028b8 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 80027f0:	f8c6 e000 	str.w	lr, [r6]
{
 80027f4:	b087      	sub	sp, #28
 80027f6:	4690      	mov	r8, r2
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80027f8:	9000      	str	r0, [sp, #0]
{
 80027fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80027fc:	9004      	str	r0, [sp, #16]
      pDAC->_Super = UI_Params;
 80027fe:	462c      	mov	r4, r5
{
 8002800:	460f      	mov	r7, r1
 8002802:	4699      	mov	r9, r3
 8002804:	9205      	str	r2, [sp, #20]
      pDAC->_Super = UI_Params;
 8002806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002808:	46f4      	mov	ip, lr
 800280a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800280e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002810:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002814:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002818:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 800281c:	4670      	mov	r0, lr
 800281e:	464b      	mov	r3, r9
 8002820:	4642      	mov	r2, r8
 8002822:	4639      	mov	r1, r7
 8002824:	f000 f896 	bl	8002954 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8002828:	6830      	ldr	r0, [r6, #0]
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 800282a:	f8df b090 	ldr.w	fp, [pc, #144]	; 80028bc <UI_TaskInit+0xdc>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 800282e:	f000 fa1b 	bl	8002c68 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 8002832:	6830      	ldr	r0, [r6, #0]
 8002834:	2223      	movs	r2, #35	; 0x23
 8002836:	2100      	movs	r1, #0
 8002838:	f000 fa1e 	bl	8002c78 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 800283c:	6830      	ldr	r0, [r6, #0]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	2101      	movs	r1, #1
 8002842:	f000 fa19 	bl	8002c78 <UI_SetDAC>
    pMCP = &MCP_UI_Params;
 8002846:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <UI_TaskInit+0xc4>)
 8002848:	f8ca 3000 	str.w	r3, [sl]
    pMCP->_Super = UI_Params;
 800284c:	469c      	mov	ip, r3
 800284e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002850:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002856:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800285a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800285e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 8002862:	4658      	mov	r0, fp
 8002864:	f005 f954 	bl	8007b10 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8002868:	6833      	ldr	r3, [r6, #0]
 800286a:	9a05      	ldr	r2, [sp, #20]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <UI_TaskInit+0xc8>)
 8002870:	f8da 0000 	ldr.w	r0, [sl]
 8002874:	9202      	str	r2, [sp, #8]
 8002876:	4659      	mov	r1, fp
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <UI_TaskInit+0xcc>)
 800287c:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <UI_TaskInit+0xd0>)
 800287e:	f7ff fb77 	bl	8001f70 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002882:	9b04      	ldr	r3, [sp, #16]
 8002884:	f8da 0000 	ldr.w	r0, [sl]
 8002888:	9310      	str	r3, [sp, #64]	; 0x40
 800288a:	4642      	mov	r2, r8
 800288c:	464b      	mov	r3, r9
 800288e:	4639      	mov	r1, r7

}
 8002890:	b007      	add	sp, #28
 8002892:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002896:	f000 b85d 	b.w	8002954 <UI_Init>
 800289a:	bf00      	nop
 800289c:	20000468 	.word	0x20000468
 80028a0:	20000a3c 	.word	0x20000a3c
 80028a4:	2000096c 	.word	0x2000096c
 80028a8:	08007d51 	.word	0x08007d51
 80028ac:	08007ba5 	.word	0x08007ba5
 80028b0:	08007b7d 	.word	0x08007b7d
 80028b4:	200000b8 	.word	0x200000b8
 80028b8:	20000a40 	.word	0x20000a40
 80028bc:	20000498 	.word	0x20000498

080028c0 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <UI_Scheduler+0x38>)
 80028c2:	8813      	ldrh	r3, [r2, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	b11b      	cbz	r3, 80028d0 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 80028c8:	8813      	ldrh	r3, [r2, #0]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <UI_Scheduler+0x3c>)
 80028d2:	8813      	ldrh	r3, [r2, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d903      	bls.n	80028e2 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 80028da:	8813      	ldrh	r3, [r2, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80028e2:	4a07      	ldr	r2, [pc, #28]	; (8002900 <UI_Scheduler+0x40>)
 80028e4:	8813      	ldrh	r3, [r2, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d903      	bls.n	80028f4 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 80028ec:	8813      	ldrh	r3, [r2, #0]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	8013      	strh	r3, [r2, #0]
  }
}
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000a3a 	.word	0x20000a3a
 80028fc:	20000a38 	.word	0x20000a38
 8002900:	200005da 	.word	0x200005da

08002904 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 8002904:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002906:	4d06      	ldr	r5, [pc, #24]	; (8002920 <UI_DACUpdate+0x1c>)
{
 8002908:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 800290a:	6828      	ldr	r0, [r5, #0]
 800290c:	f000 f834 	bl	8002978 <UI_GetSelectedMC>
 8002910:	42a0      	cmp	r0, r4
 8002912:	d000      	beq.n	8002916 <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 8002914:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002916:	6828      	ldr	r0, [r5, #0]
}
 8002918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 800291c:	f000 b9a8 	b.w	8002c70 <UI_DACExec>
 8002920:	20000a3c 	.word	0x20000a3c

08002924 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002924:	4b01      	ldr	r3, [pc, #4]	; (800292c <UI_SerialCommunicationTimeOutStop+0x8>)
 8002926:	2200      	movs	r2, #0
 8002928:	801a      	strh	r2, [r3, #0]
}
 800292a:	4770      	bx	lr
 800292c:	20000a38 	.word	0x20000a38

08002930 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002930:	4b01      	ldr	r3, [pc, #4]	; (8002938 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002932:	224f      	movs	r2, #79	; 0x4f
 8002934:	801a      	strh	r2, [r3, #0]
}
 8002936:	4770      	bx	lr
 8002938:	20000a38 	.word	0x20000a38

0800293c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 800293c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 800293e:	f7fe f991 	bl	8000c64 <MC_GetSTMStateMotor1>
 8002942:	b918      	cbnz	r0, 800294c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002944:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002948:	f7fe b980 	b.w	8000c4c <MC_StartMotor1>
}
 800294c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002950:	f7fe b982 	b.w	8000c58 <MC_StopMotor1>

08002954 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002954:	e9c0 2308 	strd	r2, r3, [r0, #32]
  pHandle->bDriveNum = bMCNum;
 8002958:	7701      	strb	r1, [r0, #28]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 800295a:	9b00      	ldr	r3, [sp, #0]
 800295c:	6283      	str	r3, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 800295e:	2100      	movs	r1, #0
 8002960:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop

08002968 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002968:	7f03      	ldrb	r3, [r0, #28]
 800296a:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 800296c:	bf86      	itte	hi
 800296e:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8002972:	2001      	movhi	r0, #1
    retVal = false;
 8002974:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002976:	4770      	bx	lr

08002978 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002978:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop

08002980 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002980:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002982:	6a04      	ldr	r4, [r0, #32]
 8002984:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002988:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 800298c:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800298e:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 8002990:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002996:	295b      	cmp	r1, #91	; 0x5b
 8002998:	d82f      	bhi.n	80029fa <UI_SetReg+0x7a>
 800299a:	e8df f001 	tbb	[pc, r1]
 800299e:	2e3d      	.short	0x2e3d
 80029a0:	482e412e 	.word	0x482e412e
 80029a4:	665a544e 	.word	0x665a544e
 80029a8:	8478726c 	.word	0x8478726c
 80029ac:	2e2e908a 	.word	0x2e2e908a
 80029b0:	2e2e2e2e 	.word	0x2e2e2e2e
 80029b4:	2e2e2e2e 	.word	0x2e2e2e2e
 80029b8:	2e2e2e2e 	.word	0x2e2e2e2e
 80029bc:	2e2e2e2e 	.word	0x2e2e2e2e
 80029c0:	2e2e2e2e 	.word	0x2e2e2e2e
 80029c4:	2e2e2e2e 	.word	0x2e2e2e2e
 80029c8:	2e2e2e2e 	.word	0x2e2e2e2e
 80029cc:	2e2e2e2e 	.word	0x2e2e2e2e
 80029d0:	2e2e2e2e 	.word	0x2e2e2e2e
 80029d4:	2e2e2e2e 	.word	0x2e2e2e2e
 80029d8:	2e2e2e2e 	.word	0x2e2e2e2e
 80029dc:	962e2e2e 	.word	0x962e2e2e
 80029e0:	2e2e2e2e 	.word	0x2e2e2e2e
 80029e4:	2e2e2e2e 	.word	0x2e2e2e2e
 80029e8:	2e2e2e2e 	.word	0x2e2e2e2e
 80029ec:	2e2e2e2e 	.word	0x2e2e2e2e
 80029f0:	2e2e2e2e 	.word	0x2e2e2e2e
 80029f4:	2e2e2e2e 	.word	0x2e2e2e2e
 80029f8:	312e      	.short	0x312e
 80029fa:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 80029fc:	b003      	add	sp, #12
 80029fe:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002a00:	493f      	ldr	r1, [pc, #252]	; (8002b00 <UI_SetReg+0x180>)
 8002a02:	fb81 3104 	smull	r3, r1, r1, r4
 8002a06:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002a0a:	4628      	mov	r0, r5
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	b209      	sxth	r1, r1
 8002a10:	f7fe f93c 	bl	8000c8c <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002a14:	2001      	movs	r0, #1
    break;
 8002a16:	e7f1      	b.n	80029fc <UI_SetReg+0x7c>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002a18:	b2e1      	uxtb	r1, r4
 8002a1a:	f7ff ffa5 	bl	8002968 <UI_SelectMC>
    break;
 8002a1e:	e7ed      	b.n	80029fc <UI_SetReg+0x7c>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002a20:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002a24:	d057      	beq.n	8002ad6 <UI_SetReg+0x156>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002a26:	2c01      	cmp	r4, #1
 8002a28:	d05f      	beq.n	8002aea <UI_SetReg+0x16a>
  bool retVal = true;
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	e7e6      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	b221      	sxth	r1, r4
 8002a32:	f003 fd71 	bl	8006518 <PID_SetKP>
  bool retVal = true;
 8002a36:	2001      	movs	r0, #1
    break;
 8002a38:	e7e0      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	b221      	sxth	r1, r4
 8002a3e:	f003 fd6d 	bl	800651c <PID_SetKI>
  bool retVal = true;
 8002a42:	2001      	movs	r0, #1
    break;
 8002a44:	e7da      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	b221      	sxth	r1, r4
 8002a4a:	f003 fd77 	bl	800653c <PID_SetKD>
  bool retVal = true;
 8002a4e:	2001      	movs	r0, #1
    break;
 8002a50:	e7d4      	b.n	80029fc <UI_SetReg+0x7c>
      currComp = MCI_GetIqdref(pMCI);
 8002a52:	4628      	mov	r0, r5
 8002a54:	f7fe f9d2 	bl	8000dfc <MCI_GetIqdref>
 8002a58:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002a5a:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002a5e:	4628      	mov	r0, r5
 8002a60:	9901      	ldr	r1, [sp, #4]
 8002a62:	f7fe f927 	bl	8000cb4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002a66:	2001      	movs	r0, #1
    break;
 8002a68:	e7c8      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002a6a:	6858      	ldr	r0, [r3, #4]
 8002a6c:	b221      	sxth	r1, r4
 8002a6e:	f003 fd53 	bl	8006518 <PID_SetKP>
  bool retVal = true;
 8002a72:	2001      	movs	r0, #1
    break;
 8002a74:	e7c2      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002a76:	6858      	ldr	r0, [r3, #4]
 8002a78:	b221      	sxth	r1, r4
 8002a7a:	f003 fd4f 	bl	800651c <PID_SetKI>
  bool retVal = true;
 8002a7e:	2001      	movs	r0, #1
    break;
 8002a80:	e7bc      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002a82:	6858      	ldr	r0, [r3, #4]
 8002a84:	b221      	sxth	r1, r4
 8002a86:	f003 fd59 	bl	800653c <PID_SetKD>
  bool retVal = true;
 8002a8a:	2001      	movs	r0, #1
    break;
 8002a8c:	e7b6      	b.n	80029fc <UI_SetReg+0x7c>
      currComp = MCI_GetIqdref(pMCI);
 8002a8e:	4628      	mov	r0, r5
 8002a90:	f7fe f9b4 	bl	8000dfc <MCI_GetIqdref>
 8002a94:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002a96:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	9901      	ldr	r1, [sp, #4]
 8002a9e:	f7fe f909 	bl	8000cb4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002aa2:	2001      	movs	r0, #1
    break;
 8002aa4:	e7aa      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002aa6:	6898      	ldr	r0, [r3, #8]
 8002aa8:	b221      	sxth	r1, r4
 8002aaa:	f003 fd35 	bl	8006518 <PID_SetKP>
  bool retVal = true;
 8002aae:	2001      	movs	r0, #1
    break;
 8002ab0:	e7a4      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002ab2:	6898      	ldr	r0, [r3, #8]
 8002ab4:	b221      	sxth	r1, r4
 8002ab6:	f003 fd31 	bl	800651c <PID_SetKI>
  bool retVal = true;
 8002aba:	2001      	movs	r0, #1
    break;
 8002abc:	e79e      	b.n	80029fc <UI_SetReg+0x7c>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002abe:	6898      	ldr	r0, [r3, #8]
 8002ac0:	b221      	sxth	r1, r4
 8002ac2:	f003 fd3b 	bl	800653c <PID_SetKD>
  bool retVal = true;
 8002ac6:	2001      	movs	r0, #1
    break;
 8002ac8:	e798      	b.n	80029fc <UI_SetReg+0x7c>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002aca:	4628      	mov	r0, r5
 8002acc:	b221      	sxth	r1, r4
 8002ace:	f7fe f9c3 	bl	8000e58 <MCI_SetIdref>
  bool retVal = true;
 8002ad2:	2001      	movs	r0, #1
    break;
 8002ad4:	e792      	b.n	80029fc <UI_SetReg+0x7c>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f7fe f9ba 	bl	8000e50 <MCI_GetTeref>
 8002adc:	4622      	mov	r2, r4
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f7fe f8dd 	bl	8000ca0 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	e788      	b.n	80029fc <UI_SetReg+0x7c>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002aea:	4628      	mov	r0, r5
 8002aec:	f7fe f958 	bl	8000da0 <MCI_GetMecSpeedRefUnit>
 8002af0:	2200      	movs	r2, #0
 8002af2:	4601      	mov	r1, r0
 8002af4:	4628      	mov	r0, r5
 8002af6:	f7fe f8c9 	bl	8000c8c <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002afa:	4620      	mov	r0, r4
 8002afc:	e77e      	b.n	80029fc <UI_SetReg+0x7c>
 8002afe:	bf00      	nop
 8002b00:	2aaaaaab 	.word	0x2aaaaaab

08002b04 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002b04:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b06:	6a03      	ldr	r3, [r0, #32]
 8002b08:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 8002b0c:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002b0e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002b12:	2910      	cmp	r1, #16
 8002b14:	d80a      	bhi.n	8002b2c <UI_ExecCmd+0x28>
 8002b16:	e8df f001 	tbb	[pc, r1]
 8002b1a:	161b      	.short	0x161b
 8002b1c:	1210100b 	.word	0x1210100b
 8002b20:	09332e20 	.word	0x09332e20
 8002b24:	16090909 	.word	0x16090909
 8002b28:	2a25      	.short	0x2a25
 8002b2a:	38          	.byte	0x38
 8002b2b:	00          	.byte	0x00
 8002b2c:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002b2e:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8002b30:	4620      	mov	r0, r4
 8002b32:	f7fe f91b 	bl	8000d6c <MCI_GetSTMState>
 8002b36:	2806      	cmp	r0, #6
 8002b38:	d02b      	beq.n	8002b92 <UI_ExecCmd+0x8e>
  bool retVal = true;
 8002b3a:	2001      	movs	r0, #1
}
 8002b3c:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe f914 	bl	8000d6c <MCI_GetSTMState>
 8002b44:	b120      	cbz	r0, 8002b50 <UI_ExecCmd+0x4c>
        MCI_StopMotor(pMCI);
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7fe f8c8 	bl	8000cdc <MCI_StopMotor>
  bool retVal = true;
 8002b4c:	2001      	movs	r0, #1
}
 8002b4e:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002b50:	4620      	mov	r0, r4
 8002b52:	f7fe f8b9 	bl	8000cc8 <MCI_StartMotor>
  bool retVal = true;
 8002b56:	2001      	movs	r0, #1
}
 8002b58:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7fe f8c2 	bl	8000ce4 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002b60:	2001      	movs	r0, #1
}
 8002b62:	bd10      	pop	{r4, pc}
      	MCI_Home_Osc(pMCI);
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7fe f98b 	bl	8000e80 <MCI_Home_Osc>
  bool retVal = true;
 8002b6a:	2001      	movs	r0, #1
}
 8002b6c:	bd10      	pop	{r4, pc}
      	MCI_Home_Offset();
 8002b6e:	f7fe f98f 	bl	8000e90 <MCI_Home_Offset>
  bool retVal = true;
 8002b72:	2001      	movs	r0, #1
}
 8002b74:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002b76:	4620      	mov	r0, r4
 8002b78:	f7fe f8b8 	bl	8000cec <MCI_EncoderAlign>
  bool retVal = true;
 8002b7c:	2001      	movs	r0, #1
}
 8002b7e:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7fe f973 	bl	8000e6c <MCI_Clear_Iqdref>
  bool retVal = true;
 8002b86:	2001      	movs	r0, #1
}
 8002b88:	bd10      	pop	{r4, pc}
      	MCI_Home_Null();
 8002b8a:	f7fe f989 	bl	8000ea0 <MCI_Home_Null>
  bool retVal = true;
 8002b8e:	2001      	movs	r0, #1
}
 8002b90:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002b92:	4620      	mov	r0, r4
 8002b94:	f7fe f8f8 	bl	8000d88 <MCI_StopRamp>
  bool retVal = true;
 8002b98:	2001      	movs	r0, #1
}
 8002b9a:	bd10      	pop	{r4, pc}

08002b9c <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002b9c:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002ba0:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 8002ba4:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002ba6:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8002baa:	fb83 c301 	smull	ip, r3, r3, r1
 8002bae:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002bb2:	b209      	sxth	r1, r1
 8002bb4:	f7fe f86a 	bl	8000c8c <MCI_ExecSpeedRamp>
  return true;
}
 8002bb8:	2001      	movs	r0, #1
 8002bba:	bd08      	pop	{r3, pc}
 8002bbc:	2aaaaaab 	.word	0x2aaaaaab

08002bc0 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002bc0:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002bc2:	6a03      	ldr	r3, [r0, #32]
 8002bc4:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002bc8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002bcc:	f7fe f868 	bl	8000ca0 <MCI_ExecTorqueRamp>
  return true;
}
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	bd08      	pop	{r3, pc}

08002bd4 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	4617      	mov	r7, r2
 8002bd8:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002bda:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8002bde:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be4:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8002be6:	b18c      	cbz	r4, 8002c0c <UI_GetRevupData+0x38>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002be8:	4620      	mov	r0, r4
 8002bea:	460d      	mov	r5, r1
 8002bec:	f005 f8c6 	bl	8007d7c <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002bf0:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002bf2:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f005 f8c7 	bl	8007d88 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002bfa:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002bfc:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002bfe:	4620      	mov	r0, r4
 8002c00:	f005 f8ca 	bl	8007d98 <RUC_GetPhaseFinalTorque>
 8002c04:	9b06      	ldr	r3, [sp, #24]
 8002c06:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002c08:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002c0c:	4620      	mov	r0, r4
}
 8002c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c10 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c14:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8002c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002c1a:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c1c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8002c20:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002c24:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002c26:	9001      	str	r0, [sp, #4]
{
 8002c28:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002c2a:	f005 f895 	bl	8007d58 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002c2e:	9801      	ldr	r0, [sp, #4]
 8002c30:	462a      	mov	r2, r5
 8002c32:	4621      	mov	r1, r4
 8002c34:	f005 f896 	bl	8007d64 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002c38:	9801      	ldr	r0, [sp, #4]
 8002c3a:	4632      	mov	r2, r6
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	f005 f897 	bl	8007d70 <RUC_SetPhaseFinalTorque>
  return true;
}
 8002c42:	2001      	movs	r0, #1
 8002c44:	b002      	add	sp, #8
 8002c46:	bd70      	pop	{r4, r5, r6, pc}

08002c48 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002c48:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c4a:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 8002c4e:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 8002c50:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002c54:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002c58:	9901      	ldr	r1, [sp, #4]
 8002c5a:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 8002c5e:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002c60:	f7fe b828 	b.w	8000cb4 <MCI_SetCurrentReferences>

08002c64 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002c64:	2000      	movs	r0, #0
 8002c66:	4770      	bx	lr

08002c68 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 8002c68:	6943      	ldr	r3, [r0, #20]
 8002c6a:	b103      	cbz	r3, 8002c6e <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 8002c6c:	4718      	bx	r3
  }
}
 8002c6e:	4770      	bx	lr

08002c70 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 8002c70:	6983      	ldr	r3, [r0, #24]
 8002c72:	b103      	cbz	r3, 8002c76 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 8002c74:	4718      	bx	r3
  }
}
 8002c76:	4770      	bx	lr

08002c78 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 8002c78:	6843      	ldr	r3, [r0, #4]
 8002c7a:	b103      	cbz	r3, 8002c7e <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 8002c7c:	4718      	bx	r3
  }
}
 8002c7e:	4770      	bx	lr

08002c80 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 8002c80:	6883      	ldr	r3, [r0, #8]
 8002c82:	b103      	cbz	r3, 8002c86 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 8002c84:	4718      	bx	r3
  }
  return retVal;
}
 8002c86:	2089      	movs	r0, #137	; 0x89
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop

08002c8c <UI_GetReg>:
{
 8002c8c:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002c8e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002c90:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c94:	6a05      	ldr	r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002c96:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002c9a:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8002c9e:	b08d      	sub	sp, #52	; 0x34
  if ( success != (bool *) 0 )
 8002ca0:	2a00      	cmp	r2, #0
 8002ca2:	f000 808b 	beq.w	8002dbc <UI_GetReg+0x130>
    *success = true;
 8002ca6:	f04f 0c01 	mov.w	ip, #1
 8002caa:	f882 c000 	strb.w	ip, [r2]
  switch (bRegID)
 8002cae:	2981      	cmp	r1, #129	; 0x81
 8002cb0:	f200 8104 	bhi.w	8002ebc <UI_GetReg+0x230>
 8002cb4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002cb8:	018b0191 	.word	0x018b0191
 8002cbc:	01380187 	.word	0x01380187
 8002cc0:	012d0131 	.word	0x012d0131
 8002cc4:	01250129 	.word	0x01250129
 8002cc8:	013c0105 	.word	0x013c0105
 8002ccc:	01400144 	.word	0x01400144
 8002cd0:	011f00fd 	.word	0x011f00fd
 8002cd4:	0148011b 	.word	0x0148011b
 8002cd8:	01020102 	.word	0x01020102
 8002cdc:	01020102 	.word	0x01020102
 8002ce0:	01020102 	.word	0x01020102
 8002ce4:	01020102 	.word	0x01020102
 8002ce8:	01540102 	.word	0x01540102
 8002cec:	014c0150 	.word	0x014c0150
 8002cf0:	01e40183 	.word	0x01e40183
 8002cf4:	010a0114 	.word	0x010a0114
 8002cf8:	0102010f 	.word	0x0102010f
 8002cfc:	01ef01f4 	.word	0x01ef01f4
 8002d00:	01630168 	.word	0x01630168
 8002d04:	010a01df 	.word	0x010a01df
 8002d08:	0105010f 	.word	0x0105010f
 8002d0c:	015e00fd 	.word	0x015e00fd
 8002d10:	01d501da 	.word	0x01d501da
 8002d14:	01bb01d0 	.word	0x01bb01d0
 8002d18:	010201a6 	.word	0x010201a6
 8002d1c:	01020102 	.word	0x01020102
 8002d20:	01020102 	.word	0x01020102
 8002d24:	01020102 	.word	0x01020102
 8002d28:	01020102 	.word	0x01020102
 8002d2c:	01020102 	.word	0x01020102
 8002d30:	019f0102 	.word	0x019f0102
 8002d34:	01e80198 	.word	0x01e80198
 8002d38:	00fd017c 	.word	0x00fd017c
 8002d3c:	01020102 	.word	0x01020102
 8002d40:	01020102 	.word	0x01020102
 8002d44:	01020102 	.word	0x01020102
 8002d48:	01020102 	.word	0x01020102
 8002d4c:	01020102 	.word	0x01020102
 8002d50:	01020102 	.word	0x01020102
 8002d54:	01020102 	.word	0x01020102
 8002d58:	01020102 	.word	0x01020102
 8002d5c:	01020102 	.word	0x01020102
 8002d60:	01020102 	.word	0x01020102
 8002d64:	01020102 	.word	0x01020102
 8002d68:	01020102 	.word	0x01020102
 8002d6c:	016d0102 	.word	0x016d0102
 8002d70:	01020102 	.word	0x01020102
 8002d74:	01020102 	.word	0x01020102
 8002d78:	01020102 	.word	0x01020102
 8002d7c:	01020102 	.word	0x01020102
 8002d80:	01020102 	.word	0x01020102
 8002d84:	01020102 	.word	0x01020102
 8002d88:	01020102 	.word	0x01020102
 8002d8c:	01020102 	.word	0x01020102
 8002d90:	01020102 	.word	0x01020102
 8002d94:	015a0194 	.word	0x015a0194
 8002d98:	01020158 	.word	0x01020158
 8002d9c:	0123017a 	.word	0x0123017a
 8002da0:	01020102 	.word	0x01020102
 8002da4:	01020102 	.word	0x01020102
 8002da8:	01020102 	.word	0x01020102
 8002dac:	01020102 	.word	0x01020102
 8002db0:	01020102 	.word	0x01020102
 8002db4:	01020102 	.word	0x01020102
 8002db8:	00fa0102 	.word	0x00fa0102
 8002dbc:	2973      	cmp	r1, #115	; 0x73
 8002dbe:	d875      	bhi.n	8002eac <UI_GetReg+0x220>
 8002dc0:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002dc4:	0105010b 	.word	0x0105010b
 8002dc8:	00b20101 	.word	0x00b20101
 8002dcc:	00a700ab 	.word	0x00a700ab
 8002dd0:	009f00a3 	.word	0x009f00a3
 8002dd4:	00b6007f 	.word	0x00b6007f
 8002dd8:	00ba00be 	.word	0x00ba00be
 8002ddc:	00990077 	.word	0x00990077
 8002de0:	00c20095 	.word	0x00c20095
 8002de4:	00740074 	.word	0x00740074
 8002de8:	00740074 	.word	0x00740074
 8002dec:	00740074 	.word	0x00740074
 8002df0:	00740074 	.word	0x00740074
 8002df4:	00ce0074 	.word	0x00ce0074
 8002df8:	00c600ca 	.word	0x00c600ca
 8002dfc:	015e00fd 	.word	0x015e00fd
 8002e00:	0084008e 	.word	0x0084008e
 8002e04:	00740089 	.word	0x00740089
 8002e08:	0169016e 	.word	0x0169016e
 8002e0c:	00dd00e2 	.word	0x00dd00e2
 8002e10:	00840159 	.word	0x00840159
 8002e14:	007f0089 	.word	0x007f0089
 8002e18:	00d80077 	.word	0x00d80077
 8002e1c:	014f0154 	.word	0x014f0154
 8002e20:	0135014a 	.word	0x0135014a
 8002e24:	00740120 	.word	0x00740120
 8002e28:	00740074 	.word	0x00740074
 8002e2c:	00740074 	.word	0x00740074
 8002e30:	00740074 	.word	0x00740074
 8002e34:	00740074 	.word	0x00740074
 8002e38:	00740074 	.word	0x00740074
 8002e3c:	01190074 	.word	0x01190074
 8002e40:	01620112 	.word	0x01620112
 8002e44:	007700f6 	.word	0x007700f6
 8002e48:	00740074 	.word	0x00740074
 8002e4c:	00740074 	.word	0x00740074
 8002e50:	00740074 	.word	0x00740074
 8002e54:	00740074 	.word	0x00740074
 8002e58:	00740074 	.word	0x00740074
 8002e5c:	00740074 	.word	0x00740074
 8002e60:	00740074 	.word	0x00740074
 8002e64:	00740074 	.word	0x00740074
 8002e68:	00740074 	.word	0x00740074
 8002e6c:	00740074 	.word	0x00740074
 8002e70:	00740074 	.word	0x00740074
 8002e74:	00740074 	.word	0x00740074
 8002e78:	00e70074 	.word	0x00e70074
 8002e7c:	00740074 	.word	0x00740074
 8002e80:	00740074 	.word	0x00740074
 8002e84:	00740074 	.word	0x00740074
 8002e88:	00740074 	.word	0x00740074
 8002e8c:	00740074 	.word	0x00740074
 8002e90:	00740074 	.word	0x00740074
 8002e94:	00740074 	.word	0x00740074
 8002e98:	00740074 	.word	0x00740074
 8002e9c:	00740074 	.word	0x00740074
 8002ea0:	00d4010e 	.word	0x00d4010e
 8002ea4:	007400d2 	.word	0x007400d2
 8002ea8:	009d00f4 	.word	0x009d00f4
        bRetVal = (uint32_t) 0;
 8002eac:	2000      	movs	r0, #0
}
 8002eae:	b00d      	add	sp, #52	; 0x34
 8002eb0:	bd30      	pop	{r4, r5, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f7fd ffa2 	bl	8000dfc <MCI_GetIqdref>
 8002eb8:	1400      	asrs	r0, r0, #16
    break;
 8002eba:	e7f8      	b.n	8002eae <UI_GetReg+0x222>
        *success = false;
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8002ec0:	e7f5      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f7fd ff9a 	bl	8000dfc <MCI_GetIqdref>
 8002ec8:	b200      	sxth	r0, r0
    break;
 8002eca:	e7f0      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f7fd ff87 	bl	8000de0 <MCI_GetIqd>
 8002ed2:	b200      	sxth	r0, r0
    break;
 8002ed4:	e7eb      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f7fd ff82 	bl	8000de0 <MCI_GetIqd>
 8002edc:	1400      	asrs	r0, r0, #16
    break;
 8002ede:	e7e6      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f7fd ff55 	bl	8000d90 <MCI_GetAvrgMecSpeedUnit>
 8002ee6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002eea:	0040      	lsls	r0, r0, #1
    break;
 8002eec:	e7df      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002eee:	68a0      	ldr	r0, [r4, #8]
 8002ef0:	f003 fb1a 	bl	8006528 <PID_GetKI>
    break;
 8002ef4:	e7db      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002ef6:	68a0      	ldr	r0, [r4, #8]
 8002ef8:	f003 fb12 	bl	8006520 <PID_GetKP>
    break;
 8002efc:	e7d7      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = PWBDID;
 8002efe:	2002      	movs	r0, #2
 8002f00:	e7d5      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002f02:	6820      	ldr	r0, [r4, #0]
 8002f04:	f003 fb1c 	bl	8006540 <PID_GetKD>
    break;
 8002f08:	e7d1      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	f003 fb0c 	bl	8006528 <PID_GetKI>
    break;
 8002f10:	e7cd      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002f12:	6820      	ldr	r0, [r4, #0]
 8002f14:	f003 fb04 	bl	8006520 <PID_GetKP>
    break;
 8002f18:	e7c9      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f7fd ff40 	bl	8000da0 <MCI_GetMecSpeedRefUnit>
 8002f20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002f24:	0040      	lsls	r0, r0, #1
    break;
 8002f26:	e7c2      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002f28:	4628      	mov	r0, r5
 8002f2a:	f7fd ff23 	bl	8000d74 <MCI_GetControlMode>
    break;
 8002f2e:	e7be      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002f30:	6860      	ldr	r0, [r4, #4]
 8002f32:	f003 faf5 	bl	8006520 <PID_GetKP>
    break;
 8002f36:	e7ba      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002f38:	6860      	ldr	r0, [r4, #4]
 8002f3a:	f003 fb01 	bl	8006540 <PID_GetKD>
    break;
 8002f3e:	e7b6      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002f40:	6860      	ldr	r0, [r4, #4]
 8002f42:	f003 faf1 	bl	8006528 <PID_GetKI>
    break;
 8002f46:	e7b2      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002f48:	68a0      	ldr	r0, [r4, #8]
 8002f4a:	f003 faf9 	bl	8006540 <PID_GetKD>
    break;
 8002f4e:	e7ae      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002f50:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f52:	f003 fa7f 	bl	8006454 <MPM_GetAvrgElMotorPowerW>
    break;
 8002f56:	e7aa      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002f58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f5a:	f003 fabf 	bl	80064dc <NTC_GetAvTemp_C>
    break;
 8002f5e:	e7a6      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002f60:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002f62:	f002 fd61 	bl	8005a28 <VBS_GetAvBusVoltage_V>
    break;
 8002f66:	e7a2      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)(MC_UID);
 8002f68:	4858      	ldr	r0, [pc, #352]	; (80030cc <UI_GetReg+0x440>)
 8002f6a:	e7a0      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002f6c:	6820      	ldr	r0, [r4, #0]
 8002f6e:	f003 fae3 	bl	8006538 <PID_GetKIDivisor>
    break;
 8002f72:	e79c      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002f74:	4628      	mov	r0, r5
 8002f76:	f7fd ff4f 	bl	8000e18 <MCI_GetVqd>
 8002f7a:	b200      	sxth	r0, r0
    break;
 8002f7c:	e797      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f7fd ff20 	bl	8000dc4 <MCI_GetIalphabeta>
 8002f84:	b200      	sxth	r0, r0
    break;
 8002f86:	e792      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).b;
 8002f88:	4628      	mov	r0, r5
 8002f8a:	f7fd ff0d 	bl	8000da8 <MCI_GetIab>
 8002f8e:	1400      	asrs	r0, r0, #16
    break;
 8002f90:	e78d      	b.n	8002eae <UI_GetReg+0x222>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002f92:	4628      	mov	r0, r5
 8002f94:	f7fd feee 	bl	8000d74 <MCI_GetControlMode>
 8002f98:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002f9a:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002f9c:	f000 808f 	beq.w	80030be <UI_GetReg+0x432>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002fa0:	f7fd fefe 	bl	8000da0 <MCI_GetMecSpeedRefUnit>
 8002fa4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fa8:	0040      	lsls	r0, r0, #1
 8002faa:	e780      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = CTRBDID;
 8002fac:	2001      	movs	r0, #1
 8002fae:	e77e      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002fb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002fb2:	f004 fce9 	bl	8007988 <STC_GetMinAppNegativeMecSpeedUnit>
 8002fb6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fba:	0040      	lsls	r0, r0, #1
    break;
 8002fbc:	e777      	b.n	8002eae <UI_GetReg+0x222>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	f7ff fe5e 	bl	8002c80 <UI_GetDAC>
    break;
 8002fc4:	e773      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002fc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002fc8:	f004 fd8e 	bl	8007ae8 <STM_GetState>
	break;
 8002fcc:	e76f      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002fce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8002fd0:	b00d      	add	sp, #52	; 0x34
 8002fd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002fd6:	f004 bd95 	b.w	8007b04 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002fda:	f7ff fccd 	bl	8002978 <UI_GetSelectedMC>
    break;
 8002fde:	e766      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	f003 faa7 	bl	8006534 <PID_GetKPDivisor>
    break;
 8002fe6:	e762      	b.n	8002eae <UI_GetReg+0x222>
      if (pHandle->pFctDACGetUserChannelValue)
 8002fe8:	6903      	ldr	r3, [r0, #16]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f43f af5e 	beq.w	8002eac <UI_GetReg+0x220>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4798      	blx	r3
 8002ff4:	e75b      	b.n	8002eae <UI_GetReg+0x222>
      if (pHandle->pFctDACGetUserChannelValue)
 8002ff6:	6903      	ldr	r3, [r0, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f43f af57 	beq.w	8002eac <UI_GetReg+0x220>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8002ffe:	2100      	movs	r1, #0
 8003000:	4798      	blx	r3
 8003002:	e754      	b.n	8002eae <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8003004:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800300a:	0f1a      	lsrs	r2, r3, #28
 800300c:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800300e:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003012:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003014:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003018:	d94d      	bls.n	80030b6 <UI_GetReg+0x42a>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800301a:	2b01      	cmp	r3, #1
 800301c:	f63f af46 	bhi.w	8002eac <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 8003020:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8003022:	2800      	cmp	r0, #0
 8003024:	f43f af42 	beq.w	8002eac <UI_GetReg+0x220>
        bRetVal = SPD_GetS16Speed(pSPD);
 8003028:	f004 fbec 	bl	8007804 <SPD_GetS16Speed>
 800302c:	e73f      	b.n	8002eae <UI_GetReg+0x222>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800302e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003034:	0f1a      	lsrs	r2, r3, #28
 8003036:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003038:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800303c:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800303e:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003042:	d934      	bls.n	80030ae <UI_GetReg+0x422>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003044:	2b01      	cmp	r3, #1
 8003046:	f63f af31 	bhi.w	8002eac <UI_GetReg+0x220>
        pSPD = pMCT->pSpeedSensorAux;
 800304a:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800304c:	2800      	cmp	r0, #0
 800304e:	f43f af2d 	beq.w	8002eac <UI_GetReg+0x220>
        bRetVal = SPD_GetElAngle(pSPD);
 8003052:	f004 fb95 	bl	8007780 <SPD_GetElAngle>
 8003056:	e72a      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003058:	4628      	mov	r0, r5
 800305a:	f7fd feeb 	bl	8000e34 <MCI_GetValphabeta>
 800305e:	1400      	asrs	r0, r0, #16
    break;
 8003060:	e725      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8003062:	4628      	mov	r0, r5
 8003064:	f7fd fee6 	bl	8000e34 <MCI_GetValphabeta>
 8003068:	b200      	sxth	r0, r0
    break;
 800306a:	e720      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetVqd(pMCI).d;
 800306c:	4628      	mov	r0, r5
 800306e:	f7fd fed3 	bl	8000e18 <MCI_GetVqd>
 8003072:	1400      	asrs	r0, r0, #16
    break;
 8003074:	e71b      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8003076:	4628      	mov	r0, r5
 8003078:	f7fd fea4 	bl	8000dc4 <MCI_GetIalphabeta>
 800307c:	1400      	asrs	r0, r0, #16
    break;
 800307e:	e716      	b.n	8002eae <UI_GetReg+0x222>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8003080:	2101      	movs	r1, #1
 8003082:	f7ff fdfd 	bl	8002c80 <UI_GetDAC>
    break;
 8003086:	e712      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8003088:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800308a:	f004 fc7b 	bl	8007984 <STC_GetMaxAppPositiveMecSpeedUnit>
 800308e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003092:	0040      	lsls	r0, r0, #1
    break;
 8003094:	e70b      	b.n	8002eae <UI_GetReg+0x222>
      bRetVal = MCI_GetIab(pMCI).a;
 8003096:	4628      	mov	r0, r5
 8003098:	f7fd fe86 	bl	8000da8 <MCI_GetIab>
 800309c:	b200      	sxth	r0, r0
    break;
 800309e:	e706      	b.n	8002eae <UI_GetReg+0x222>
      if (pMCT->pRevupCtrl)
 80030a0:	6960      	ldr	r0, [r4, #20]
 80030a2:	2800      	cmp	r0, #0
 80030a4:	f43f af02 	beq.w	8002eac <UI_GetReg+0x220>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80030a8:	f004 fe7e 	bl	8007da8 <RUC_GetNumberOfPhases>
 80030ac:	e6ff      	b.n	8002eae <UI_GetReg+0x222>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030ae:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80030b0:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030b2:	d8cb      	bhi.n	800304c <UI_GetReg+0x3c0>
 80030b4:	e7c9      	b.n	800304a <UI_GetReg+0x3be>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030b6:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 80030b8:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80030ba:	d8b2      	bhi.n	8003022 <UI_GetReg+0x396>
 80030bc:	e7b0      	b.n	8003020 <UI_GetReg+0x394>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80030be:	f7fd fe5b 	bl	8000d78 <MCI_GetLastRampFinalSpeed>
 80030c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80030c6:	0040      	lsls	r0, r0, #1
 80030c8:	e6f1      	b.n	8002eae <UI_GetReg+0x222>
 80030ca:	bf00      	nop
 80030cc:	34a6847a 	.word	0x34a6847a

080030d0 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030d0:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <SystemInit+0x10>)
 80030d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80030d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_InitTick+0x3c>)
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_InitTick+0x40>)
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
{
 80030ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030f4:	fbb0 f0f2 	udiv	r0, r0, r2
 80030f8:	fbb3 f0f0 	udiv	r0, r3, r0
 80030fc:	f000 fd52 	bl	8003ba4 <HAL_SYSTICK_Config>
 8003100:	b908      	cbnz	r0, 8003106 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003102:	2d0f      	cmp	r5, #15
 8003104:	d901      	bls.n	800310a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003106:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8003108:	bd38      	pop	{r3, r4, r5, pc}
 800310a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800310c:	4602      	mov	r2, r0
 800310e:	4629      	mov	r1, r5
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	f000 fcfa 	bl	8003b0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_InitTick+0x44>)
 800311a:	4620      	mov	r0, r4
 800311c:	601d      	str	r5, [r3, #0]
}
 800311e:	bd38      	pop	{r3, r4, r5, pc}
 8003120:	200005e0 	.word	0x200005e0
 8003124:	200005dc 	.word	0x200005dc
 8003128:	200005e4 	.word	0x200005e4

0800312c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800312c:	4a07      	ldr	r2, [pc, #28]	; (800314c <HAL_Init+0x20>)
{
 800312e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003130:	6813      	ldr	r3, [r2, #0]
 8003132:	f043 0310 	orr.w	r3, r3, #16
 8003136:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003138:	2003      	movs	r0, #3
 800313a:	f000 fcd5 	bl	8003ae8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800313e:	2004      	movs	r0, #4
 8003140:	f7ff ffd0 	bl	80030e4 <HAL_InitTick>
  HAL_MspInit();
 8003144:	f7ff f99c 	bl	8002480 <HAL_MspInit>
}
 8003148:	2000      	movs	r0, #0
 800314a:	bd08      	pop	{r3, pc}
 800314c:	40022000 	.word	0x40022000

08003150 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003150:	4a03      	ldr	r2, [pc, #12]	; (8003160 <HAL_IncTick+0x10>)
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <HAL_IncTick+0x14>)
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	440b      	add	r3, r1
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	20000a44 	.word	0x20000a44
 8003164:	200005e0 	.word	0x200005e0

08003168 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8003168:	4b01      	ldr	r3, [pc, #4]	; (8003170 <HAL_GetTick+0x8>)
 800316a:	6818      	ldr	r0, [r3, #0]
}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000a44 	.word	0x20000a44

08003174 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003174:	6802      	ldr	r2, [r0, #0]
{
 8003176:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003178:	6893      	ldr	r3, [r2, #8]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d001      	beq.n	8003186 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003182:	2000      	movs	r0, #0
}
 8003184:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003186:	6811      	ldr	r1, [r2, #0]
 8003188:	07cc      	lsls	r4, r1, #31
 800318a:	d5fa      	bpl.n	8003182 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800318c:	6891      	ldr	r1, [r2, #8]
 800318e:	f001 010d 	and.w	r1, r1, #13
 8003192:	2901      	cmp	r1, #1
 8003194:	4604      	mov	r4, r0
 8003196:	d009      	beq.n	80031ac <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003198:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800319a:	f042 0210 	orr.w	r2, r2, #16
 800319e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80031a0:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6463      	str	r3, [r4, #68]	; 0x44
}
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 80031ac:	6893      	ldr	r3, [r2, #8]
 80031ae:	2103      	movs	r1, #3
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	6093      	str	r3, [r2, #8]
 80031b6:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 80031b8:	f7ff ffd6 	bl	8003168 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80031c2:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031c4:	d403      	bmi.n	80031ce <ADC_Disable+0x5a>
 80031c6:	e7dc      	b.n	8003182 <ADC_Disable+0xe>
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	07db      	lsls	r3, r3, #31
 80031cc:	d5d9      	bpl.n	8003182 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031ce:	f7ff ffcb 	bl	8003168 <HAL_GetTick>
 80031d2:	1b40      	subs	r0, r0, r5
 80031d4:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031d6:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031d8:	d9f6      	bls.n	80031c8 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	07d2      	lsls	r2, r2, #31
 80031de:	d5f3      	bpl.n	80031c8 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031e2:	f043 0310 	orr.w	r3, r3, #16
 80031e6:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80031ea:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ec:	4303      	orrs	r3, r0
 80031ee:	6463      	str	r3, [r4, #68]	; 0x44
}
 80031f0:	bd38      	pop	{r3, r4, r5, pc}
 80031f2:	bf00      	nop

080031f4 <HAL_ADC_Init>:
{
 80031f4:	b530      	push	{r4, r5, lr}
 80031f6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80031fc:	2800      	cmp	r0, #0
 80031fe:	f000 8083 	beq.w	8003308 <HAL_ADC_Init+0x114>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003202:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003204:	f013 0310 	ands.w	r3, r3, #16
 8003208:	4604      	mov	r4, r0
 800320a:	d116      	bne.n	800323a <HAL_ADC_Init+0x46>
    if (hadc->State == HAL_ADC_STATE_RESET)
 800320c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800320e:	2d00      	cmp	r5, #0
 8003210:	d07d      	beq.n	800330e <HAL_ADC_Init+0x11a>
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003212:	6822      	ldr	r2, [r4, #0]
 8003214:	6891      	ldr	r1, [r2, #8]
 8003216:	00cd      	lsls	r5, r1, #3
 8003218:	d56a      	bpl.n	80032f0 <HAL_ADC_Init+0xfc>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800321a:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800321c:	0088      	lsls	r0, r1, #2
 800321e:	d467      	bmi.n	80032f0 <HAL_ADC_Init+0xfc>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003220:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003222:	06c9      	lsls	r1, r1, #27
 8003224:	d400      	bmi.n	8003228 <HAL_ADC_Init+0x34>
 8003226:	b163      	cbz	r3, 8003242 <HAL_ADC_Init+0x4e>
    ADC_STATE_CLR_SET(hadc->State,
 8003228:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800322a:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 800322e:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8003230:	f043 0310 	orr.w	r3, r3, #16
 8003234:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003236:	b003      	add	sp, #12
 8003238:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800323a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800323c:	06d8      	lsls	r0, r3, #27
 800323e:	d4f3      	bmi.n	8003228 <HAL_ADC_Init+0x34>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8003244:	f010 0004 	ands.w	r0, r0, #4
 8003248:	d1ee      	bne.n	8003228 <HAL_ADC_Init+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 800324a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800324c:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003250:	f041 0102 	orr.w	r1, r1, #2
 8003254:	6421      	str	r1, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003256:	6893      	ldr	r3, [r2, #8]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b01      	cmp	r3, #1
 800325e:	f000 80a4 	beq.w	80033aa <HAL_ADC_Init+0x1b6>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003262:	495a      	ldr	r1, [pc, #360]	; (80033cc <HAL_ADC_Init+0x1d8>)
 8003264:	6865      	ldr	r5, [r4, #4]
 8003266:	688b      	ldr	r3, [r1, #8]
 8003268:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800326c:	432b      	orrs	r3, r5
 800326e:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003272:	68e1      	ldr	r1, [r4, #12]
 8003274:	7e65      	ldrb	r5, [r4, #25]
 8003276:	2b01      	cmp	r3, #1
 8003278:	68a3      	ldr	r3, [r4, #8]
 800327a:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800327e:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003282:	bf18      	it	ne
 8003284:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8003288:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800328c:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800328e:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003292:	f000 8082 	beq.w	800339a <HAL_ADC_Init+0x1a6>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003296:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003298:	2901      	cmp	r1, #1
 800329a:	d002      	beq.n	80032a2 <HAL_ADC_Init+0xae>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800329c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800329e:	4301      	orrs	r1, r0
 80032a0:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80032a2:	6891      	ldr	r1, [r2, #8]
 80032a4:	f011 0f0c 	tst.w	r1, #12
 80032a8:	d10c      	bne.n	80032c4 <HAL_ADC_Init+0xd0>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80032aa:	68d1      	ldr	r1, [r2, #12]
 80032ac:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80032b0:	f021 0102 	bic.w	r1, r1, #2
 80032b4:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80032b6:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80032ba:	7e20      	ldrb	r0, [r4, #24]
 80032bc:	0049      	lsls	r1, r1, #1
 80032be:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 80032c2:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80032c4:	68d0      	ldr	r0, [r2, #12]
 80032c6:	4942      	ldr	r1, [pc, #264]	; (80033d0 <HAL_ADC_Init+0x1dc>)
 80032c8:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032ca:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 80032cc:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032ce:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 80032d0:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032d2:	d05a      	beq.n	800338a <HAL_ADC_Init+0x196>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032d4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80032d6:	f023 030f 	bic.w	r3, r3, #15
 80032da:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	2000      	movs	r0, #0
 80032de:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80032e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6423      	str	r3, [r4, #64]	; 0x40
}
 80032ec:	b003      	add	sp, #12
 80032ee:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 80032f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032f2:	f023 0312 	bic.w	r3, r3, #18
 80032f6:	f043 0310 	orr.w	r3, r3, #16
 80032fa:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003306:	e78f      	b.n	8003228 <HAL_ADC_Init+0x34>
    return HAL_ERROR;
 8003308:	2001      	movs	r0, #1
}
 800330a:	b003      	add	sp, #12
 800330c:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 800330e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8003312:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8003314:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8003318:	f7ff f8cc 	bl	80024b4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800331c:	6822      	ldr	r2, [r4, #0]
 800331e:	6893      	ldr	r3, [r2, #8]
 8003320:	00d9      	lsls	r1, r3, #3
 8003322:	d501      	bpl.n	8003328 <HAL_ADC_Init+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003324:	462b      	mov	r3, r5
 8003326:	e775      	b.n	8003214 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 8003328:	4620      	mov	r0, r4
 800332a:	f7ff ff23 	bl	8003174 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800332e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003330:	06d2      	lsls	r2, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 8003332:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003334:	f53f af6d 	bmi.w	8003212 <HAL_ADC_Init+0x1e>
 8003338:	2800      	cmp	r0, #0
 800333a:	f47f af6a 	bne.w	8003212 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 800333e:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003340:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8003342:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8003346:	f021 0102 	bic.w	r1, r1, #2
 800334a:	f041 0102 	orr.w	r1, r1, #2
 800334e:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003350:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003352:	4920      	ldr	r1, [pc, #128]	; (80033d4 <HAL_ADC_Init+0x1e0>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003354:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8003358:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800335a:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800335c:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800335e:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8003362:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003364:	481c      	ldr	r0, [pc, #112]	; (80033d8 <HAL_ADC_Init+0x1e4>)
 8003366:	fba0 0101 	umull	r0, r1, r0, r1
 800336a:	0c89      	lsrs	r1, r1, #18
 800336c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003370:	0049      	lsls	r1, r1, #1
 8003372:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8003374:	9901      	ldr	r1, [sp, #4]
 8003376:	2900      	cmp	r1, #0
 8003378:	f43f af4c 	beq.w	8003214 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 800337c:	9901      	ldr	r1, [sp, #4]
 800337e:	3901      	subs	r1, #1
 8003380:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8003382:	9901      	ldr	r1, [sp, #4]
 8003384:	2900      	cmp	r1, #0
 8003386:	d1f9      	bne.n	800337c <HAL_ADC_Init+0x188>
 8003388:	e744      	b.n	8003214 <HAL_ADC_Init+0x20>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800338a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800338c:	69e3      	ldr	r3, [r4, #28]
 800338e:	f021 010f 	bic.w	r1, r1, #15
 8003392:	3b01      	subs	r3, #1
 8003394:	430b      	orrs	r3, r1
 8003396:	6313      	str	r3, [r2, #48]	; 0x30
 8003398:	e7a0      	b.n	80032dc <HAL_ADC_Init+0xe8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800339a:	b95d      	cbnz	r5, 80033b4 <HAL_ADC_Init+0x1c0>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800339c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800339e:	3901      	subs	r1, #1
 80033a0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	e775      	b.n	8003296 <HAL_ADC_Init+0xa2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	07db      	lsls	r3, r3, #31
 80033ae:	f53f af5f 	bmi.w	8003270 <HAL_ADC_Init+0x7c>
 80033b2:	e756      	b.n	8003262 <HAL_ADC_Init+0x6e>
        ADC_STATE_CLR_SET(hadc->State,
 80033b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80033b6:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 80033ba:	f041 0120 	orr.w	r1, r1, #32
 80033be:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80033c2:	f041 0101 	orr.w	r1, r1, #1
 80033c6:	6461      	str	r1, [r4, #68]	; 0x44
 80033c8:	e765      	b.n	8003296 <HAL_ADC_Init+0xa2>
 80033ca:	bf00      	nop
 80033cc:	50000300 	.word	0x50000300
 80033d0:	fff0c007 	.word	0xfff0c007
 80033d4:	200005dc 	.word	0x200005dc
 80033d8:	431bde83 	.word	0x431bde83

080033dc <HAL_ADC_ConfigChannel>:
{
 80033dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80033de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033e2:	68cc      	ldr	r4, [r1, #12]
{
 80033e4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80033e6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80033e8:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 80033ea:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80033ec:	f000 80e2 	beq.w	80035b4 <HAL_ADC_ConfigChannel+0x1d8>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033f0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80033f2:	2201      	movs	r2, #1
 80033f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80033f8:	689d      	ldr	r5, [r3, #8]
 80033fa:	076d      	lsls	r5, r5, #29
 80033fc:	d43b      	bmi.n	8003476 <HAL_ADC_ConfigChannel+0x9a>
    if (sConfig->Rank < 5U)
 80033fe:	684a      	ldr	r2, [r1, #4]
 8003400:	2a04      	cmp	r2, #4
 8003402:	d875      	bhi.n	80034f0 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->SQR1,
 8003404:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003408:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800340a:	680d      	ldr	r5, [r1, #0]
 800340c:	0052      	lsls	r2, r2, #1
 800340e:	f04f 0c1f 	mov.w	ip, #31
 8003412:	fa0c fc02 	lsl.w	ip, ip, r2
 8003416:	ea26 0c0c 	bic.w	ip, r6, ip
 800341a:	fa05 f202 	lsl.w	r2, r5, r2
 800341e:	ea4c 0202 	orr.w	r2, ip, r2
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003424:	689a      	ldr	r2, [r3, #8]
 8003426:	f012 0f0c 	tst.w	r2, #12
 800342a:	d137      	bne.n	800349c <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800342c:	2d09      	cmp	r5, #9
 800342e:	f240 80ad 	bls.w	800358c <HAL_ADC_ConfigChannel+0x1b0>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003432:	688f      	ldr	r7, [r1, #8]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800343a:	3e1e      	subs	r6, #30
 800343c:	f04f 0e07 	mov.w	lr, #7
 8003440:	fa07 fc06 	lsl.w	ip, r7, r6
 8003444:	fa0e f606 	lsl.w	r6, lr, r6
 8003448:	ea22 0206 	bic.w	r2, r2, r6
 800344c:	ea42 020c 	orr.w	r2, r2, ip
 8003450:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003452:	68da      	ldr	r2, [r3, #12]
    switch (sConfig->OffsetNumber)
 8003454:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003456:	694f      	ldr	r7, [r1, #20]
 8003458:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800345c:	0052      	lsls	r2, r2, #1
    switch (sConfig->OffsetNumber)
 800345e:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003460:	fa07 f202 	lsl.w	r2, r7, r2
    switch (sConfig->OffsetNumber)
 8003464:	2e03      	cmp	r6, #3
 8003466:	f200 811d 	bhi.w	80036a4 <HAL_ADC_ConfigChannel+0x2c8>
 800346a:	e8df f016 	tbh	[pc, r6, lsl #1]
 800346e:	000e      	.short	0x000e
 8003470:	00f500ff 	.word	0x00f500ff
 8003474:	00eb      	.short	0x00eb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003476:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003478:	f043 0320 	orr.w	r3, r3, #32
 800347c:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800347e:	2300      	movs	r3, #0
 8003480:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003484:	4610      	mov	r0, r2
 8003486:	b003      	add	sp, #12
 8003488:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 800348a:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 800348c:	4e9b      	ldr	r6, [pc, #620]	; (80036fc <HAL_ADC_ConfigChannel+0x320>)
 800348e:	403e      	ands	r6, r7
 8003490:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8003494:	4332      	orrs	r2, r6
 8003496:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800349a:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	f002 0203 	and.w	r2, r2, #3
 80034a2:	2a01      	cmp	r2, #1
 80034a4:	f000 8081 	beq.w	80035aa <HAL_ADC_ConfigChannel+0x1ce>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80034a8:	2c01      	cmp	r4, #1
 80034aa:	f000 8087 	beq.w	80035bc <HAL_ADC_ConfigChannel+0x1e0>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80034ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034b2:	2101      	movs	r1, #1
 80034b4:	40a9      	lsls	r1, r5
 80034b6:	ea22 0201 	bic.w	r2, r2, r1
 80034ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034be:	2d10      	cmp	r5, #16
 80034c0:	d02d      	beq.n	800351e <HAL_ADC_ConfigChannel+0x142>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80034c2:	2d11      	cmp	r5, #17
 80034c4:	f040 8090 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x20c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80034c8:	4a8d      	ldr	r2, [pc, #564]	; (8003700 <HAL_ADC_ConfigChannel+0x324>)
 80034ca:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80034cc:	01d6      	lsls	r6, r2, #7
 80034ce:	d44a      	bmi.n	8003566 <HAL_ADC_ConfigChannel+0x18a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	f002 0203 	and.w	r2, r2, #3
 80034d6:	2a01      	cmp	r2, #1
 80034d8:	f000 80dc 	beq.w	8003694 <HAL_ADC_ConfigChannel+0x2b8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80034dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e0:	d141      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x18a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80034e2:	4987      	ldr	r1, [pc, #540]	; (8003700 <HAL_ADC_ConfigChannel+0x324>)
 80034e4:	688b      	ldr	r3, [r1, #8]
 80034e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ea:	2200      	movs	r2, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80034ec:	608b      	str	r3, [r1, #8]
 80034ee:	e7c6      	b.n	800347e <HAL_ADC_ConfigChannel+0xa2>
    else if (sConfig->Rank < 10U)
 80034f0:	2a09      	cmp	r2, #9
 80034f2:	d93a      	bls.n	800356a <HAL_ADC_ConfigChannel+0x18e>
    else if (sConfig->Rank < 15U)
 80034f4:	2a0e      	cmp	r2, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80034f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80034fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
    else if (sConfig->Rank < 15U)
 80034fe:	f200 8093 	bhi.w	8003628 <HAL_ADC_ConfigChannel+0x24c>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003502:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8003504:	680d      	ldr	r5, [r1, #0]
 8003506:	3a3c      	subs	r2, #60	; 0x3c
 8003508:	f04f 0c1f 	mov.w	ip, #31
 800350c:	fa0c fc02 	lsl.w	ip, ip, r2
 8003510:	ea26 060c 	bic.w	r6, r6, ip
 8003514:	fa05 f202 	lsl.w	r2, r5, r2
 8003518:	4332      	orrs	r2, r6
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
 800351c:	e782      	b.n	8003424 <HAL_ADC_ConfigChannel+0x48>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800351e:	4a78      	ldr	r2, [pc, #480]	; (8003700 <HAL_ADC_ConfigChannel+0x324>)
 8003520:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003522:	0217      	lsls	r7, r2, #8
 8003524:	d41f      	bmi.n	8003566 <HAL_ADC_ConfigChannel+0x18a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	f002 0203 	and.w	r2, r2, #3
 800352c:	2a01      	cmp	r2, #1
 800352e:	f000 80a7 	beq.w	8003680 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003536:	d116      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x18a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003538:	4a71      	ldr	r2, [pc, #452]	; (8003700 <HAL_ADC_ConfigChannel+0x324>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800353a:	4c72      	ldr	r4, [pc, #456]	; (8003704 <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800353c:	6893      	ldr	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800353e:	4972      	ldr	r1, [pc, #456]	; (8003708 <HAL_ADC_ConfigChannel+0x32c>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003540:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003544:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	fba1 2303 	umull	r2, r3, r1, r3
 800354c:	0c9b      	lsrs	r3, r3, #18
 800354e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003556:	9b01      	ldr	r3, [sp, #4]
 8003558:	b12b      	cbz	r3, 8003566 <HAL_ADC_ConfigChannel+0x18a>
            wait_loop_index--;
 800355a:	9b01      	ldr	r3, [sp, #4]
 800355c:	3b01      	subs	r3, #1
 800355e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003560:	9b01      	ldr	r3, [sp, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f9      	bne.n	800355a <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003566:	2200      	movs	r2, #0
 8003568:	e789      	b.n	800347e <HAL_ADC_ConfigChannel+0xa2>
      MODIFY_REG(hadc->Instance->SQR2,
 800356a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800356e:	0052      	lsls	r2, r2, #1
 8003570:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8003572:	680d      	ldr	r5, [r1, #0]
 8003574:	3a1e      	subs	r2, #30
 8003576:	f04f 0c1f 	mov.w	ip, #31
 800357a:	fa0c fc02 	lsl.w	ip, ip, r2
 800357e:	ea26 060c 	bic.w	r6, r6, ip
 8003582:	fa05 f202 	lsl.w	r2, r5, r2
 8003586:	4332      	orrs	r2, r6
 8003588:	635a      	str	r2, [r3, #52]	; 0x34
 800358a:	e74b      	b.n	8003424 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	688e      	ldr	r6, [r1, #8]
 8003590:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8003594:	f04f 0c07 	mov.w	ip, #7
 8003598:	fa0c fc0e 	lsl.w	ip, ip, lr
 800359c:	fa06 f60e 	lsl.w	r6, r6, lr
 80035a0:	ea22 020c 	bic.w	r2, r2, ip
 80035a4:	4332      	orrs	r2, r6
 80035a6:	615a      	str	r2, [r3, #20]
 80035a8:	e753      	b.n	8003452 <HAL_ADC_ConfigChannel+0x76>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	07d2      	lsls	r2, r2, #31
 80035ae:	f57f af7b 	bpl.w	80034a8 <HAL_ADC_ConfigChannel+0xcc>
 80035b2:	e7d8      	b.n	8003566 <HAL_ADC_ConfigChannel+0x18a>
  __HAL_LOCK(hadc);
 80035b4:	2202      	movs	r2, #2
}
 80035b6:	4610      	mov	r0, r2
 80035b8:	b003      	add	sp, #12
 80035ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035c0:	40ac      	lsls	r4, r5
 80035c2:	4314      	orrs	r4, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80035c4:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035c6:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80035ca:	d91f      	bls.n	800360c <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR2,
 80035cc:	688c      	ldr	r4, [r1, #8]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80035d4:	391b      	subs	r1, #27
 80035d6:	2607      	movs	r6, #7
 80035d8:	408c      	lsls	r4, r1
 80035da:	fa06 f101 	lsl.w	r1, r6, r1
 80035de:	ea22 0201 	bic.w	r2, r2, r1
 80035e2:	4322      	orrs	r2, r4
 80035e4:	619a      	str	r2, [r3, #24]
 80035e6:	e76a      	b.n	80034be <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80035e8:	2d12      	cmp	r5, #18
 80035ea:	d1bc      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x18a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80035ec:	4a44      	ldr	r2, [pc, #272]	; (8003700 <HAL_ADC_ConfigChannel+0x324>)
 80035ee:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80035f0:	0255      	lsls	r5, r2, #9
 80035f2:	d4b8      	bmi.n	8003566 <HAL_ADC_ConfigChannel+0x18a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	f002 0203 	and.w	r2, r2, #3
 80035fa:	2a01      	cmp	r2, #1
 80035fc:	d04e      	beq.n	800369c <HAL_ADC_ConfigChannel+0x2c0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80035fe:	4940      	ldr	r1, [pc, #256]	; (8003700 <HAL_ADC_ConfigChannel+0x324>)
 8003600:	688b      	ldr	r3, [r1, #8]
 8003602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003606:	2200      	movs	r2, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003608:	608b      	str	r3, [r1, #8]
 800360a:	e738      	b.n	800347e <HAL_ADC_ConfigChannel+0xa2>
        MODIFY_REG(hadc->Instance->SMPR1,
 800360c:	6889      	ldr	r1, [r1, #8]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	3501      	adds	r5, #1
 8003612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003616:	2407      	movs	r4, #7
 8003618:	40a9      	lsls	r1, r5
 800361a:	fa04 f505 	lsl.w	r5, r4, r5
 800361e:	ea22 0205 	bic.w	r2, r2, r5
 8003622:	430a      	orrs	r2, r1
 8003624:	615a      	str	r2, [r3, #20]
 8003626:	e79e      	b.n	8003566 <HAL_ADC_ConfigChannel+0x18a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003628:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800362a:	680d      	ldr	r5, [r1, #0]
 800362c:	3a5a      	subs	r2, #90	; 0x5a
 800362e:	f04f 0c1f 	mov.w	ip, #31
 8003632:	fa0c fc02 	lsl.w	ip, ip, r2
 8003636:	ea26 060c 	bic.w	r6, r6, ip
 800363a:	fa05 f202 	lsl.w	r2, r5, r2
 800363e:	4332      	orrs	r2, r6
 8003640:	63da      	str	r2, [r3, #60]	; 0x3c
 8003642:	e6ef      	b.n	8003424 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003644:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 8003646:	4e2d      	ldr	r6, [pc, #180]	; (80036fc <HAL_ADC_ConfigChannel+0x320>)
 8003648:	403e      	ands	r6, r7
 800364a:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 800364e:	4332      	orrs	r2, r6
 8003650:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003654:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8003656:	e721      	b.n	800349c <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003658:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 800365a:	4e28      	ldr	r6, [pc, #160]	; (80036fc <HAL_ADC_ConfigChannel+0x320>)
 800365c:	403e      	ands	r6, r7
 800365e:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8003662:	4332      	orrs	r2, r6
 8003664:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003668:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800366a:	e717      	b.n	800349c <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 800366c:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 800366e:	4e23      	ldr	r6, [pc, #140]	; (80036fc <HAL_ADC_ConfigChannel+0x320>)
 8003670:	403e      	ands	r6, r7
 8003672:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8003676:	4332      	orrs	r2, r6
 8003678:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800367c:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800367e:	e70d      	b.n	800349c <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	07d4      	lsls	r4, r2, #31
 8003684:	f57f af55 	bpl.w	8003532 <HAL_ADC_ConfigChannel+0x156>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003688:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800368a:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 800368e:	2201      	movs	r2, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003690:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003692:	e6f4      	b.n	800347e <HAL_ADC_ConfigChannel+0xa2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	07d2      	lsls	r2, r2, #31
 8003698:	d4f6      	bmi.n	8003688 <HAL_ADC_ConfigChannel+0x2ac>
 800369a:	e71f      	b.n	80034dc <HAL_ADC_ConfigChannel+0x100>
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	07d9      	lsls	r1, r3, #31
 80036a0:	d5ad      	bpl.n	80035fe <HAL_ADC_ConfigChannel+0x222>
 80036a2:	e7f1      	b.n	8003688 <HAL_ADC_ConfigChannel+0x2ac>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036a6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80036aa:	ebb2 6f85 	cmp.w	r2, r5, lsl #26
 80036ae:	ea4f 6685 	mov.w	r6, r5, lsl #26
 80036b2:	d014      	beq.n	80036de <HAL_ADC_ConfigChannel+0x302>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036b6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80036ba:	4296      	cmp	r6, r2
 80036bc:	d014      	beq.n	80036e8 <HAL_ADC_ConfigChannel+0x30c>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036c0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80036c4:	4296      	cmp	r6, r2
 80036c6:	d014      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x316>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80036c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036ca:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80036ce:	4296      	cmp	r6, r2
 80036d0:	f47f aee4 	bne.w	800349c <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80036d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036da:	66da      	str	r2, [r3, #108]	; 0x6c
 80036dc:	e6de      	b.n	800349c <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80036de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60
 80036e6:	e7e5      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x2d8>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80036e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036ee:	665a      	str	r2, [r3, #100]	; 0x64
 80036f0:	e7e5      	b.n	80036be <HAL_ADC_ConfigChannel+0x2e2>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80036f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80036f4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80036f8:	669a      	str	r2, [r3, #104]	; 0x68
 80036fa:	e7e5      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x2ec>
 80036fc:	83fff000 	.word	0x83fff000
 8003700:	50000300 	.word	0x50000300
 8003704:	200005dc 	.word	0x200005dc
 8003708:	431bde83 	.word	0x431bde83

0800370c <HAL_ADCEx_InjectedConfigChannel>:
{
 800370c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800370e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003712:	68cc      	ldr	r4, [r1, #12]
{
 8003714:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8003716:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003718:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 800371a:	9201      	str	r2, [sp, #4]
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800371c:	6902      	ldr	r2, [r0, #16]
  __HAL_LOCK(hadc);
 800371e:	f000 818e 	beq.w	8003a3e <HAL_ADCEx_InjectedConfigChannel+0x332>
 8003722:	2301      	movs	r3, #1
 8003724:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003728:	b31a      	cbz	r2, 8003772 <HAL_ADCEx_InjectedConfigChannel+0x66>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 800372a:	698b      	ldr	r3, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800372c:	2b01      	cmp	r3, #1
 800372e:	d020      	beq.n	8003772 <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003730:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8003732:	2d00      	cmp	r5, #0
 8003734:	f040 811d 	bne.w	8003972 <HAL_ADCEx_InjectedConfigChannel+0x266>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003738:	6a0a      	ldr	r2, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 800373a:	64c3      	str	r3, [r0, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800373c:	2a01      	cmp	r2, #1
 800373e:	f000 8189 	beq.w	8003a54 <HAL_ADCEx_InjectedConfigChannel+0x348>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8003742:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8003744:	3b01      	subs	r3, #1
 8003746:	432a      	orrs	r2, r5
 8003748:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800374a:	684d      	ldr	r5, [r1, #4]
 800374c:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 800374e:	64c3      	str	r3, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003754:	006d      	lsls	r5, r5, #1
 8003756:	3502      	adds	r5, #2
 8003758:	fa06 f305 	lsl.w	r3, r6, r5
 800375c:	261f      	movs	r6, #31
 800375e:	fa06 f505 	lsl.w	r5, r6, r5
 8003762:	ea22 0205 	bic.w	r2, r2, r5
 8003766:	431a      	orrs	r2, r3
 8003768:	6482      	str	r2, [r0, #72]	; 0x48
        MODIFY_REG(hadc->Instance->JSQR              ,
 800376a:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800376c:	f04f 0c00 	mov.w	ip, #0
 8003770:	e00a      	b.n	8003788 <HAL_ADCEx_InjectedConfigChannel+0x7c>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003772:	684b      	ldr	r3, [r1, #4]
 8003774:	2b01      	cmp	r3, #1
 8003776:	f000 80e8 	beq.w	800394a <HAL_ADCEx_InjectedConfigChannel+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377a:	6c02      	ldr	r2, [r0, #64]	; 0x40
        MODIFY_REG(hadc->Instance->JSQR              ,
 800377c:	6803      	ldr	r3, [r0, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800377e:	f042 0220 	orr.w	r2, r2, #32
 8003782:	6402      	str	r2, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8003784:	f04f 0c01 	mov.w	ip, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	0712      	lsls	r2, r2, #28
 800378c:	d40d      	bmi.n	80037aa <HAL_ADCEx_InjectedConfigChannel+0x9e>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800378e:	7f4a      	ldrb	r2, [r1, #29]
 8003790:	2a00      	cmp	r2, #0
 8003792:	f040 80c9 	bne.w	8003928 <HAL_ADCEx_InjectedConfigChannel+0x21c>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003796:	7f0a      	ldrb	r2, [r1, #28]
 8003798:	68dd      	ldr	r5, [r3, #12]
 800379a:	7f8e      	ldrb	r6, [r1, #30]
 800379c:	0512      	lsls	r2, r2, #20
 800379e:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80037a2:	ea42 5246 	orr.w	r2, r2, r6, lsl #21
 80037a6:	432a      	orrs	r2, r5
 80037a8:	60da      	str	r2, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	f012 0f0c 	tst.w	r2, #12
 80037b0:	d13a      	bne.n	8003828 <HAL_ADCEx_InjectedConfigChannel+0x11c>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80037b2:	6a0a      	ldr	r2, [r1, #32]
 80037b4:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80037bc:	f000 813a 	beq.w	8003a34 <HAL_ADCEx_InjectedConfigChannel+0x328>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80037c0:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80037c2:	7f4a      	ldrb	r2, [r1, #29]
 80037c4:	2a01      	cmp	r2, #1
 80037c6:	f000 811c 	beq.w	8003a02 <HAL_ADCEx_InjectedConfigChannel+0x2f6>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 80037ca:	680e      	ldr	r6, [r1, #0]
 80037cc:	2e09      	cmp	r6, #9
 80037ce:	f240 809d 	bls.w	800390c <HAL_ADCEx_InjectedConfigChannel+0x200>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 80037d2:	688d      	ldr	r5, [r1, #8]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
 80037da:	f1ae 0e1e 	sub.w	lr, lr, #30
 80037de:	2707      	movs	r7, #7
 80037e0:	fa05 f50e 	lsl.w	r5, r5, lr
 80037e4:	fa07 fe0e 	lsl.w	lr, r7, lr
 80037e8:	ea22 020e 	bic.w	r2, r2, lr
 80037ec:	432a      	orrs	r2, r5
 80037ee:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80037f0:	68da      	ldr	r2, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 80037f2:	690d      	ldr	r5, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80037f4:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 80037f8:	694a      	ldr	r2, [r1, #20]
 80037fa:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    switch (sConfigInjected->InjectedOffsetNumber)
 80037fe:	3d01      	subs	r5, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003800:	fa02 f20e 	lsl.w	r2, r2, lr
    switch (sConfigInjected->InjectedOffsetNumber)
 8003804:	2d03      	cmp	r5, #3
 8003806:	f200 813b 	bhi.w	8003a80 <HAL_ADCEx_InjectedConfigChannel+0x374>
 800380a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800380e:	0004      	.short	0x0004
 8003810:	00e600f0 	.word	0x00e600f0
 8003814:	00dc      	.short	0x00dc
      MODIFY_REG(hadc->Instance->OFR1                               ,
 8003816:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 800381a:	4daa      	ldr	r5, [pc, #680]	; (8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 800381c:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 800381e:	4035      	ands	r5, r6
 8003820:	432a      	orrs	r2, r5
 8003822:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003826:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	f002 0203 	and.w	r2, r2, #3
 800382e:	2a01      	cmp	r2, #1
 8003830:	d023      	beq.n	800387a <HAL_ADCEx_InjectedConfigChannel+0x16e>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003832:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003834:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003836:	d026      	beq.n	8003886 <HAL_ADCEx_InjectedConfigChannel+0x17a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003838:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800383c:	2401      	movs	r4, #1
 800383e:	4094      	lsls	r4, r2
 8003840:	ea21 0104 	bic.w	r1, r1, r4
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003844:	2a10      	cmp	r2, #16
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003846:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800384a:	d034      	beq.n	80038b6 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800384c:	2a11      	cmp	r2, #17
 800384e:	f040 80de 	bne.w	8003a0e <HAL_ADCEx_InjectedConfigChannel+0x302>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003852:	4a9d      	ldr	r2, [pc, #628]	; (8003ac8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8003854:	6892      	ldr	r2, [r2, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 8003856:	01d5      	lsls	r5, r2, #7
 8003858:	d409      	bmi.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	f002 0203 	and.w	r2, r2, #3
 8003860:	2a01      	cmp	r2, #1
 8003862:	f000 8105 	beq.w	8003a70 <HAL_ADCEx_InjectedConfigChannel+0x364>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800386a:	f000 80ed 	beq.w	8003a48 <HAL_ADCEx_InjectedConfigChannel+0x33c>
  __HAL_UNLOCK(hadc);
 800386e:	2300      	movs	r3, #0
 8003870:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003874:	4660      	mov	r0, ip
 8003876:	b003      	add	sp, #12
 8003878:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	07d7      	lsls	r7, r2, #31
 800387e:	d4f6      	bmi.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003880:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003882:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003884:	d1d8      	bne.n	8003838 <HAL_ADCEx_InjectedConfigChannel+0x12c>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003886:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800388a:	4094      	lsls	r4, r2
 800388c:	432c      	orrs	r4, r5
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800388e:	2a09      	cmp	r2, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003890:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003894:	f240 8089 	bls.w	80039aa <HAL_ADCEx_InjectedConfigChannel+0x29e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003898:	688d      	ldr	r5, [r1, #8]
 800389a:	6999      	ldr	r1, [r3, #24]
 800389c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 80038a0:	3c1b      	subs	r4, #27
 80038a2:	2607      	movs	r6, #7
 80038a4:	40a5      	lsls	r5, r4
 80038a6:	fa06 f404 	lsl.w	r4, r6, r4
 80038aa:	ea21 0104 	bic.w	r1, r1, r4
 80038ae:	4329      	orrs	r1, r5
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80038b0:	2a10      	cmp	r2, #16
        MODIFY_REG(hadc->Instance->SMPR2,
 80038b2:	6199      	str	r1, [r3, #24]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80038b4:	d1ca      	bne.n	800384c <HAL_ADCEx_InjectedConfigChannel+0x140>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80038b6:	4a84      	ldr	r2, [pc, #528]	; (8003ac8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 80038b8:	6892      	ldr	r2, [r2, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80038ba:	0216      	lsls	r6, r2, #8
 80038bc:	d4d7      	bmi.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	f002 0203 	and.w	r2, r2, #3
 80038c4:	2a01      	cmp	r2, #1
 80038c6:	f000 80c8 	beq.w	8003a5a <HAL_ADCEx_InjectedConfigChannel+0x34e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ce:	d1ce      	bne.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80038d0:	4a7d      	ldr	r2, [pc, #500]	; (8003ac8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038d2:	497e      	ldr	r1, [pc, #504]	; (8003acc <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80038d4:	6893      	ldr	r3, [r2, #8]
 80038d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038da:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038dc:	f1a2 624e 	sub.w	r2, r2, #216006656	; 0xce00000
 80038e0:	680b      	ldr	r3, [r1, #0]
 80038e2:	f5a2 2284 	sub.w	r2, r2, #270336	; 0x42000
 80038e6:	f2a2 427d 	subw	r2, r2, #1149	; 0x47d
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0c9b      	lsrs	r3, r3, #18
 80038f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80038f8:	9b01      	ldr	r3, [sp, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0b7      	beq.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
            wait_loop_index--;
 80038fe:	9b01      	ldr	r3, [sp, #4]
 8003900:	3b01      	subs	r3, #1
 8003902:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003904:	9b01      	ldr	r3, [sp, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f9      	bne.n	80038fe <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 800390a:	e7b0      	b.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	688d      	ldr	r5, [r1, #8]
 8003910:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8003914:	f04f 0e07 	mov.w	lr, #7
 8003918:	fa0e fe07 	lsl.w	lr, lr, r7
 800391c:	40bd      	lsls	r5, r7
 800391e:	ea22 020e 	bic.w	r2, r2, lr
 8003922:	432a      	orrs	r2, r5
 8003924:	615a      	str	r2, [r3, #20]
 8003926:	e763      	b.n	80037f0 <HAL_ADCEx_InjectedConfigChannel+0xe4>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	7f8d      	ldrb	r5, [r1, #30]
 800392c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003930:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 8003934:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003936:	7f0a      	ldrb	r2, [r1, #28]
 8003938:	2a01      	cmp	r2, #1
 800393a:	f47f af36 	bne.w	80037aa <HAL_ADCEx_InjectedConfigChannel+0x9e>
        tmp_hal_status = HAL_ERROR;
 800393e:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003940:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003942:	f042 0220 	orr.w	r2, r2, #32
 8003946:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003948:	e72f      	b.n	80037aa <HAL_ADCEx_InjectedConfigChannel+0x9e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800394a:	6a0b      	ldr	r3, [r1, #32]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 800394c:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR           ,
 800394e:	4e60      	ldr	r6, [pc, #384]	; (8003ad0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003950:	2b01      	cmp	r3, #1
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 8003952:	bf1e      	ittt	ne
 8003954:	6a4d      	ldrne	r5, [r1, #36]	; 0x24
 8003956:	432b      	orrne	r3, r5
 8003958:	ea43 2202 	orrne.w	r2, r3, r2, lsl #8
      MODIFY_REG(hadc->Instance->JSQR           ,
 800395c:	6803      	ldr	r3, [r0, #0]
 800395e:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 8003960:	bf08      	it	eq
 8003962:	0212      	lsleq	r2, r2, #8
      MODIFY_REG(hadc->Instance->JSQR           ,
 8003964:	4035      	ands	r5, r6
 8003966:	4315      	orrs	r5, r2
 8003968:	64dd      	str	r5, [r3, #76]	; 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396a:	f04f 0c00 	mov.w	ip, #0
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 800396e:	6482      	str	r2, [r0, #72]	; 0x48
 8003970:	e70a      	b.n	8003788 <HAL_ADCEx_InjectedConfigChannel+0x7c>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003972:	684b      	ldr	r3, [r1, #4]
 8003974:	680e      	ldr	r6, [r1, #0]
 8003976:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003978:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	3302      	adds	r3, #2
 8003980:	271f      	movs	r7, #31
 8003982:	409e      	lsls	r6, r3
 8003984:	fa07 f303 	lsl.w	r3, r7, r3
 8003988:	ea22 0203 	bic.w	r2, r2, r3
      hadc->InjectionConfig.ChannelCount --;
 800398c:	3d01      	subs	r5, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800398e:	4332      	orrs	r2, r6
      hadc->InjectionConfig.ChannelCount --;
 8003990:	64c5      	str	r5, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003992:	6482      	str	r2, [r0, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003994:	2d00      	cmp	r5, #0
 8003996:	f47f aee8 	bne.w	800376a <HAL_ADCEx_InjectedConfigChannel+0x5e>
        MODIFY_REG(hadc->Instance->JSQR              ,
 800399a:	6803      	ldr	r3, [r0, #0]
 800399c:	4e4c      	ldr	r6, [pc, #304]	; (8003ad0 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800399e:	46ac      	mov	ip, r5
        MODIFY_REG(hadc->Instance->JSQR              ,
 80039a0:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 80039a2:	4035      	ands	r5, r6
 80039a4:	432a      	orrs	r2, r5
 80039a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80039a8:	e6ee      	b.n	8003788 <HAL_ADCEx_InjectedConfigChannel+0x7c>
        MODIFY_REG(hadc->Instance->SMPR1,
 80039aa:	688c      	ldr	r4, [r1, #8]
 80039ac:	3201      	adds	r2, #1
 80039ae:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80039b2:	2507      	movs	r5, #7
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	408c      	lsls	r4, r1
 80039b8:	fa05 f101 	lsl.w	r1, r5, r1
 80039bc:	ea22 0201 	bic.w	r2, r2, r1
 80039c0:	4322      	orrs	r2, r4
 80039c2:	615a      	str	r2, [r3, #20]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80039c4:	e753      	b.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 80039c6:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80039ca:	4d3e      	ldr	r5, [pc, #248]	; (8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 80039cc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80039ce:	4035      	ands	r5, r6
 80039d0:	432a      	orrs	r2, r5
 80039d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80039d6:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 80039d8:	e726      	b.n	8003828 <HAL_ADCEx_InjectedConfigChannel+0x11c>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 80039da:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80039de:	4d39      	ldr	r5, [pc, #228]	; (8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 80039e0:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 80039e2:	4035      	ands	r5, r6
 80039e4:	432a      	orrs	r2, r5
 80039e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80039ea:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80039ec:	e71c      	b.n	8003828 <HAL_ADCEx_InjectedConfigChannel+0x11c>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 80039ee:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80039f2:	4d34      	ldr	r5, [pc, #208]	; (8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 80039f4:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 80039f6:	4035      	ands	r5, r6
 80039f8:	432a      	orrs	r2, r5
 80039fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80039fe:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8003a00:	e712      	b.n	8003828 <HAL_ADCEx_InjectedConfigChannel+0x11c>
        tmp_hal_status = HAL_ERROR;
 8003a02:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a04:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003a06:	f042 0220 	orr.w	r2, r2, #32
 8003a0a:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003a0c:	e6dd      	b.n	80037ca <HAL_ADCEx_InjectedConfigChannel+0xbe>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003a0e:	2a12      	cmp	r2, #18
 8003a10:	f47f af2d 	bne.w	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003a14:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8003a16:	6892      	ldr	r2, [r2, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 8003a18:	0254      	lsls	r4, r2, #9
 8003a1a:	f53f af28 	bmi.w	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	f002 0203 	and.w	r2, r2, #3
 8003a24:	2a01      	cmp	r2, #1
 8003a26:	d027      	beq.n	8003a78 <HAL_ADCEx_InjectedConfigChannel+0x36c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003a28:	4a27      	ldr	r2, [pc, #156]	; (8003ac8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8003a2a:	6893      	ldr	r3, [r2, #8]
 8003a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a30:	6093      	str	r3, [r2, #8]
 8003a32:	e71c      	b.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003a34:	7f4d      	ldrb	r5, [r1, #29]
 8003a36:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	e6c5      	b.n	80037ca <HAL_ADCEx_InjectedConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 8003a3e:	f04f 0c02 	mov.w	ip, #2
}
 8003a42:	4660      	mov	r0, ip
 8003a44:	b003      	add	sp, #12
 8003a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003a48:	4a1f      	ldr	r2, [pc, #124]	; (8003ac8 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8003a4a:	6893      	ldr	r3, [r2, #8]
 8003a4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a50:	6093      	str	r3, [r2, #8]
 8003a52:	e70c      	b.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 8003a54:	1e5a      	subs	r2, r3, #1
 8003a56:	4613      	mov	r3, r2
 8003a58:	e677      	b.n	800374a <HAL_ADCEx_InjectedConfigChannel+0x3e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	07d2      	lsls	r2, r2, #31
 8003a5e:	f57f af34 	bpl.w	80038ca <HAL_ADCEx_InjectedConfigChannel+0x1be>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a62:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003a64:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8003a68:	f04f 0c01 	mov.w	ip, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6c:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8003a6e:	e6fe      	b.n	800386e <HAL_ADCEx_InjectedConfigChannel+0x162>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	07d1      	lsls	r1, r2, #31
 8003a74:	d4f5      	bmi.n	8003a62 <HAL_ADCEx_InjectedConfigChannel+0x356>
 8003a76:	e6f6      	b.n	8003866 <HAL_ADCEx_InjectedConfigChannel+0x15a>
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	07db      	lsls	r3, r3, #31
 8003a7c:	d5d4      	bpl.n	8003a28 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003a7e:	e7f0      	b.n	8003a62 <HAL_ADCEx_InjectedConfigChannel+0x356>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a82:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003a86:	ebb2 6f86 	cmp.w	r2, r6, lsl #26
 8003a8a:	ea4f 6586 	mov.w	r5, r6, lsl #26
 8003a8e:	d014      	beq.n	8003aba <HAL_ADCEx_InjectedConfigChannel+0x3ae>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003a90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a92:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003a96:	4295      	cmp	r5, r2
 8003a98:	d01c      	beq.n	8003ad4 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003a9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a9c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003aa0:	4295      	cmp	r5, r2
 8003aa2:	d01c      	beq.n	8003ade <HAL_ADCEx_InjectedConfigChannel+0x3d2>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003aa4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003aa6:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003aaa:	4295      	cmp	r5, r2
 8003aac:	f47f aebc 	bne.w	8003828 <HAL_ADCEx_InjectedConfigChannel+0x11c>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003ab0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ab2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ab6:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ab8:	e6b6      	b.n	8003828 <HAL_ADCEx_InjectedConfigChannel+0x11c>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003abc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ac0:	661a      	str	r2, [r3, #96]	; 0x60
 8003ac2:	e7e5      	b.n	8003a90 <HAL_ADCEx_InjectedConfigChannel+0x384>
 8003ac4:	83fff000 	.word	0x83fff000
 8003ac8:	50000300 	.word	0x50000300
 8003acc:	200005dc 	.word	0x200005dc
 8003ad0:	82082000 	.word	0x82082000
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003ad4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ad6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ada:	665a      	str	r2, [r3, #100]	; 0x64
 8003adc:	e7dd      	b.n	8003a9a <HAL_ADCEx_InjectedConfigChannel+0x38e>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003ade:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003ae0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003ae4:	669a      	str	r2, [r3, #104]	; 0x68
 8003ae6:	e7dd      	b.n	8003aa4 <HAL_ADCEx_InjectedConfigChannel+0x398>

08003ae8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae8:	4907      	ldr	r1, [pc, #28]	; (8003b08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003aea:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aec:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aee:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003af8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003afa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003b02:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <HAL_NVIC_SetPriority+0x74>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b14:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b16:	f1c3 0e07 	rsb	lr, r3, #7
 8003b1a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b1e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b22:	bf28      	it	cs
 8003b24:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b28:	f1bc 0f06 	cmp.w	ip, #6
 8003b2c:	d91b      	bls.n	8003b66 <HAL_NVIC_SetPriority+0x5a>
 8003b2e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b30:	f04f 3cff 	mov.w	ip, #4294967295
 8003b34:	fa0c fc03 	lsl.w	ip, ip, r3
 8003b38:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8003b40:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003b44:	ea21 010c 	bic.w	r1, r1, ip
 8003b48:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b4c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003b50:	db0c      	blt.n	8003b6c <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b52:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003b56:	0109      	lsls	r1, r1, #4
 8003b58:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003b5c:	b2c9      	uxtb	r1, r1
 8003b5e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003b62:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b66:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b68:	4613      	mov	r3, r2
 8003b6a:	e7e7      	b.n	8003b3c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_NVIC_SetPriority+0x78>)
 8003b6e:	f000 000f 	and.w	r0, r0, #15
 8003b72:	0109      	lsls	r1, r1, #4
 8003b74:	4403      	add	r3, r0
 8003b76:	b2c9      	uxtb	r1, r1
 8003b78:	7619      	strb	r1, [r3, #24]
 8003b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b7e:	bf00      	nop
 8003b80:	e000ed00 	.word	0xe000ed00
 8003b84:	e000ecfc 	.word	0xe000ecfc

08003b88 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	db08      	blt.n	8003b9e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8c:	0941      	lsrs	r1, r0, #5
 8003b8e:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <HAL_NVIC_EnableIRQ+0x18>)
 8003b90:	f000 001f 	and.w	r0, r0, #31
 8003b94:	2301      	movs	r3, #1
 8003b96:	fa03 f000 	lsl.w	r0, r3, r0
 8003b9a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003b9e:	4770      	bx	lr
 8003ba0:	e000e100 	.word	0xe000e100

08003ba4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba4:	3801      	subs	r0, #1
 8003ba6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003baa:	d210      	bcs.n	8003bce <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bac:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb2:	4c08      	ldr	r4, [pc, #32]	; (8003bd4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb6:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003bba:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bbe:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003bc6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bca:	6119      	str	r1, [r3, #16]
 8003bcc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003bce:	2001      	movs	r0, #1
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop

08003bdc <HAL_SYSTICK_IRQHandler>:
{
 8003bdc:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003bde:	f7ff fffb 	bl	8003bd8 <HAL_SYSTICK_Callback>
}
 8003be2:	bd08      	pop	{r3, pc}

08003be4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8003be4:	b188      	cbz	r0, 8003c0a <HAL_DAC_Init+0x26>
{ 
 8003be6:	b510      	push	{r4, lr}
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003be8:	7903      	ldrb	r3, [r0, #4]
 8003bea:	4604      	mov	r4, r0
 8003bec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bf0:	b13b      	cbz	r3, 8003c02 <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003bf2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bf4:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003bf6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bf8:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003bfa:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8003bfc:	7122      	strb	r2, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8003bfe:	4618      	mov	r0, r3
}
 8003c00:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003c02:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003c04:	f7fe fc9c 	bl	8002540 <HAL_DAC_MspInit>
 8003c08:	e7f3      	b.n	8003bf2 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 8003c0a:	2001      	movs	r0, #1
}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop

08003c10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003c10:	4603      	mov	r3, r0
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003c12:	7940      	ldrb	r0, [r0, #5]
 8003c14:	2801      	cmp	r0, #1
 8003c16:	d01d      	beq.n	8003c54 <HAL_DAC_ConfigChannel+0x44>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c18:	2002      	movs	r0, #2
{
 8003c1a:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c1c:	7118      	strb	r0, [r3, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8003c22:	681c      	ldr	r4, [r3, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c24:	4301      	orrs	r1, r0
  tmpreg1 = hdac->Instance->CR;
 8003c26:	6825      	ldr	r5, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003c28:	f640 70fe 	movw	r0, #4094	; 0xffe
 8003c2c:	4090      	lsls	r0, r2
 8003c2e:	ea25 0000 	bic.w	r0, r5, r0
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003c32:	4091      	lsls	r1, r2
 8003c34:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003c36:	6021      	str	r1, [r4, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003c38:	6821      	ldr	r1, [r4, #0]
 8003c3a:	20c0      	movs	r0, #192	; 0xc0
 8003c3c:	fa00 f202 	lsl.w	r2, r0, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c40:	2500      	movs	r5, #0
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003c42:	ea21 0202 	bic.w	r2, r1, r2
  hdac->State = HAL_DAC_STATE_READY;
 8003c46:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003c48:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8003c4a:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8003c4c:	715d      	strb	r5, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003c4e:	4628      	mov	r0, r5
}
 8003c50:	bc30      	pop	{r4, r5}
 8003c52:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8003c54:	2002      	movs	r0, #2
}
 8003c56:	4770      	bx	lr

08003c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5c:	680c      	ldr	r4, [r1, #0]
{
 8003c5e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c60:	2c00      	cmp	r4, #0
 8003c62:	f000 80c3 	beq.w	8003dec <HAL_GPIO_Init+0x194>
 8003c66:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c6a:	4e68      	ldr	r6, [pc, #416]	; (8003e0c <HAL_GPIO_Init+0x1b4>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c6c:	9100      	str	r1, [sp, #0]
  uint32_t position = 0x00u;
 8003c6e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c70:	f04f 0b01 	mov.w	fp, #1
 8003c74:	e067      	b.n	8003d46 <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c76:	2a03      	cmp	r2, #3
 8003c78:	f040 80b2 	bne.w	8003de0 <HAL_GPIO_Init+0x188>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c7c:	fa02 f20c 	lsl.w	r2, r2, ip
 8003c80:	ea6f 0e02 	mvn.w	lr, r2
      temp = GPIOx->MODER;
 8003c84:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003c86:	ea07 0e0e 	and.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c8a:	ea42 020e 	orr.w	r2, r2, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c8e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003c92:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c94:	d051      	beq.n	8003d3a <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	4f5e      	ldr	r7, [pc, #376]	; (8003e10 <HAL_GPIO_Init+0x1b8>)
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	61ba      	str	r2, [r7, #24]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	f002 0201 	and.w	r2, r2, #1
 8003ca6:	9203      	str	r2, [sp, #12]
 8003ca8:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003cb2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cb6:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8003cba:	f8d2 e008 	ldr.w	lr, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cbe:	00bf      	lsls	r7, r7, #2
 8003cc0:	210f      	movs	r1, #15
 8003cc2:	fa01 f807 	lsl.w	r8, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cc6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cca:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cce:	d010      	beq.n	8003cf2 <HAL_GPIO_Init+0x9a>
 8003cd0:	4950      	ldr	r1, [pc, #320]	; (8003e14 <HAL_GPIO_Init+0x1bc>)
 8003cd2:	4288      	cmp	r0, r1
 8003cd4:	f000 808d 	beq.w	8003df2 <HAL_GPIO_Init+0x19a>
 8003cd8:	494f      	ldr	r1, [pc, #316]	; (8003e18 <HAL_GPIO_Init+0x1c0>)
 8003cda:	4288      	cmp	r0, r1
 8003cdc:	f000 808e 	beq.w	8003dfc <HAL_GPIO_Init+0x1a4>
 8003ce0:	494e      	ldr	r1, [pc, #312]	; (8003e1c <HAL_GPIO_Init+0x1c4>)
 8003ce2:	4288      	cmp	r0, r1
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2103      	moveq	r1, #3
 8003ce8:	2105      	movne	r1, #5
 8003cea:	fa01 f707 	lsl.w	r7, r1, r7
 8003cee:	ea4e 0e07 	orr.w	lr, lr, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cf2:	f8c2 e008 	str.w	lr, [r2, #8]
        temp = EXTI->IMR;
 8003cf6:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
 8003cf8:	ea6f 0e0a 	mvn.w	lr, sl
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cfc:	03ef      	lsls	r7, r5, #15
        temp &= ~(iocurrent);
 8003cfe:	bf54      	ite	pl
 8003d00:	ea0e 0202 	andpl.w	r2, lr, r2
        {
          temp |= iocurrent;
 8003d04:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8003d08:	6032      	str	r2, [r6, #0]

        temp = EXTI->EMR;
 8003d0a:	6877      	ldr	r7, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d0c:	03a9      	lsls	r1, r5, #14
        temp &= ~(iocurrent);
 8003d0e:	bf54      	ite	pl
 8003d10:	ea0e 0707 	andpl.w	r7, lr, r7
        {
          temp |= iocurrent;
 8003d14:	ea4a 0707 	orrmi.w	r7, sl, r7
        }
        EXTI->EMR = temp;
 8003d18:	6077      	str	r7, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d1a:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d1c:	02ea      	lsls	r2, r5, #11
        temp &= ~(iocurrent);
 8003d1e:	bf54      	ite	pl
 8003d20:	ea0e 0707 	andpl.w	r7, lr, r7
        {
          temp |= iocurrent;
 8003d24:	ea4a 0707 	orrmi.w	r7, sl, r7
        }
        EXTI->RTSR = temp;
 8003d28:	60b7      	str	r7, [r6, #8]

        temp = EXTI->FTSR;
 8003d2a:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d2c:	02a9      	lsls	r1, r5, #10
        temp &= ~(iocurrent);
 8003d2e:	bf54      	ite	pl
 8003d30:	ea0e 0202 	andpl.w	r2, lr, r2
        {
          temp |= iocurrent;
 8003d34:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR = temp;
 8003d38:	60f2      	str	r2, [r6, #12]
      }
    }

    position++;
 8003d3a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d3c:	fa34 f203 	lsrs.w	r2, r4, r3
 8003d40:	f10c 0c02 	add.w	ip, ip, #2
 8003d44:	d052      	beq.n	8003dec <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d46:	fa0b f803 	lsl.w	r8, fp, r3
    if (iocurrent != 0x00u)
 8003d4a:	ea18 0a04 	ands.w	sl, r8, r4
 8003d4e:	d0f4      	beq.n	8003d3a <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d50:	9900      	ldr	r1, [sp, #0]
 8003d52:	684d      	ldr	r5, [r1, #4]
 8003d54:	f005 0203 	and.w	r2, r5, #3
 8003d58:	1e57      	subs	r7, r2, #1
 8003d5a:	2f01      	cmp	r7, #1
 8003d5c:	d88b      	bhi.n	8003c76 <HAL_GPIO_Init+0x1e>
        temp = GPIOx->OSPEEDR;
 8003d5e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d62:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d64:	2103      	movs	r1, #3
 8003d66:	fa01 fe0c 	lsl.w	lr, r1, ip
 8003d6a:	ea29 090e 	bic.w	r9, r9, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d6e:	fa07 f70c 	lsl.w	r7, r7, ip
 8003d72:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003d76:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003d78:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d7a:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003d82:	409f      	lsls	r7, r3
 8003d84:	ea47 0708 	orr.w	r7, r7, r8
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003d88:	ea6f 0e0e 	mvn.w	lr, lr
        GPIOx->OTYPER = temp;
 8003d8c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003d8e:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d90:	9900      	ldr	r1, [sp, #0]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003d92:	ea07 080e 	and.w	r8, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d96:	688f      	ldr	r7, [r1, #8]
 8003d98:	fa07 f70c 	lsl.w	r7, r7, ip
 8003d9c:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da0:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8003da2:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da4:	fa02 f20c 	lsl.w	r2, r2, ip
 8003da8:	f47f af6c 	bne.w	8003c84 <HAL_GPIO_Init+0x2c>
        temp = GPIOx->AFR[position >> 3u];
 8003dac:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8003db0:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003db4:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8003db8:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8003dbc:	9101      	str	r1, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dbe:	9900      	ldr	r1, [sp, #0]
 8003dc0:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dc2:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8003dc6:	210f      	movs	r1, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dc8:	fa07 f708 	lsl.w	r7, r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003dcc:	fa01 f808 	lsl.w	r8, r1, r8
 8003dd0:	9901      	ldr	r1, [sp, #4]
 8003dd2:	ea21 0808 	bic.w	r8, r1, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003dd6:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 8003dda:	f8c9 7020 	str.w	r7, [r9, #32]
 8003dde:	e751      	b.n	8003c84 <HAL_GPIO_Init+0x2c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003de0:	2103      	movs	r1, #3
 8003de2:	fa01 fe0c 	lsl.w	lr, r1, ip
 8003de6:	ea6f 0e0e 	mvn.w	lr, lr
 8003dea:	e7d0      	b.n	8003d8e <HAL_GPIO_Init+0x136>
  }
}
 8003dec:	b005      	add	sp, #20
 8003dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003df2:	fa0b f707 	lsl.w	r7, fp, r7
 8003df6:	ea4e 0e07 	orr.w	lr, lr, r7
 8003dfa:	e77a      	b.n	8003cf2 <HAL_GPIO_Init+0x9a>
 8003dfc:	f04f 0802 	mov.w	r8, #2
 8003e00:	fa08 f707 	lsl.w	r7, r8, r7
 8003e04:	ea4e 0e07 	orr.w	lr, lr, r7
 8003e08:	e773      	b.n	8003cf2 <HAL_GPIO_Init+0x9a>
 8003e0a:	bf00      	nop
 8003e0c:	40010400 	.word	0x40010400
 8003e10:	40021000 	.word	0x40021000
 8003e14:	48000400 	.word	0x48000400
 8003e18:	48000800 	.word	0x48000800
 8003e1c:	48000c00 	.word	0x48000c00

08003e20 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e20:	b10a      	cbz	r2, 8003e26 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e22:	6181      	str	r1, [r0, #24]
 8003e24:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e26:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop

08003e2c <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	f000 828c 	beq.w	800434a <HAL_RCC_OscConfig+0x51e>
{
 8003e32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e36:	6803      	ldr	r3, [r0, #0]
 8003e38:	07d9      	lsls	r1, r3, #31
{
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3e:	d54f      	bpl.n	8003ee0 <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003e40:	49b4      	ldr	r1, [pc, #720]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8003e42:	684a      	ldr	r2, [r1, #4]
 8003e44:	f002 020c 	and.w	r2, r2, #12
 8003e48:	2a04      	cmp	r2, #4
 8003e4a:	f000 816d 	beq.w	8004128 <HAL_RCC_OscConfig+0x2fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e4e:	684a      	ldr	r2, [r1, #4]
 8003e50:	f002 020c 	and.w	r2, r2, #12
 8003e54:	2a08      	cmp	r2, #8
 8003e56:	f000 8163 	beq.w	8004120 <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5a:	6863      	ldr	r3, [r4, #4]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d017      	beq.n	8003e92 <HAL_RCC_OscConfig+0x66>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 819c 	beq.w	80041a0 <HAL_RCC_OscConfig+0x374>
 8003e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e6c:	f000 8258 	beq.w	8004320 <HAL_RCC_OscConfig+0x4f4>
 8003e70:	4ba8      	ldr	r3, [pc, #672]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e80:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e82:	4aa4      	ldr	r2, [pc, #656]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8003e84:	68a1      	ldr	r1, [r4, #8]
 8003e86:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e88:	f023 030f 	bic.w	r3, r3, #15
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e92:	4aa0      	ldr	r2, [pc, #640]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8003e94:	6813      	ldr	r3, [r2, #0]
 8003e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9a:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e9c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003e9e:	68a1      	ldr	r1, [r4, #8]
 8003ea0:	f023 030f 	bic.w	r3, r3, #15
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7ff f95e 	bl	8003168 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eac:	4f99      	ldr	r7, [pc, #612]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8003eae:	4605      	mov	r5, r0
 8003eb0:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb4:	2601      	movs	r6, #1
 8003eb6:	e005      	b.n	8003ec4 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eb8:	f7ff f956 	bl	8003168 <HAL_GetTick>
 8003ebc:	1b40      	subs	r0, r0, r5
 8003ebe:	2864      	cmp	r0, #100	; 0x64
 8003ec0:	f200 816a 	bhi.w	8004198 <HAL_RCC_OscConfig+0x36c>
 8003ec4:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	fa98 f3a8 	rbit	r3, r8
 8003ece:	fab3 f383 	clz	r3, r3
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	fa06 f303 	lsl.w	r3, r6, r3
 8003eda:	4213      	tst	r3, r2
 8003edc:	d0ec      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	079f      	lsls	r7, r3, #30
 8003ee2:	d541      	bpl.n	8003f68 <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ee4:	4a8b      	ldr	r2, [pc, #556]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8003ee6:	6851      	ldr	r1, [r2, #4]
 8003ee8:	f011 0f0c 	tst.w	r1, #12
 8003eec:	f000 80c8 	beq.w	8004080 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ef0:	6851      	ldr	r1, [r2, #4]
 8003ef2:	f001 010c 	and.w	r1, r1, #12
 8003ef6:	2908      	cmp	r1, #8
 8003ef8:	f000 80be 	beq.w	8004078 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003efc:	6922      	ldr	r2, [r4, #16]
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	f000 81ad 	beq.w	800425e <HAL_RCC_OscConfig+0x432>
 8003f04:	2501      	movs	r5, #1
 8003f06:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f12:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f16:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	4f7e      	ldr	r7, [pc, #504]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
        __HAL_RCC_HSI_ENABLE();
 8003f1a:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8003f1c:	f7ff f924 	bl	8003168 <HAL_GetTick>
 8003f20:	f04f 0802 	mov.w	r8, #2
 8003f24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f26:	e005      	b.n	8003f34 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f28:	f7ff f91e 	bl	8003168 <HAL_GetTick>
 8003f2c:	1b80      	subs	r0, r0, r6
 8003f2e:	2802      	cmp	r0, #2
 8003f30:	f200 8132 	bhi.w	8004198 <HAL_RCC_OscConfig+0x36c>
 8003f34:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	fa98 f3a8 	rbit	r3, r8
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	fa05 f303 	lsl.w	r3, r5, r3
 8003f4a:	4213      	tst	r3, r2
 8003f4c:	d0ec      	beq.n	8003f28 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	6839      	ldr	r1, [r7, #0]
 8003f50:	22f8      	movs	r2, #248	; 0xf8
 8003f52:	fa92 f2a2 	rbit	r2, r2
 8003f56:	6963      	ldr	r3, [r4, #20]
 8003f58:	fab2 f282 	clz	r2, r2
 8003f5c:	4093      	lsls	r3, r2
 8003f5e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8003f62:	4313      	orrs	r3, r2
 8003f64:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	071d      	lsls	r5, r3, #28
 8003f6a:	d421      	bmi.n	8003fb0 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	0758      	lsls	r0, r3, #29
 8003f6e:	d54c      	bpl.n	800400a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f70:	4b68      	ldr	r3, [pc, #416]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	00d1      	lsls	r1, r2, #3
 8003f76:	f140 80c1 	bpl.w	80040fc <HAL_RCC_OscConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 8003f7a:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4d66      	ldr	r5, [pc, #408]	; (8004118 <HAL_RCC_OscConfig+0x2ec>)
 8003f80:	682b      	ldr	r3, [r5, #0]
 8003f82:	05da      	lsls	r2, r3, #23
 8003f84:	f140 80f8 	bpl.w	8004178 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	68e3      	ldr	r3, [r4, #12]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	f000 818d 	beq.w	80042aa <HAL_RCC_OscConfig+0x47e>
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 812e 	beq.w	80041f2 <HAL_RCC_OscConfig+0x3c6>
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	4b5e      	ldr	r3, [pc, #376]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8003f9a:	6a1a      	ldr	r2, [r3, #32]
 8003f9c:	f000 81cd 	beq.w	800433a <HAL_RCC_OscConfig+0x50e>
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	621a      	str	r2, [r3, #32]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	f022 0204 	bic.w	r2, r2, #4
 8003fac:	621a      	str	r2, [r3, #32]
 8003fae:	e181      	b.n	80042b4 <HAL_RCC_OscConfig+0x488>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fb0:	69a2      	ldr	r2, [r4, #24]
 8003fb2:	2a00      	cmp	r2, #0
 8003fb4:	d07b      	beq.n	80040ae <HAL_RCC_OscConfig+0x282>
 8003fb6:	2501      	movs	r5, #1
 8003fb8:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 8003fbc:	4b57      	ldr	r3, [pc, #348]	; (800411c <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	4f55      	ldr	r7, [pc, #340]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_ENABLE();
 8003fc0:	fab2 f282 	clz	r2, r2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f04f 0802 	mov.w	r8, #2
 8003fcc:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8003fce:	f7ff f8cb 	bl	8003168 <HAL_GetTick>
 8003fd2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd4:	e005      	b.n	8003fe2 <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd6:	f7ff f8c7 	bl	8003168 <HAL_GetTick>
 8003fda:	1b80      	subs	r0, r0, r6
 8003fdc:	2802      	cmp	r0, #2
 8003fde:	f200 80db 	bhi.w	8004198 <HAL_RCC_OscConfig+0x36c>
 8003fe2:	fa98 f3a8 	rbit	r3, r8
 8003fe6:	fa98 f3a8 	rbit	r3, r8
 8003fea:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	fa98 f3a8 	rbit	r3, r8
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	fa05 f303 	lsl.w	r3, r5, r3
 8004000:	4213      	tst	r3, r2
 8004002:	d0e8      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	0758      	lsls	r0, r3, #29
 8004008:	d4b2      	bmi.n	8003f70 <HAL_RCC_OscConfig+0x144>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800400a:	69e0      	ldr	r0, [r4, #28]
 800400c:	b380      	cbz	r0, 8004070 <HAL_RCC_OscConfig+0x244>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400e:	4d41      	ldr	r5, [pc, #260]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8004010:	686b      	ldr	r3, [r5, #4]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b08      	cmp	r3, #8
 8004018:	f000 8171 	beq.w	80042fe <HAL_RCC_OscConfig+0x4d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401c:	2802      	cmp	r0, #2
 800401e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004022:	f000 8194 	beq.w	800434e <HAL_RCC_OscConfig+0x522>
 8004026:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402a:	fab3 f383 	clz	r3, r3
 800402e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004032:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7ff f894 	bl	8003168 <HAL_GetTick>
 8004040:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8004044:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004046:	2601      	movs	r6, #1
 8004048:	e005      	b.n	8004056 <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404a:	f7ff f88d 	bl	8003168 <HAL_GetTick>
 800404e:	1b00      	subs	r0, r0, r4
 8004050:	2802      	cmp	r0, #2
 8004052:	f200 80a1 	bhi.w	8004198 <HAL_RCC_OscConfig+0x36c>
 8004056:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800405a:	682a      	ldr	r2, [r5, #0]
 800405c:	fa97 f3a7 	rbit	r3, r7
 8004060:	fab3 f383 	clz	r3, r3
 8004064:	f003 031f 	and.w	r3, r3, #31
 8004068:	fa06 f303 	lsl.w	r3, r6, r3
 800406c:	4213      	tst	r3, r2
 800406e:	d1ec      	bne.n	800404a <HAL_RCC_OscConfig+0x21e>
        }
      }
    }
  }

  return HAL_OK;
 8004070:	2000      	movs	r0, #0
}
 8004072:	b003      	add	sp, #12
 8004074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004078:	6852      	ldr	r2, [r2, #4]
 800407a:	03d6      	lsls	r6, r2, #15
 800407c:	f53f af3e 	bmi.w	8003efc <HAL_RCC_OscConfig+0xd0>
 8004080:	2202      	movs	r2, #2
 8004082:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4923      	ldr	r1, [pc, #140]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
 8004088:	6808      	ldr	r0, [r1, #0]
 800408a:	fa92 f2a2 	rbit	r2, r2
 800408e:	fab2 f282 	clz	r2, r2
 8004092:	f002 021f 	and.w	r2, r2, #31
 8004096:	2101      	movs	r1, #1
 8004098:	fa01 f202 	lsl.w	r2, r1, r2
 800409c:	4202      	tst	r2, r0
 800409e:	d05a      	beq.n	8004156 <HAL_RCC_OscConfig+0x32a>
 80040a0:	6922      	ldr	r2, [r4, #16]
 80040a2:	428a      	cmp	r2, r1
 80040a4:	d057      	beq.n	8004156 <HAL_RCC_OscConfig+0x32a>
        return HAL_ERROR;
 80040a6:	2001      	movs	r0, #1
}
 80040a8:	b003      	add	sp, #12
 80040aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040ae:	2601      	movs	r6, #1
 80040b0:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b6:	4f17      	ldr	r7, [pc, #92]	; (8004114 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_DISABLE();
 80040b8:	fab1 f181 	clz	r1, r1
 80040bc:	440b      	add	r3, r1
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	f04f 0802 	mov.w	r8, #2
 80040c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80040c6:	f7ff f84f 	bl	8003168 <HAL_GetTick>
 80040ca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040cc:	e004      	b.n	80040d8 <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040ce:	f7ff f84b 	bl	8003168 <HAL_GetTick>
 80040d2:	1b40      	subs	r0, r0, r5
 80040d4:	2802      	cmp	r0, #2
 80040d6:	d85f      	bhi.n	8004198 <HAL_RCC_OscConfig+0x36c>
 80040d8:	fa98 f3a8 	rbit	r3, r8
 80040dc:	fa98 f3a8 	rbit	r3, r8
 80040e0:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e6:	fa98 f3a8 	rbit	r3, r8
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	f003 031f 	and.w	r3, r3, #31
 80040f2:	fa06 f303 	lsl.w	r3, r6, r3
 80040f6:	4213      	tst	r3, r2
 80040f8:	d1e9      	bne.n	80040ce <HAL_RCC_OscConfig+0x2a2>
 80040fa:	e783      	b.n	8004004 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004102:	61da      	str	r2, [r3, #28]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800410e:	f04f 0801 	mov.w	r8, #1
 8004112:	e734      	b.n	8003f7e <HAL_RCC_OscConfig+0x152>
 8004114:	40021000 	.word	0x40021000
 8004118:	40007000 	.word	0x40007000
 800411c:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004120:	684a      	ldr	r2, [r1, #4]
 8004122:	03d2      	lsls	r2, r2, #15
 8004124:	f57f ae99 	bpl.w	8003e5a <HAL_RCC_OscConfig+0x2e>
 8004128:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800412c:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004130:	49b1      	ldr	r1, [pc, #708]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
 8004132:	6808      	ldr	r0, [r1, #0]
 8004134:	fa92 f2a2 	rbit	r2, r2
 8004138:	fab2 f282 	clz	r2, r2
 800413c:	f002 021f 	and.w	r2, r2, #31
 8004140:	2101      	movs	r1, #1
 8004142:	fa01 f202 	lsl.w	r2, r1, r2
 8004146:	4202      	tst	r2, r0
 8004148:	f43f aeca 	beq.w	8003ee0 <HAL_RCC_OscConfig+0xb4>
 800414c:	6862      	ldr	r2, [r4, #4]
 800414e:	2a00      	cmp	r2, #0
 8004150:	f47f aec6 	bne.w	8003ee0 <HAL_RCC_OscConfig+0xb4>
 8004154:	e7a7      	b.n	80040a6 <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004156:	4da8      	ldr	r5, [pc, #672]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
 8004158:	22f8      	movs	r2, #248	; 0xf8
 800415a:	6828      	ldr	r0, [r5, #0]
 800415c:	fa92 f2a2 	rbit	r2, r2
 8004160:	fab2 f182 	clz	r1, r2
 8004164:	6962      	ldr	r2, [r4, #20]
 8004166:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800416a:	408a      	lsls	r2, r1
 800416c:	4302      	orrs	r2, r0
 800416e:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004170:	071d      	lsls	r5, r3, #28
 8004172:	f57f aefb 	bpl.w	8003f6c <HAL_RCC_OscConfig+0x140>
 8004176:	e71b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x184>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004178:	682b      	ldr	r3, [r5, #0]
 800417a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800417e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004180:	f7fe fff2 	bl	8003168 <HAL_GetTick>
 8004184:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	05db      	lsls	r3, r3, #23
 800418a:	f53f aefd 	bmi.w	8003f88 <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800418e:	f7fe ffeb 	bl	8003168 <HAL_GetTick>
 8004192:	1b80      	subs	r0, r0, r6
 8004194:	2864      	cmp	r0, #100	; 0x64
 8004196:	d9f6      	bls.n	8004186 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8004198:	2003      	movs	r0, #3
}
 800419a:	b003      	add	sp, #12
 800419c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a0:	4d95      	ldr	r5, [pc, #596]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
 80041a2:	682b      	ldr	r3, [r5, #0]
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	682b      	ldr	r3, [r5, #0]
 80041ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b0:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80041b4:	68a2      	ldr	r2, [r4, #8]
 80041b6:	f023 030f 	bic.w	r3, r3, #15
 80041ba:	4313      	orrs	r3, r2
 80041bc:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 80041be:	f7fe ffd3 	bl	8003168 <HAL_GetTick>
 80041c2:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 80041c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c8:	2701      	movs	r7, #1
 80041ca:	e004      	b.n	80041d6 <HAL_RCC_OscConfig+0x3aa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041cc:	f7fe ffcc 	bl	8003168 <HAL_GetTick>
 80041d0:	1b80      	subs	r0, r0, r6
 80041d2:	2864      	cmp	r0, #100	; 0x64
 80041d4:	d8e0      	bhi.n	8004198 <HAL_RCC_OscConfig+0x36c>
 80041d6:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	682a      	ldr	r2, [r5, #0]
 80041dc:	fa98 f3a8 	rbit	r3, r8
 80041e0:	fab3 f383 	clz	r3, r3
 80041e4:	f003 031f 	and.w	r3, r3, #31
 80041e8:	fa07 f303 	lsl.w	r3, r7, r3
 80041ec:	4213      	tst	r3, r2
 80041ee:	d1ed      	bne.n	80041cc <HAL_RCC_OscConfig+0x3a0>
 80041f0:	e675      	b.n	8003ede <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f2:	4d81      	ldr	r5, [pc, #516]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
 80041f4:	6a2b      	ldr	r3, [r5, #32]
 80041f6:	f023 0301 	bic.w	r3, r3, #1
 80041fa:	622b      	str	r3, [r5, #32]
 80041fc:	6a2b      	ldr	r3, [r5, #32]
 80041fe:	f023 0304 	bic.w	r3, r3, #4
 8004202:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 8004204:	f7fe ffb0 	bl	8003168 <HAL_GetTick>
 8004208:	f04f 0902 	mov.w	r9, #2
 800420c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	2701      	movs	r7, #1
 8004210:	e013      	b.n	800423a <HAL_RCC_OscConfig+0x40e>
 8004212:	fa99 f3a9 	rbit	r3, r9
 8004216:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8004218:	fa99 f3a9 	rbit	r3, r9
 800421c:	fab3 f383 	clz	r3, r3
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	fa07 f303 	lsl.w	r3, r7, r3
 8004228:	4213      	tst	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800422c:	f7fe ff9c 	bl	8003168 <HAL_GetTick>
 8004230:	f241 3388 	movw	r3, #5000	; 0x1388
 8004234:	1b80      	subs	r0, r0, r6
 8004236:	4298      	cmp	r0, r3
 8004238:	d8ae      	bhi.n	8004198 <HAL_RCC_OscConfig+0x36c>
 800423a:	fa99 f3a9 	rbit	r3, r9
 800423e:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0e5      	beq.n	8004212 <HAL_RCC_OscConfig+0x3e6>
 8004246:	6a2a      	ldr	r2, [r5, #32]
 8004248:	e7e6      	b.n	8004218 <HAL_RCC_OscConfig+0x3ec>
    if(pwrclkchanged == SET)
 800424a:	f1b8 0f00 	cmp.w	r8, #0
 800424e:	f43f aedc 	beq.w	800400a <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004252:	4a69      	ldr	r2, [pc, #420]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
 8004254:	69d3      	ldr	r3, [r2, #28]
 8004256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800425a:	61d3      	str	r3, [r2, #28]
 800425c:	e6d5      	b.n	800400a <HAL_RCC_OscConfig+0x1de>
 800425e:	2601      	movs	r6, #1
 8004260:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8004264:	fab3 f383 	clz	r3, r3
 8004268:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800426c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004270:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	4f61      	ldr	r7, [pc, #388]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_HSI_DISABLE();
 8004274:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004276:	f7fe ff77 	bl	8003168 <HAL_GetTick>
 800427a:	f04f 0802 	mov.w	r8, #2
 800427e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004280:	e004      	b.n	800428c <HAL_RCC_OscConfig+0x460>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004282:	f7fe ff71 	bl	8003168 <HAL_GetTick>
 8004286:	1b40      	subs	r0, r0, r5
 8004288:	2802      	cmp	r0, #2
 800428a:	d885      	bhi.n	8004198 <HAL_RCC_OscConfig+0x36c>
 800428c:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	fa98 f3a8 	rbit	r3, r8
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	fa06 f303 	lsl.w	r3, r6, r3
 80042a2:	4213      	tst	r3, r2
 80042a4:	d1ed      	bne.n	8004282 <HAL_RCC_OscConfig+0x456>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	e65e      	b.n	8003f68 <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042aa:	4a53      	ldr	r2, [pc, #332]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
 80042ac:	6a13      	ldr	r3, [r2, #32]
 80042ae:	f043 0301 	orr.w	r3, r3, #1
 80042b2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80042b4:	f7fe ff58 	bl	8003168 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	4f4f      	ldr	r7, [pc, #316]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 80042ba:	4605      	mov	r5, r0
 80042bc:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c0:	2601      	movs	r6, #1
 80042c2:	e014      	b.n	80042ee <HAL_RCC_OscConfig+0x4c2>
 80042c4:	fa99 f3a9 	rbit	r3, r9
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	fa99 f3a9 	rbit	r3, r9
 80042ce:	fab3 f383 	clz	r3, r3
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	fa06 f303 	lsl.w	r3, r6, r3
 80042da:	4213      	tst	r3, r2
 80042dc:	d1b5      	bne.n	800424a <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fe ff43 	bl	8003168 <HAL_GetTick>
 80042e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80042e6:	1b40      	subs	r0, r0, r5
 80042e8:	4298      	cmp	r0, r3
 80042ea:	f63f af55 	bhi.w	8004198 <HAL_RCC_OscConfig+0x36c>
 80042ee:	fa99 f3a9 	rbit	r3, r9
 80042f2:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0e4      	beq.n	80042c4 <HAL_RCC_OscConfig+0x498>
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	e7e5      	b.n	80042ca <HAL_RCC_OscConfig+0x49e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042fe:	2801      	cmp	r0, #1
 8004300:	f43f aeb7 	beq.w	8004072 <HAL_RCC_OscConfig+0x246>
        pll_config = RCC->CFGR;
 8004304:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004306:	6a22      	ldr	r2, [r4, #32]
 8004308:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800430c:	4291      	cmp	r1, r2
 800430e:	f47f aeca 	bne.w	80040a6 <HAL_RCC_OscConfig+0x27a>
 8004312:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004314:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8004318:	1a18      	subs	r0, r3, r0
 800431a:	bf18      	it	ne
 800431c:	2001      	movne	r0, #1
 800431e:	e6a8      	b.n	8004072 <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004320:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004324:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e5a3      	b.n	8003e82 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433a:	f042 0204 	orr.w	r2, r2, #4
 800433e:	621a      	str	r2, [r3, #32]
 8004340:	6a1a      	ldr	r2, [r3, #32]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	621a      	str	r2, [r3, #32]
 8004348:	e7b4      	b.n	80042b4 <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 800434a:	2001      	movs	r0, #1
}
 800434c:	4770      	bx	lr
 800434e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800435a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004364:	f7fe ff00 	bl	8003168 <HAL_GetTick>
 8004368:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 800436c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436e:	2701      	movs	r7, #1
 8004370:	e005      	b.n	800437e <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004372:	f7fe fef9 	bl	8003168 <HAL_GetTick>
 8004376:	1b80      	subs	r0, r0, r6
 8004378:	2802      	cmp	r0, #2
 800437a:	f63f af0d 	bhi.w	8004198 <HAL_RCC_OscConfig+0x36c>
 800437e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004382:	682a      	ldr	r2, [r5, #0]
 8004384:	fa98 f3a8 	rbit	r3, r8
 8004388:	fab3 f383 	clz	r3, r3
 800438c:	f003 031f 	and.w	r3, r3, #31
 8004390:	fa07 f303 	lsl.w	r3, r7, r3
 8004394:	4213      	tst	r3, r2
 8004396:	d1ec      	bne.n	8004372 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004398:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 800439c:	686a      	ldr	r2, [r5, #4]
 800439e:	430b      	orrs	r3, r1
 80043a0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80043a4:	4313      	orrs	r3, r2
 80043a6:	606b      	str	r3, [r5, #4]
 80043a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ac:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80043b0:	fab3 f383 	clz	r3, r3
 80043b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043bc:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043be:	4d0e      	ldr	r5, [pc, #56]	; (80043f8 <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_PLL_ENABLE();
 80043c0:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 80043c2:	f7fe fed1 	bl	8003168 <HAL_GetTick>
 80043c6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80043ca:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043cc:	2601      	movs	r6, #1
 80043ce:	e005      	b.n	80043dc <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fe feca 	bl	8003168 <HAL_GetTick>
 80043d4:	1b00      	subs	r0, r0, r4
 80043d6:	2802      	cmp	r0, #2
 80043d8:	f63f aede 	bhi.w	8004198 <HAL_RCC_OscConfig+0x36c>
 80043dc:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043e0:	682a      	ldr	r2, [r5, #0]
 80043e2:	fa97 f3a7 	rbit	r3, r7
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	fa06 f303 	lsl.w	r3, r6, r3
 80043f2:	4213      	tst	r3, r2
 80043f4:	d0ec      	beq.n	80043d0 <HAL_RCC_OscConfig+0x5a4>
 80043f6:	e63b      	b.n	8004070 <HAL_RCC_OscConfig+0x244>
 80043f8:	40021000 	.word	0x40021000

080043fc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043fc:	2800      	cmp	r0, #0
 80043fe:	f000 80c8 	beq.w	8004592 <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004402:	4a6f      	ldr	r2, [pc, #444]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	6813      	ldr	r3, [r2, #0]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	428b      	cmp	r3, r1
{
 800440c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004410:	460d      	mov	r5, r1
 8004412:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004414:	d20c      	bcs.n	8004430 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	f023 0307 	bic.w	r3, r3, #7
 800441c:	430b      	orrs	r3, r1
 800441e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	428b      	cmp	r3, r1
 8004428:	d002      	beq.n	8004430 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800442a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 800442c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	079f      	lsls	r7, r3, #30
 8004434:	d506      	bpl.n	8004444 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004436:	4963      	ldr	r1, [pc, #396]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004438:	68a0      	ldr	r0, [r4, #8]
 800443a:	684a      	ldr	r2, [r1, #4]
 800443c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004440:	4302      	orrs	r2, r0
 8004442:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004444:	07de      	lsls	r6, r3, #31
 8004446:	d52f      	bpl.n	80044a8 <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004448:	6861      	ldr	r1, [r4, #4]
 800444a:	2901      	cmp	r1, #1
 800444c:	f000 80a3 	beq.w	8004596 <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004450:	2902      	cmp	r1, #2
 8004452:	f000 808b 	beq.w	800456c <HAL_RCC_ClockConfig+0x170>
 8004456:	2202      	movs	r2, #2
 8004458:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	fa92 f2a2 	rbit	r2, r2
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	f002 021f 	and.w	r2, r2, #31
 800446c:	2301      	movs	r3, #1
 800446e:	fa03 f202 	lsl.w	r2, r3, r2
 8004472:	4202      	tst	r2, r0
 8004474:	d0d9      	beq.n	800442a <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004476:	4e53      	ldr	r6, [pc, #332]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004478:	6873      	ldr	r3, [r6, #4]
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	430b      	orrs	r3, r1
 8004480:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004482:	f7fe fe71 	bl	8003168 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004486:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800448a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448c:	e005      	b.n	800449a <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448e:	f7fe fe6b 	bl	8003168 <HAL_GetTick>
 8004492:	1bc0      	subs	r0, r0, r7
 8004494:	4540      	cmp	r0, r8
 8004496:	f200 8090 	bhi.w	80045ba <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449a:	6873      	ldr	r3, [r6, #4]
 800449c:	6862      	ldr	r2, [r4, #4]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80044a6:	d1f2      	bne.n	800448e <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4a45      	ldr	r2, [pc, #276]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	6813      	ldr	r3, [r2, #0]
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	42ab      	cmp	r3, r5
 80044b2:	d909      	bls.n	80044c8 <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b4:	6813      	ldr	r3, [r2, #0]
 80044b6:	f023 0307 	bic.w	r3, r3, #7
 80044ba:	432b      	orrs	r3, r5
 80044bc:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	6813      	ldr	r3, [r2, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	42ab      	cmp	r3, r5
 80044c6:	d1b0      	bne.n	800442a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	0758      	lsls	r0, r3, #29
 80044cc:	d506      	bpl.n	80044dc <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ce:	493d      	ldr	r1, [pc, #244]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044d0:	68e0      	ldr	r0, [r4, #12]
 80044d2:	684a      	ldr	r2, [r1, #4]
 80044d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044d8:	4302      	orrs	r2, r0
 80044da:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044dc:	0719      	lsls	r1, r3, #28
 80044de:	d507      	bpl.n	80044f0 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e0:	4a38      	ldr	r2, [pc, #224]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044e2:	6921      	ldr	r1, [r4, #16]
 80044e4:	6853      	ldr	r3, [r2, #4]
 80044e6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80044ea:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044ee:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80044f0:	4934      	ldr	r1, [pc, #208]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044f2:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044f4:	f002 030c 	and.w	r3, r2, #12
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d017      	beq.n	800452c <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044fc:	4932      	ldr	r1, [pc, #200]	; (80045c8 <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004500:	22f0      	movs	r2, #240	; 0xf0
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	fa92 f2a2 	rbit	r2, r2
 8004508:	fab2 f282 	clz	r2, r2
 800450c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004510:	40d3      	lsrs	r3, r2
 8004512:	4a2e      	ldr	r2, [pc, #184]	; (80045cc <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 8004514:	482e      	ldr	r0, [pc, #184]	; (80045d0 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004516:	5cd3      	ldrb	r3, [r2, r3]
 8004518:	4a2e      	ldr	r2, [pc, #184]	; (80045d4 <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 800451a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800451c:	fa21 f303 	lsr.w	r3, r1, r3
 8004520:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8004522:	f7fe fddf 	bl	80030e4 <HAL_InitTick>
  return HAL_OK;
 8004526:	2000      	movs	r0, #0
}
 8004528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800452c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8004530:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004534:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 8004538:	fab3 f383 	clz	r3, r3
 800453c:	4c26      	ldr	r4, [pc, #152]	; (80045d8 <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800453e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004540:	fa20 f303 	lsr.w	r3, r0, r3
 8004544:	200f      	movs	r0, #15
 8004546:	5ce3      	ldrb	r3, [r4, r3]
 8004548:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800454c:	fab0 f080 	clz	r0, r0
 8004550:	f001 010f 	and.w	r1, r1, #15
 8004554:	40c1      	lsrs	r1, r0
 8004556:	4c21      	ldr	r4, [pc, #132]	; (80045dc <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004558:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800455a:	5c60      	ldrb	r0, [r4, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800455c:	bf4a      	itet	mi
 800455e:	491a      	ldrmi	r1, [pc, #104]	; (80045c8 <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004560:	491f      	ldrpl	r1, [pc, #124]	; (80045e0 <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004562:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004566:	fb03 f101 	mul.w	r1, r3, r1
 800456a:	e7c8      	b.n	80044fe <HAL_RCC_ClockConfig+0x102>
 800456c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004570:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004574:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	6810      	ldr	r0, [r2, #0]
 8004578:	fa93 f3a3 	rbit	r3, r3
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2201      	movs	r2, #1
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	4203      	tst	r3, r0
 800458c:	f47f af73 	bne.w	8004476 <HAL_RCC_ClockConfig+0x7a>
 8004590:	e74b      	b.n	800442a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004592:	2001      	movs	r0, #1
}
 8004594:	4770      	bx	lr
 8004596:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800459a:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	fa92 f2a2 	rbit	r2, r2
 80045a6:	fab2 f282 	clz	r2, r2
 80045aa:	f002 021f 	and.w	r2, r2, #31
 80045ae:	fa01 f202 	lsl.w	r2, r1, r2
 80045b2:	421a      	tst	r2, r3
 80045b4:	f47f af5f 	bne.w	8004476 <HAL_RCC_ClockConfig+0x7a>
 80045b8:	e737      	b.n	800442a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 80045ba:	2003      	movs	r0, #3
 80045bc:	e736      	b.n	800442c <HAL_RCC_ClockConfig+0x30>
 80045be:	bf00      	nop
 80045c0:	40022000 	.word	0x40022000
 80045c4:	40021000 	.word	0x40021000
 80045c8:	007a1200 	.word	0x007a1200
 80045cc:	08008a80 	.word	0x08008a80
 80045d0:	200005e4 	.word	0x200005e4
 80045d4:	200005dc 	.word	0x200005dc
 80045d8:	08008a98 	.word	0x08008a98
 80045dc:	08008aa8 	.word	0x08008aa8
 80045e0:	003d0900 	.word	0x003d0900

080045e4 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80045e4:	4915      	ldr	r1, [pc, #84]	; (800463c <HAL_RCC_GetSysClockFreq+0x58>)
 80045e6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80045e8:	f003 020c 	and.w	r2, r3, #12
 80045ec:	2a08      	cmp	r2, #8
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80045f0:	4813      	ldr	r0, [pc, #76]	; (8004640 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80045f2:	4770      	bx	lr
{
 80045f4:	b410      	push	{r4}
 80045f6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80045fa:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80045fe:	fab2 f282 	clz	r2, r2
 8004602:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8004606:	4c0f      	ldr	r4, [pc, #60]	; (8004644 <HAL_RCC_GetSysClockFreq+0x60>)
 8004608:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800460a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800460c:	5c20      	ldrb	r0, [r4, r0]
 800460e:	210f      	movs	r1, #15
 8004610:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004614:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004616:	fab1 f181 	clz	r1, r1
 800461a:	f002 020f 	and.w	r2, r2, #15
 800461e:	4c0a      	ldr	r4, [pc, #40]	; (8004648 <HAL_RCC_GetSysClockFreq+0x64>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004620:	bf4c      	ite	mi
 8004622:	4b07      	ldrmi	r3, [pc, #28]	; (8004640 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004624:	4b09      	ldrpl	r3, [pc, #36]	; (800464c <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004626:	fa22 f201 	lsr.w	r2, r2, r1
 800462a:	5ca2      	ldrb	r2, [r4, r2]
}
 800462c:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004630:	bf48      	it	mi
 8004632:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004636:	fb03 f000 	mul.w	r0, r3, r0
}
 800463a:	4770      	bx	lr
 800463c:	40021000 	.word	0x40021000
 8004640:	007a1200 	.word	0x007a1200
 8004644:	08008a98 	.word	0x08008a98
 8004648:	08008aa8 	.word	0x08008aa8
 800464c:	003d0900 	.word	0x003d0900

08004650 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004650:	4b01      	ldr	r3, [pc, #4]	; (8004658 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	200005dc 	.word	0x200005dc

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x24>)
 800465e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	fa92 f2a2 	rbit	r2, r2
 8004668:	fab2 f282 	clz	r2, r2
 800466c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004670:	4904      	ldr	r1, [pc, #16]	; (8004684 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8004672:	4805      	ldr	r0, [pc, #20]	; (8004688 <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004674:	40d3      	lsrs	r3, r2
 8004676:	6800      	ldr	r0, [r0, #0]
 8004678:	5ccb      	ldrb	r3, [r1, r3]
}    
 800467a:	40d8      	lsrs	r0, r3
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	08008a90 	.word	0x08008a90
 8004688:	200005dc 	.word	0x200005dc

0800468c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800468c:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800468e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	fa92 f2a2 	rbit	r2, r2
 8004698:	fab2 f282 	clz	r2, r2
 800469c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80046a0:	4904      	ldr	r1, [pc, #16]	; (80046b4 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 80046a2:	4805      	ldr	r0, [pc, #20]	; (80046b8 <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80046a4:	40d3      	lsrs	r3, r2
 80046a6:	6800      	ldr	r0, [r0, #0]
 80046a8:	5ccb      	ldrb	r3, [r1, r3]
} 
 80046aa:	40d8      	lsrs	r0, r3
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	08008a90 	.word	0x08008a90
 80046b8:	200005dc 	.word	0x200005dc

080046bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c0:	6803      	ldr	r3, [r0, #0]
{
 80046c2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c4:	03d8      	lsls	r0, r3, #15
{
 80046c6:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c8:	d540      	bpl.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ca:	4b7b      	ldr	r3, [pc, #492]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	00d1      	lsls	r1, r2, #3
 80046d0:	f140 80a8 	bpl.w	8004824 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4e79      	ldr	r6, [pc, #484]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80046d6:	6833      	ldr	r3, [r6, #0]
 80046d8:	05da      	lsls	r2, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 80046da:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046de:	f140 80b1 	bpl.w	8004844 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046e2:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80046e6:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ea:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80046ee:	d020      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046f0:	6861      	ldr	r1, [r4, #4]
 80046f2:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d01c      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046fa:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80046fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004702:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8004706:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800470a:	4f6d      	ldr	r7, [pc, #436]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800470c:	fab2 f282 	clz	r2, r2
 8004710:	443a      	add	r2, r7
 8004712:	0092      	lsls	r2, r2, #2
 8004714:	2601      	movs	r6, #1
 8004716:	6016      	str	r6, [r2, #0]
 8004718:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800471c:	fab3 f383 	clz	r3, r3
 8004720:	443b      	add	r3, r7
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004726:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004728:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 800472a:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800472e:	f100 809d 	bmi.w	800486c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004732:	6861      	ldr	r1, [r4, #4]
 8004734:	4a60      	ldr	r2, [pc, #384]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004736:	6a13      	ldr	r3, [r2, #32]
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	430b      	orrs	r3, r1
 800473e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004740:	b11d      	cbz	r5, 800474a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004742:	69d3      	ldr	r3, [r2, #28]
 8004744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004748:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	07dd      	lsls	r5, r3, #31
 800474e:	d506      	bpl.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004750:	4959      	ldr	r1, [pc, #356]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004752:	68a0      	ldr	r0, [r4, #8]
 8004754:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004756:	f022 0203 	bic.w	r2, r2, #3
 800475a:	4302      	orrs	r2, r0
 800475c:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800475e:	0698      	lsls	r0, r3, #26
 8004760:	d506      	bpl.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004762:	4955      	ldr	r1, [pc, #340]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004764:	68e0      	ldr	r0, [r4, #12]
 8004766:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004768:	f022 0210 	bic.w	r2, r2, #16
 800476c:	4302      	orrs	r2, r0
 800476e:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004770:	0399      	lsls	r1, r3, #14
 8004772:	d506      	bpl.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004774:	4950      	ldr	r1, [pc, #320]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004776:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004778:	684a      	ldr	r2, [r1, #4]
 800477a:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800477e:	4302      	orrs	r2, r0
 8004780:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004782:	065a      	lsls	r2, r3, #25
 8004784:	d506      	bpl.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004786:	494c      	ldr	r1, [pc, #304]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004788:	6920      	ldr	r0, [r4, #16]
 800478a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800478c:	f022 0220 	bic.w	r2, r2, #32
 8004790:	4302      	orrs	r2, r0
 8004792:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004794:	041f      	lsls	r7, r3, #16
 8004796:	d506      	bpl.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004798:	4947      	ldr	r1, [pc, #284]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800479a:	6960      	ldr	r0, [r4, #20]
 800479c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800479e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a2:	4302      	orrs	r2, r0
 80047a4:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047a6:	059e      	lsls	r6, r3, #22
 80047a8:	d506      	bpl.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047aa:	4943      	ldr	r1, [pc, #268]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047ac:	69e0      	ldr	r0, [r4, #28]
 80047ae:	684a      	ldr	r2, [r1, #4]
 80047b0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80047b4:	4302      	orrs	r2, r0
 80047b6:	604a      	str	r2, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80047b8:	061d      	lsls	r5, r3, #24
 80047ba:	d506      	bpl.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80047bc:	493e      	ldr	r1, [pc, #248]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047be:	69a0      	ldr	r0, [r4, #24]
 80047c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80047c2:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80047c6:	4302      	orrs	r2, r0
 80047c8:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047ca:	04d8      	lsls	r0, r3, #19
 80047cc:	d506      	bpl.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047ce:	493a      	ldr	r1, [pc, #232]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047d0:	6a20      	ldr	r0, [r4, #32]
 80047d2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80047d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047d8:	4302      	orrs	r2, r0
 80047da:	630a      	str	r2, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80047dc:	0359      	lsls	r1, r3, #13
 80047de:	d506      	bpl.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80047e0:	4935      	ldr	r1, [pc, #212]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80047e4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80047e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ea:	4302      	orrs	r2, r0
 80047ec:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80047ee:	031a      	lsls	r2, r3, #12
 80047f0:	d506      	bpl.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80047f2:	4931      	ldr	r1, [pc, #196]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80047f6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80047f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047fc:	4302      	orrs	r2, r0
 80047fe:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004800:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 8004804:	d103      	bne.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004806:	4618      	mov	r0, r3
}
 8004808:	b003      	add	sp, #12
 800480a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800480e:	4a2a      	ldr	r2, [pc, #168]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004810:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004812:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  return HAL_OK;
 8004818:	2000      	movs	r0, #0
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800481a:	430b      	orrs	r3, r1
 800481c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800481e:	b003      	add	sp, #12
 8004820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004824:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	4e25      	ldr	r6, [pc, #148]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x200>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8004828:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800482c:	61da      	str	r2, [r3, #28]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 800483c:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	f53f af4f 	bmi.w	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004844:	6833      	ldr	r3, [r6, #0]
 8004846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800484c:	f7fe fc8c 	bl	8003168 <HAL_GetTick>
 8004850:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	6833      	ldr	r3, [r6, #0]
 8004854:	05db      	lsls	r3, r3, #23
 8004856:	f53f af44 	bmi.w	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fe fc85 	bl	8003168 <HAL_GetTick>
 800485e:	1bc0      	subs	r0, r0, r7
 8004860:	2864      	cmp	r0, #100	; 0x64
 8004862:	d9f6      	bls.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x196>
          return HAL_TIMEOUT;
 8004864:	2003      	movs	r0, #3
}
 8004866:	b003      	add	sp, #12
 8004868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 800486c:	f7fe fc7c 	bl	8003168 <HAL_GetTick>
 8004870:	f04f 0902 	mov.w	r9, #2
 8004874:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004876:	e015      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004878:	fa99 f3a9 	rbit	r3, r9
 800487c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004880:	fa99 f3a9 	rbit	r3, r9
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	fa06 f303 	lsl.w	r3, r6, r3
 8004890:	4213      	tst	r3, r2
 8004892:	f47f af4e 	bne.w	8004732 <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004896:	f7fe fc67 	bl	8003168 <HAL_GetTick>
 800489a:	f241 3388 	movw	r3, #5000	; 0x1388
 800489e:	1bc0      	subs	r0, r0, r7
 80048a0:	4298      	cmp	r0, r3
 80048a2:	d8df      	bhi.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80048a4:	fa99 f3a9 	rbit	r3, r9
 80048a8:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0e3      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 80048b0:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80048b4:	e7e4      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 80048b6:	bf00      	nop
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40007000 	.word	0x40007000
 80048c0:	10908100 	.word	0x10908100

080048c4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c4:	6a03      	ldr	r3, [r0, #32]
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048cc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ce:	6842      	ldr	r2, [r0, #4]
{
 80048d0:	b470      	push	{r4, r5, r6}
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048d2:	688d      	ldr	r5, [r1, #8]
  tmpccmrx = TIMx->CCMR1;
 80048d4:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80048d6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80048da:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048dc:	4d15      	ldr	r5, [pc, #84]	; (8004934 <TIM_OC1_SetConfig+0x70>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048de:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 80048e2:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048e4:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048e8:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 80048ea:	ea4c 0404 	orr.w	r4, ip, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048ee:	d00b      	beq.n	8004908 <TIM_OC1_SetConfig+0x44>
 80048f0:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80048f4:	42a8      	cmp	r0, r5
 80048f6:	d007      	beq.n	8004908 <TIM_OC1_SetConfig+0x44>
 80048f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80048fc:	42a8      	cmp	r0, r5
 80048fe:	d003      	beq.n	8004908 <TIM_OC1_SetConfig+0x44>
 8004900:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004904:	42a8      	cmp	r0, r5
 8004906:	d10d      	bne.n	8004924 <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004908:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800490a:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800490e:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004910:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004914:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004918:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800491c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004920:	ea4c 0202 	orr.w	r2, ip, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004924:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004926:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004928:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800492a:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800492c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 800492e:	6203      	str	r3, [r0, #32]
}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40012c00 	.word	0x40012c00

08004938 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004938:	6a03      	ldr	r3, [r0, #32]
 800493a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800493e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004940:	6a03      	ldr	r3, [r0, #32]
{
 8004942:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004944:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004946:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004948:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800494a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800494e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004952:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004954:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004956:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800495a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800495e:	4d12      	ldr	r5, [pc, #72]	; (80049a8 <TIM_OC3_SetConfig+0x70>)
 8004960:	42a8      	cmp	r0, r5
 8004962:	d018      	beq.n	8004996 <TIM_OC3_SetConfig+0x5e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004964:	4d11      	ldr	r5, [pc, #68]	; (80049ac <TIM_OC3_SetConfig+0x74>)
 8004966:	42a8      	cmp	r0, r5
 8004968:	d006      	beq.n	8004978 <TIM_OC3_SetConfig+0x40>
 800496a:	4d11      	ldr	r5, [pc, #68]	; (80049b0 <TIM_OC3_SetConfig+0x78>)
 800496c:	42a8      	cmp	r0, r5
 800496e:	d003      	beq.n	8004978 <TIM_OC3_SetConfig+0x40>
 8004970:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004974:	42a8      	cmp	r0, r5
 8004976:	d107      	bne.n	8004988 <TIM_OC3_SetConfig+0x50>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004978:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800497c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004980:	ea46 0c05 	orr.w	ip, r6, r5
 8004984:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004988:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800498a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800498c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800498e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004990:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004992:	6203      	str	r3, [r0, #32]
}
 8004994:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004996:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004998:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800499c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80049a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	e7e8      	b.n	8004978 <TIM_OC3_SetConfig+0x40>
 80049a6:	bf00      	nop
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40014400 	.word	0x40014400

080049b4 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d074      	beq.n	8004aa2 <HAL_TIM_Base_Init+0xee>
{
 80049b8:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049be:	4604      	mov	r4, r0
 80049c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d04b      	beq.n	8004a60 <HAL_TIM_Base_Init+0xac>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c8:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ca:	4937      	ldr	r1, [pc, #220]	; (8004aa8 <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 80049cc:	2302      	movs	r3, #2
 80049ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80049d4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049d6:	d048      	beq.n	8004a6a <HAL_TIM_Base_Init+0xb6>
 80049d8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80049dc:	d04f      	beq.n	8004a7e <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049de:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80049e2:	428a      	cmp	r2, r1
 80049e4:	d011      	beq.n	8004a0a <HAL_TIM_Base_Init+0x56>
 80049e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049ea:	428a      	cmp	r2, r1
 80049ec:	d00d      	beq.n	8004a0a <HAL_TIM_Base_Init+0x56>
 80049ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049f2:	428a      	cmp	r2, r1
 80049f4:	d009      	beq.n	8004a0a <HAL_TIM_Base_Init+0x56>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f6:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fe:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004a00:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004a02:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a04:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a06:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a08:	e00e      	b.n	8004a28 <HAL_TIM_Base_Init+0x74>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a0a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a0c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a12:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a18:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004a1a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004a24:	6963      	ldr	r3, [r4, #20]
 8004a26:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a30:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004a34:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004a38:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004a3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a50:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004a54:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004a5c:	2000      	movs	r0, #0
}
 8004a5e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004a60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a64:	f7fd fda8 	bl	80025b8 <HAL_TIM_Base_MspInit>
 8004a68:	e7ae      	b.n	80049c8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004a6a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a6c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a72:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a78:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a7a:	69a1      	ldr	r1, [r4, #24]
 8004a7c:	e7ca      	b.n	8004a14 <HAL_TIM_Base_Init+0x60>
    tmpcr1 |= Structure->CounterMode;
 8004a7e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a80:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004a86:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a8c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a8e:	69a1      	ldr	r1, [r4, #24]
 8004a90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a94:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004a96:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a98:	68e3      	ldr	r3, [r4, #12]
 8004a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004a9c:	6863      	ldr	r3, [r4, #4]
 8004a9e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aa0:	e7c2      	b.n	8004a28 <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8004aa2:	2001      	movs	r0, #1
}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00

08004aac <HAL_TIM_PWM_MspInit>:
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop

08004ab0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d074      	beq.n	8004b9e <HAL_TIM_PWM_Init+0xee>
{
 8004ab4:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004aba:	4604      	mov	r4, r0
 8004abc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d04b      	beq.n	8004b5c <HAL_TIM_PWM_Init+0xac>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac6:	4937      	ldr	r1, [pc, #220]	; (8004ba4 <HAL_TIM_PWM_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ace:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004ad0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad2:	d048      	beq.n	8004b66 <HAL_TIM_PWM_Init+0xb6>
 8004ad4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004ad8:	d04f      	beq.n	8004b7a <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ada:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8004ade:	428a      	cmp	r2, r1
 8004ae0:	d011      	beq.n	8004b06 <HAL_TIM_PWM_Init+0x56>
 8004ae2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ae6:	428a      	cmp	r2, r1
 8004ae8:	d00d      	beq.n	8004b06 <HAL_TIM_PWM_Init+0x56>
 8004aea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004aee:	428a      	cmp	r2, r1
 8004af0:	d009      	beq.n	8004b06 <HAL_TIM_PWM_Init+0x56>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004afa:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004afc:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004afe:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b00:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b02:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b04:	e00e      	b.n	8004b24 <HAL_TIM_PWM_Init+0x74>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b06:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b14:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004b16:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b18:	68e3      	ldr	r3, [r4, #12]
 8004b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b1c:	6863      	ldr	r3, [r4, #4]
 8004b1e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004b20:	6963      	ldr	r3, [r4, #20]
 8004b22:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004b24:	2301      	movs	r3, #1
 8004b26:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b28:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004b30:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004b34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004b38:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004b48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b4c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004b50:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004b54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004b58:	2000      	movs	r0, #0
}
 8004b5a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004b60:	f7ff ffa4 	bl	8004aac <HAL_TIM_PWM_MspInit>
 8004b64:	e7ae      	b.n	8004ac4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004b66:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b68:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b6e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b74:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b76:	69a1      	ldr	r1, [r4, #24]
 8004b78:	e7ca      	b.n	8004b10 <HAL_TIM_PWM_Init+0x60>
    tmpcr1 |= Structure->CounterMode;
 8004b7a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b7c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004b82:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b88:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b8a:	69a1      	ldr	r1, [r4, #24]
 8004b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b90:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004b92:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b94:	68e3      	ldr	r3, [r4, #12]
 8004b96:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b98:	6863      	ldr	r3, [r4, #4]
 8004b9a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b9c:	e7c2      	b.n	8004b24 <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 8004b9e:	2001      	movs	r0, #1
}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	40012c00 	.word	0x40012c00

08004ba8 <HAL_TIM_PWM_Start>:
 8004ba8:	bb81      	cbnz	r1, 8004c0c <HAL_TIM_PWM_Start+0x64>
 8004baa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d12a      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x60>
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8004bb8:	b410      	push	{r4}
 8004bba:	6804      	ldr	r4, [r0, #0]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	6a22      	ldr	r2, [r4, #32]
 8004bc0:	f001 011f 	and.w	r1, r1, #31
 8004bc4:	fa03 f101 	lsl.w	r1, r3, r1
 8004bc8:	ea22 0201 	bic.w	r2, r2, r1
 8004bcc:	6222      	str	r2, [r4, #32]
 8004bce:	6a22      	ldr	r2, [r4, #32]
 8004bd0:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <HAL_TIM_PWM_Start+0x100>)
 8004bd2:	4311      	orrs	r1, r2
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	6221      	str	r1, [r4, #32]
 8004bd8:	d036      	beq.n	8004c48 <HAL_TIM_PWM_Start+0xa0>
 8004bda:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8004bde:	429c      	cmp	r4, r3
 8004be0:	d032      	beq.n	8004c48 <HAL_TIM_PWM_Start+0xa0>
 8004be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be6:	429c      	cmp	r4, r3
 8004be8:	d04c      	beq.n	8004c84 <HAL_TIM_PWM_Start+0xdc>
 8004bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bee:	429c      	cmp	r4, r3
 8004bf0:	d048      	beq.n	8004c84 <HAL_TIM_PWM_Start+0xdc>
 8004bf2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8004bf6:	d02b      	beq.n	8004c50 <HAL_TIM_PWM_Start+0xa8>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	f043 0301 	orr.w	r3, r3, #1
 8004bfe:	2000      	movs	r0, #0
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	2001      	movs	r0, #1
 8004c0a:	4770      	bx	lr
 8004c0c:	2904      	cmp	r1, #4
 8004c0e:	d02b      	beq.n	8004c68 <HAL_TIM_PWM_Start+0xc0>
 8004c10:	2908      	cmp	r1, #8
 8004c12:	d03c      	beq.n	8004c8e <HAL_TIM_PWM_Start+0xe6>
 8004c14:	290c      	cmp	r1, #12
 8004c16:	d02f      	beq.n	8004c78 <HAL_TIM_PWM_Start+0xd0>
 8004c18:	2910      	cmp	r1, #16
 8004c1a:	bf0c      	ite	eq
 8004c1c:	f890 3042 	ldrbeq.w	r3, [r0, #66]	; 0x42
 8004c20:	f890 3043 	ldrbne.w	r3, [r0, #67]	; 0x43
 8004c24:	3b01      	subs	r3, #1
 8004c26:	bf18      	it	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1ec      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x60>
 8004c2e:	2908      	cmp	r1, #8
 8004c30:	f04f 0302 	mov.w	r3, #2
 8004c34:	d031      	beq.n	8004c9a <HAL_TIM_PWM_Start+0xf2>
 8004c36:	290c      	cmp	r1, #12
 8004c38:	d032      	beq.n	8004ca0 <HAL_TIM_PWM_Start+0xf8>
 8004c3a:	2910      	cmp	r1, #16
 8004c3c:	bf0c      	ite	eq
 8004c3e:	f880 3042 	strbeq.w	r3, [r0, #66]	; 0x42
 8004c42:	f880 3043 	strbne.w	r3, [r0, #67]	; 0x43
 8004c46:	e7b7      	b.n	8004bb8 <HAL_TIM_PWM_Start+0x10>
 8004c48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c4e:	6463      	str	r3, [r4, #68]	; 0x44
 8004c50:	68a2      	ldr	r2, [r4, #8]
 8004c52:	4b16      	ldr	r3, [pc, #88]	; (8004cac <HAL_TIM_PWM_Start+0x104>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b06      	cmp	r3, #6
 8004c58:	d002      	beq.n	8004c60 <HAL_TIM_PWM_Start+0xb8>
 8004c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5e:	d1cb      	bne.n	8004bf8 <HAL_TIM_PWM_Start+0x50>
 8004c60:	2000      	movs	r0, #0
 8004c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d1cb      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x60>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8004c76:	e79f      	b.n	8004bb8 <HAL_TIM_PWM_Start+0x10>
 8004c78:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	bf18      	it	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	e7d2      	b.n	8004c2a <HAL_TIM_PWM_Start+0x82>
 8004c84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c8a:	6463      	str	r3, [r4, #68]	; 0x44
 8004c8c:	e7b4      	b.n	8004bf8 <HAL_TIM_PWM_Start+0x50>
 8004c8e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c92:	3b01      	subs	r3, #1
 8004c94:	bf18      	it	ne
 8004c96:	2301      	movne	r3, #1
 8004c98:	e7c7      	b.n	8004c2a <HAL_TIM_PWM_Start+0x82>
 8004c9a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8004c9e:	e78b      	b.n	8004bb8 <HAL_TIM_PWM_Start+0x10>
 8004ca0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8004ca4:	e788      	b.n	8004bb8 <HAL_TIM_PWM_Start+0x10>
 8004ca6:	bf00      	nop
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	00010007 	.word	0x00010007

08004cb0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004cb0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d073      	beq.n	8004da0 <HAL_TIM_ConfigClockSource+0xf0>
 8004cb8:	4602      	mov	r2, r0
{
 8004cba:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004cbe:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004cc4:	2001      	movs	r0, #1
 8004cc6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004cca:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ccc:	4b4f      	ldr	r3, [pc, #316]	; (8004e0c <HAL_TIM_ConfigClockSource+0x15c>)
 8004cce:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004cd0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8004cd2:	680b      	ldr	r3, [r1, #0]
 8004cd4:	2b60      	cmp	r3, #96	; 0x60
 8004cd6:	d065      	beq.n	8004da4 <HAL_TIM_ConfigClockSource+0xf4>
 8004cd8:	d824      	bhi.n	8004d24 <HAL_TIM_ConfigClockSource+0x74>
 8004cda:	2b40      	cmp	r3, #64	; 0x40
 8004cdc:	d07c      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0x128>
 8004cde:	d94b      	bls.n	8004d78 <HAL_TIM_ConfigClockSource+0xc8>
 8004ce0:	2b50      	cmp	r3, #80	; 0x50
 8004ce2:	d117      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce4:	6848      	ldr	r0, [r1, #4]
 8004ce6:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cea:	6a25      	ldr	r5, [r4, #32]
 8004cec:	f025 0501 	bic.w	r5, r5, #1
 8004cf0:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf2:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cf4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004cfc:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cfe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d02:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004d04:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d06:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d0c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8004d10:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d12:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004d14:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004d16:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004d1c:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004d20:	bc70      	pop	{r4, r5, r6}
 8004d22:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	d038      	beq.n	8004d9c <HAL_TIM_ConfigClockSource+0xec>
 8004d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d2e:	d110      	bne.n	8004d52 <HAL_TIM_ConfigClockSource+0xa2>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d30:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004d34:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d36:	432b      	orrs	r3, r5
 8004d38:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d3a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004d42:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d44:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d46:	68a3      	ldr	r3, [r4, #8]
 8004d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8004d4c:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d4e:	60a3      	str	r3, [r4, #8]
      break;
 8004d50:	e7e0      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004d52:	2b70      	cmp	r3, #112	; 0x70
 8004d54:	d1de      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d56:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004d5a:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d5c:	432b      	orrs	r3, r5
 8004d5e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d60:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d64:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004d68:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004d6a:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004d6c:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8004d74:	60a3      	str	r3, [r4, #8]
      break;
 8004d76:	e7cd      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d002      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0xd2>
 8004d7c:	d90a      	bls.n	8004d94 <HAL_TIM_ConfigClockSource+0xe4>
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d1c8      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 8004d82:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d84:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004d90:	60a3      	str	r3, [r4, #8]
}
 8004d92:	e7bf      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 8004d94:	f033 0110 	bics.w	r1, r3, #16
 8004d98:	d1bc      	bne.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
 8004d9a:	e7f2      	b.n	8004d82 <HAL_TIM_ConfigClockSource+0xd2>
  HAL_StatusTypeDef status = HAL_OK;
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	e7b9      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 8004da0:	2002      	movs	r0, #2
}
 8004da2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da4:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da6:	68cb      	ldr	r3, [r1, #12]
 8004da8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004daa:	f020 0010 	bic.w	r0, r0, #16
 8004dae:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db0:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004db6:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004dba:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004dbc:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dc2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004dc6:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004dc8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dce:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004dd4:	60a3      	str	r3, [r4, #8]
}
 8004dd6:	e79d      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd8:	6848      	ldr	r0, [r1, #4]
 8004dda:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004ddc:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dde:	6a25      	ldr	r5, [r4, #32]
 8004de0:	f025 0501 	bic.w	r5, r5, #1
 8004de4:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004de6:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004de8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004df0:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004df2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004df6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004df8:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004dfa:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e00:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8004e04:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004e06:	60a3      	str	r3, [r4, #8]
}
 8004e08:	e784      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x64>
 8004e0a:	bf00      	nop
 8004e0c:	fffe0088 	.word	0xfffe0088

08004e10 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004e10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d052      	beq.n	8004ebe <HAL_TIM_SlaveConfigSynchro+0xae>
 8004e18:	4602      	mov	r2, r0
{
 8004e1a:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004e1e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004e24:	2001      	movs	r0, #1
 8004e26:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004e2a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e2c:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e2e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e34:	4303      	orrs	r3, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3a:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e3e:	432b      	orrs	r3, r5
  switch (sSlaveConfig->InputTrigger)
 8004e40:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8004e42:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004e44:	d060      	beq.n	8004f08 <HAL_TIM_SlaveConfigSynchro+0xf8>
 8004e46:	d90f      	bls.n	8004e68 <HAL_TIM_SlaveConfigSynchro+0x58>
 8004e48:	2860      	cmp	r0, #96	; 0x60
 8004e4a:	d03a      	beq.n	8004ec2 <HAL_TIM_SlaveConfigSynchro+0xb2>
 8004e4c:	2870      	cmp	r0, #112	; 0x70
 8004e4e:	d10e      	bne.n	8004e6e <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e50:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004e54:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e56:	432b      	orrs	r3, r5
 8004e58:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e5a:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004e62:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004e64:	60a3      	str	r3, [r4, #8]
 8004e66:	e00f      	b.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x78>
  switch (sSlaveConfig->InputTrigger)
 8004e68:	2840      	cmp	r0, #64	; 0x40
 8004e6a:	d03d      	beq.n	8004ee8 <HAL_TIM_SlaveConfigSynchro+0xd8>
 8004e6c:	d907      	bls.n	8004e7e <HAL_TIM_SlaveConfigSynchro+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8004e6e:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004e70:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004e72:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004e76:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004e7a:	bc70      	pop	{r4, r5, r6}
 8004e7c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004e7e:	2820      	cmp	r0, #32
 8004e80:	d002      	beq.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x78>
 8004e82:	d912      	bls.n	8004eaa <HAL_TIM_SlaveConfigSynchro+0x9a>
 8004e84:	2830      	cmp	r0, #48	; 0x30
 8004e86:	d1f2      	bne.n	8004e6e <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004e88:	68e3      	ldr	r3, [r4, #12]
 8004e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8e:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e90:	68e3      	ldr	r3, [r4, #12]
  __HAL_UNLOCK(htim);
 8004e92:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e94:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004e96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e9a:	60e3      	str	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	f882 503d 	strb.w	r5, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ea0:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8004ea4:	4608      	mov	r0, r1
}
 8004ea6:	bc70      	pop	{r4, r5, r6}
 8004ea8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004eaa:	f030 0310 	bics.w	r3, r0, #16
 8004eae:	d0eb      	beq.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x78>
    htim->State = HAL_TIM_STATE_READY;
 8004eb0:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004eb2:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004eb4:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004eb8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    return HAL_ERROR;
 8004ebc:	e7dd      	b.n	8004e7a <HAL_TIM_SlaveConfigSynchro+0x6a>
  __HAL_LOCK(htim);
 8004ebe:	2002      	movs	r0, #2
}
 8004ec0:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec2:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec4:	690b      	ldr	r3, [r1, #16]
 8004ec6:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec8:	f020 0010 	bic.w	r0, r0, #16
 8004ecc:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ece:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ed0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ed4:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004ed8:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004eda:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004edc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ee0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004ee4:	6223      	str	r3, [r4, #32]
 8004ee6:	e7cf      	b.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x78>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004ee8:	2d05      	cmp	r5, #5
 8004eea:	d0c0      	beq.n	8004e6e <HAL_TIM_SlaveConfigSynchro+0x5e>
      tmpccer = htim->Instance->CCER;
 8004eec:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004eee:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004ef0:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004ef2:	f020 0001 	bic.w	r0, r0, #1
 8004ef6:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004ef8:	69a3      	ldr	r3, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004efe:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004f02:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004f04:	6225      	str	r5, [r4, #32]
      break;
 8004f06:	e7bf      	b.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x78>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f08:	6888      	ldr	r0, [r1, #8]
 8004f0a:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8004f0c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004f12:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f14:	6a20      	ldr	r0, [r4, #32]
 8004f16:	f020 0001 	bic.w	r0, r0, #1
 8004f1a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f22:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004f26:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004f28:	6221      	str	r1, [r4, #32]
 8004f2a:	e7ad      	b.n	8004e88 <HAL_TIM_SlaveConfigSynchro+0x78>

08004f2c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f2c:	4a29      	ldr	r2, [pc, #164]	; (8004fd4 <TIM_Base_SetConfig+0xa8>)
  tmpcr1 = TIMx->CR1;
 8004f2e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f30:	4290      	cmp	r0, r2
{
 8004f32:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	d043      	beq.n	8004fbe <TIM_Base_SetConfig+0x92>
 8004f36:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004f3a:	d018      	beq.n	8004f6e <TIM_Base_SetConfig+0x42>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3c:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8004f40:	4290      	cmp	r0, r2
 8004f42:	d029      	beq.n	8004f98 <TIM_Base_SetConfig+0x6c>
 8004f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f48:	4290      	cmp	r0, r2
 8004f4a:	d025      	beq.n	8004f98 <TIM_Base_SetConfig+0x6c>
 8004f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f50:	4290      	cmp	r0, r2
 8004f52:	d021      	beq.n	8004f98 <TIM_Base_SetConfig+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f54:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f56:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004f58:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004f60:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8004f62:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f66:	6282      	str	r2, [r0, #40]	; 0x28
}
 8004f68:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004f6a:	6143      	str	r3, [r0, #20]
}
 8004f6c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004f6e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f70:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f76:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f7c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f7e:	694a      	ldr	r2, [r1, #20]
 8004f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f84:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004f86:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f88:	688b      	ldr	r3, [r1, #8]
 8004f8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f8c:	680b      	ldr	r3, [r1, #0]
 8004f8e:	6283      	str	r3, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004f90:	2301      	movs	r3, #1
}
 8004f92:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004f94:	6143      	str	r3, [r0, #20]
}
 8004f96:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f98:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f9a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fa6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004fa8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004faa:	688b      	ldr	r3, [r1, #8]
 8004fac:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fae:	680b      	ldr	r3, [r1, #0]
 8004fb0:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb2:	690b      	ldr	r3, [r1, #16]
 8004fb4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004fb6:	2301      	movs	r3, #1
}
 8004fb8:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8004fba:	6143      	str	r3, [r0, #20]
}
 8004fbc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004fbe:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004fc6:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fcc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fce:	694a      	ldr	r2, [r1, #20]
 8004fd0:	e7e7      	b.n	8004fa2 <TIM_Base_SetConfig+0x76>
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00

08004fd8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fd8:	6a03      	ldr	r3, [r0, #32]
 8004fda:	f023 0310 	bic.w	r3, r3, #16
 8004fde:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004fe0:	6a03      	ldr	r3, [r0, #32]
{
 8004fe2:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8004fe4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004fe6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004fee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ffc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005000:	4d11      	ldr	r5, [pc, #68]	; (8005048 <TIM_OC2_SetConfig+0x70>)
 8005002:	42a8      	cmp	r0, r5
 8005004:	d018      	beq.n	8005038 <TIM_OC2_SetConfig+0x60>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	4d11      	ldr	r5, [pc, #68]	; (800504c <TIM_OC2_SetConfig+0x74>)
 8005008:	42a8      	cmp	r0, r5
 800500a:	d006      	beq.n	800501a <TIM_OC2_SetConfig+0x42>
 800500c:	4d10      	ldr	r5, [pc, #64]	; (8005050 <TIM_OC2_SetConfig+0x78>)
 800500e:	42a8      	cmp	r0, r5
 8005010:	d003      	beq.n	800501a <TIM_OC2_SetConfig+0x42>
 8005012:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005016:	42a8      	cmp	r0, r5
 8005018:	d107      	bne.n	800502a <TIM_OC2_SetConfig+0x52>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800501a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800501e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005022:	ea46 0c05 	orr.w	ip, r6, r5
 8005026:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800502a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800502c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800502e:	6182      	str	r2, [r0, #24]
}
 8005030:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005032:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005034:	6203      	str	r3, [r0, #32]
}
 8005036:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005038:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800503e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	e7e8      	b.n	800501a <TIM_OC2_SetConfig+0x42>
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400

08005054 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	f000 811f 	beq.w	800529c <HAL_TIM_PWM_ConfigChannel+0x248>
 800505e:	2301      	movs	r3, #1
{
 8005060:	b570      	push	{r4, r5, r6, lr}
 8005062:	4604      	mov	r4, r0
 8005064:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005066:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800506a:	2a14      	cmp	r2, #20
 800506c:	d816      	bhi.n	800509c <HAL_TIM_PWM_ConfigChannel+0x48>
 800506e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005072:	0059      	.short	0x0059
 8005074:	00150015 	.word	0x00150015
 8005078:	006e0015 	.word	0x006e0015
 800507c:	00150015 	.word	0x00150015
 8005080:	00840015 	.word	0x00840015
 8005084:	00150015 	.word	0x00150015
 8005088:	00990015 	.word	0x00990015
 800508c:	00150015 	.word	0x00150015
 8005090:	00d80015 	.word	0x00d80015
 8005094:	00150015 	.word	0x00150015
 8005098:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 800509c:	2300      	movs	r3, #0
 800509e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80050a2:	2001      	movs	r0, #1
}
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050a6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050aa:	6a1a      	ldr	r2, [r3, #32]
 80050ac:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80050b2:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050b4:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80050b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050b8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80050bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050c4:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050c6:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80050ca:	ea41 5106 	orr.w	r1, r1, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	4e74      	ldr	r6, [pc, #464]	; (80052a0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80050d0:	42b3      	cmp	r3, r6
 80050d2:	d00b      	beq.n	80050ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80050d4:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 80050d8:	42b3      	cmp	r3, r6
 80050da:	d007      	beq.n	80050ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80050dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050e0:	42b3      	cmp	r3, r6
 80050e2:	d003      	beq.n	80050ec <HAL_TIM_PWM_ConfigChannel+0x98>
 80050e4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050e8:	42b3      	cmp	r3, r6
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0xa2>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050ec:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80050ee:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80050f2:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 80050f6:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80050f8:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80050fa:	686a      	ldr	r2, [r5, #4]
 80050fc:	65da      	str	r2, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 80050fe:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005100:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005102:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005104:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005108:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800510a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800510c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005110:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005112:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005114:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005118:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 800511a:	2300      	movs	r3, #0
 800511c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005120:	2000      	movs	r0, #0
}
 8005122:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005124:	6800      	ldr	r0, [r0, #0]
 8005126:	f7ff fbcd 	bl	80048c4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800512a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800512c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800512e:	6999      	ldr	r1, [r3, #24]
 8005130:	f041 0108 	orr.w	r1, r1, #8
 8005134:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005136:	6999      	ldr	r1, [r3, #24]
 8005138:	f021 0104 	bic.w	r1, r1, #4
 800513c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	4302      	orrs	r2, r0
 8005142:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005144:	2300      	movs	r3, #0
 8005146:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800514a:	2000      	movs	r0, #0
}
 800514c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800514e:	6800      	ldr	r0, [r0, #0]
 8005150:	f7ff ff42 	bl	8004fd8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005154:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005156:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005158:	6999      	ldr	r1, [r3, #24]
 800515a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800515e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005160:	6999      	ldr	r1, [r3, #24]
 8005162:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005166:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800516e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005170:	2300      	movs	r3, #0
 8005172:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2000      	movs	r0, #0
}
 8005178:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	f7ff fbdc 	bl	8004938 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005180:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005182:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005184:	69d9      	ldr	r1, [r3, #28]
 8005186:	f041 0108 	orr.w	r1, r1, #8
 800518a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800518c:	69d9      	ldr	r1, [r3, #28]
 800518e:	f021 0104 	bic.w	r1, r1, #4
 8005192:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	4302      	orrs	r2, r0
 8005198:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800519a:	2300      	movs	r3, #0
 800519c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80051a0:	2000      	movs	r0, #0
}
 80051a2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051a4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051a6:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051ae:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80051b0:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80051b2:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80051b4:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051b6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80051ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051be:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c2:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80051c4:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051c8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051cc:	4e34      	ldr	r6, [pc, #208]	; (80052a0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80051ce:	42b3      	cmp	r3, r6
 80051d0:	d00b      	beq.n	80051ea <HAL_TIM_PWM_ConfigChannel+0x196>
 80051d2:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 80051d6:	42b3      	cmp	r3, r6
 80051d8:	d007      	beq.n	80051ea <HAL_TIM_PWM_ConfigChannel+0x196>
 80051da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80051de:	42b3      	cmp	r3, r6
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_PWM_ConfigChannel+0x196>
 80051e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80051e6:	42b3      	cmp	r3, r6
 80051e8:	d104      	bne.n	80051f4 <HAL_TIM_PWM_ConfigChannel+0x1a0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051ea:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051ec:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051f0:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 80051f4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80051f6:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80051f8:	686a      	ldr	r2, [r5, #4]
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80051fc:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051fe:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005200:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005202:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005206:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005208:	69d9      	ldr	r1, [r3, #28]
 800520a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800520e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005210:	69da      	ldr	r2, [r3, #28]
 8005212:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005216:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005218:	2300      	movs	r3, #0
 800521a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800521e:	2000      	movs	r0, #0
}
 8005220:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005222:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005224:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800522c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800522e:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005230:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005232:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005234:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005238:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800523c:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800523e:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005240:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005244:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	4e15      	ldr	r6, [pc, #84]	; (80052a0 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800524a:	42b3      	cmp	r3, r6
 800524c:	d00b      	beq.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x212>
 800524e:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8005252:	42b3      	cmp	r3, r6
 8005254:	d007      	beq.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005256:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800525a:	42b3      	cmp	r3, r6
 800525c:	d003      	beq.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x212>
 800525e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005262:	42b3      	cmp	r3, r6
 8005264:	d104      	bne.n	8005270 <HAL_TIM_PWM_ConfigChannel+0x21c>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005266:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005268:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800526c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005270:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005274:	686a      	ldr	r2, [r5, #4]
 8005276:	659a      	str	r2, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8005278:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800527a:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800527c:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800527e:	f041 0108 	orr.w	r1, r1, #8
 8005282:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005286:	f021 0104 	bic.w	r1, r1, #4
 800528a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800528c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800528e:	432a      	orrs	r2, r5
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8005292:	2300      	movs	r3, #0
 8005294:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005298:	2000      	movs	r0, #0
}
 800529a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800529c:	2002      	movs	r0, #2
}
 800529e:	4770      	bx	lr
 80052a0:	40012c00 	.word	0x40012c00

080052a4 <TIM_TI1_SetConfig>:
{
 80052a4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a6:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052a8:	4e11      	ldr	r6, [pc, #68]	; (80052f0 <TIM_TI1_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052aa:	f025 0501 	bic.w	r5, r5, #1
 80052ae:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052b0:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80052b2:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80052b4:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052b6:	d009      	beq.n	80052cc <TIM_TI1_SetConfig+0x28>
 80052b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80052bc:	d006      	beq.n	80052cc <TIM_TI1_SetConfig+0x28>
 80052be:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 80052c2:	42b0      	cmp	r0, r6
 80052c4:	d002      	beq.n	80052cc <TIM_TI1_SetConfig+0x28>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80052c6:	f044 0401 	orr.w	r4, r4, #1
 80052ca:	e003      	b.n	80052d4 <TIM_TI1_SetConfig+0x30>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052cc:	f024 0c03 	bic.w	ip, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80052d0:	ea4c 0402 	orr.w	r4, ip, r2
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052d4:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052da:	f025 020a 	bic.w	r2, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052de:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052e0:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052e4:	4323      	orrs	r3, r4
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052e6:	4311      	orrs	r1, r2
  TIMx->CCMR1 = tmpccmr1;
 80052e8:	6183      	str	r3, [r0, #24]
}
 80052ea:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 80052ec:	6201      	str	r1, [r0, #32]
}
 80052ee:	4770      	bx	lr
 80052f0:	40012c00 	.word	0x40012c00

080052f4 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop

080052f8 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d061      	beq.n	80053c0 <HAL_TIMEx_HallSensor_Init+0xc8>
{
 80052fc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8005302:	b088      	sub	sp, #32
 8005304:	460d      	mov	r5, r1
 8005306:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8005308:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800530c:	2b00      	cmp	r3, #0
 800530e:	d052      	beq.n	80053b6 <HAL_TIMEx_HallSensor_Init+0xbe>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005310:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	2302      	movs	r3, #2
 8005314:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005318:	f851 0b04 	ldr.w	r0, [r1], #4
 800531c:	f7ff fe06 	bl	8004f2c <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005320:	68ab      	ldr	r3, [r5, #8]
 8005322:	6829      	ldr	r1, [r5, #0]
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	2203      	movs	r2, #3
 8005328:	f7ff ffbc 	bl	80052a4 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800532c:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800532e:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005330:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005332:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005334:	f022 020c 	bic.w	r2, r2, #12
 8005338:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800533a:	6983      	ldr	r3, [r0, #24]
 800533c:	4333      	orrs	r3, r6
 800533e:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005340:	6843      	ldr	r3, [r0, #4]
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005348:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800534a:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800534c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005350:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005352:	6883      	ldr	r3, [r0, #8]
 8005354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005358:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800535a:	6883      	ldr	r3, [r0, #8]
 800535c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005360:	f023 0307 	bic.w	r3, r3, #7
 8005364:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005366:	6883      	ldr	r3, [r0, #8]
 8005368:	f043 0304 	orr.w	r3, r3, #4
 800536c:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800536e:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005370:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005372:	2370      	movs	r3, #112	; 0x70
 8005374:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005376:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800537a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800537e:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005380:	f7ff fe2a 	bl	8004fd8 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	6851      	ldr	r1, [r2, #4]
 8005388:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800538c:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800538e:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005390:	2301      	movs	r3, #1
  return HAL_OK;
 8005392:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005394:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8005398:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800539e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80053ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80053b2:	b008      	add	sp, #32
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80053b6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 80053ba:	f7ff ff9b 	bl	80052f4 <HAL_TIMEx_HallSensor_MspInit>
 80053be:	e7a7      	b.n	8005310 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 80053c0:	2001      	movs	r0, #1
}
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d02c      	beq.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 80053cc:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ce:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053d0:	4d16      	ldr	r5, [pc, #88]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80053d2:	2302      	movs	r3, #2
 80053d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053d8:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80053da:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80053dc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053de:	d018      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80053e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e6:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80053ec:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ee:	d002      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d104      	bne.n	8005400 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f6:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053fc:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fe:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005400:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005402:	2201      	movs	r2, #1
 8005404:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005408:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800540c:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800540e:	4618      	mov	r0, r3
}
 8005410:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005412:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005414:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005418:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800541a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005420:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005422:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	e7e7      	b.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 8005426:	2002      	movs	r0, #2
}
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40014000 	.word	0x40014000

08005434 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005434:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005438:	2b01      	cmp	r3, #1
 800543a:	d039      	beq.n	80054b0 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
{
 800543c:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800543e:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005446:	4602      	mov	r2, r0
 8005448:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800544a:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800544c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800544e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005452:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005458:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800545a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800545c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005460:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005462:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005468:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800546a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800546c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005470:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005472:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005474:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005478:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800547a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800547e:	4c0d      	ldr	r4, [pc, #52]	; (80054b4 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
 8005480:	42a0      	cmp	r0, r4
 8005482:	d007      	beq.n	8005494 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005484:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005486:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005488:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800548c:	4608      	mov	r0, r1
}
 800548e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005492:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005494:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005496:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800549a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800549e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054a0:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80054a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054a6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80054a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054ac:	430b      	orrs	r3, r1
 80054ae:	e7e9      	b.n	8005484 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
  __HAL_LOCK(htim);
 80054b0:	2002      	movs	r0, #2
}
 80054b2:	4770      	bx	lr
 80054b4:	40012c00 	.word	0x40012c00

080054b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054ba:	07da      	lsls	r2, r3, #31
{
 80054bc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054be:	d506      	bpl.n	80054ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054c0:	6801      	ldr	r1, [r0, #0]
 80054c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80054c4:	684a      	ldr	r2, [r1, #4]
 80054c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80054ca:	4322      	orrs	r2, r4
 80054cc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ce:	079c      	lsls	r4, r3, #30
 80054d0:	d506      	bpl.n	80054e0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054d2:	6801      	ldr	r1, [r0, #0]
 80054d4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80054d6:	684a      	ldr	r2, [r1, #4]
 80054d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054dc:	4322      	orrs	r2, r4
 80054de:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054e0:	0759      	lsls	r1, r3, #29
 80054e2:	d506      	bpl.n	80054f2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054e4:	6801      	ldr	r1, [r0, #0]
 80054e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80054e8:	684a      	ldr	r2, [r1, #4]
 80054ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054ee:	4322      	orrs	r2, r4
 80054f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054f2:	071a      	lsls	r2, r3, #28
 80054f4:	d506      	bpl.n	8005504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054f6:	6801      	ldr	r1, [r0, #0]
 80054f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80054fa:	684a      	ldr	r2, [r1, #4]
 80054fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005500:	4322      	orrs	r2, r4
 8005502:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005504:	06dc      	lsls	r4, r3, #27
 8005506:	d506      	bpl.n	8005516 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005508:	6801      	ldr	r1, [r0, #0]
 800550a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800550c:	688a      	ldr	r2, [r1, #8]
 800550e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005512:	4322      	orrs	r2, r4
 8005514:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005516:	0699      	lsls	r1, r3, #26
 8005518:	d506      	bpl.n	8005528 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800551a:	6801      	ldr	r1, [r0, #0]
 800551c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800551e:	688a      	ldr	r2, [r1, #8]
 8005520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005524:	4322      	orrs	r2, r4
 8005526:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005528:	065a      	lsls	r2, r3, #25
 800552a:	d509      	bpl.n	8005540 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800552c:	6801      	ldr	r1, [r0, #0]
 800552e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005530:	684a      	ldr	r2, [r1, #4]
 8005532:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005536:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005538:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800553c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800553e:	d00b      	beq.n	8005558 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005540:	061b      	lsls	r3, r3, #24
 8005542:	d506      	bpl.n	8005552 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005544:	6802      	ldr	r2, [r0, #0]
 8005546:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005548:	6853      	ldr	r3, [r2, #4]
 800554a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800554e:	430b      	orrs	r3, r1
 8005550:	6053      	str	r3, [r2, #4]
  }
}
 8005552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005556:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005558:	684a      	ldr	r2, [r1, #4]
 800555a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800555c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005560:	4322      	orrs	r2, r4
 8005562:	604a      	str	r2, [r1, #4]
 8005564:	e7ec      	b.n	8005540 <UART_AdvFeatureConfig+0x88>
 8005566:	bf00      	nop

08005568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800556c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005570:	6804      	ldr	r4, [r0, #0]
{
 8005572:	4607      	mov	r7, r0
 8005574:	460e      	mov	r6, r1
 8005576:	4615      	mov	r5, r2
 8005578:	4699      	mov	r9, r3
 800557a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800557e:	d10a      	bne.n	8005596 <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005580:	69e3      	ldr	r3, [r4, #28]
 8005582:	ea36 0303 	bics.w	r3, r6, r3
 8005586:	bf0c      	ite	eq
 8005588:	2301      	moveq	r3, #1
 800558a:	2300      	movne	r3, #0
 800558c:	429d      	cmp	r5, r3
 800558e:	d0f7      	beq.n	8005580 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8005590:	2000      	movs	r0, #0
}
 8005592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005596:	69e3      	ldr	r3, [r4, #28]
 8005598:	ea36 0303 	bics.w	r3, r6, r3
 800559c:	bf0c      	ite	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	2300      	movne	r3, #0
 80055a2:	42ab      	cmp	r3, r5
 80055a4:	d1f4      	bne.n	8005590 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7fd fddf 	bl	8003168 <HAL_GetTick>
 80055aa:	eba0 0009 	sub.w	r0, r0, r9
 80055ae:	4540      	cmp	r0, r8
 80055b0:	d831      	bhi.n	8005616 <UART_WaitOnFlagUntilTimeout+0xae>
 80055b2:	f1b8 0f00 	cmp.w	r8, #0
 80055b6:	d02e      	beq.n	8005616 <UART_WaitOnFlagUntilTimeout+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055b8:	683c      	ldr	r4, [r7, #0]
 80055ba:	6823      	ldr	r3, [r4, #0]
 80055bc:	0759      	lsls	r1, r3, #29
 80055be:	4622      	mov	r2, r4
 80055c0:	d5db      	bpl.n	800557a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c2:	69e3      	ldr	r3, [r4, #28]
 80055c4:	051b      	lsls	r3, r3, #20
 80055c6:	d5d8      	bpl.n	800557a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055cc:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d6:	e844 3100 	strex	r1, r3, [r4]
 80055da:	b139      	cbz	r1, 80055ec <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	e852 3f00 	ldrex	r3, [r2]
 80055e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	e842 3100 	strex	r1, r3, [r2]
 80055e8:	2900      	cmp	r1, #0
 80055ea:	d1f7      	bne.n	80055dc <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	f102 0308 	add.w	r3, r2, #8
 80055f0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	f102 0008 	add.w	r0, r2, #8
 80055fc:	e840 3100 	strex	r1, r3, [r0]
 8005600:	2900      	cmp	r1, #0
 8005602:	d1f3      	bne.n	80055ec <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 8005604:	2320      	movs	r3, #32
 8005606:	67bb      	str	r3, [r7, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8005608:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800560c:	67fb      	str	r3, [r7, #124]	; 0x7c
          return HAL_TIMEOUT;
 800560e:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          return HAL_TIMEOUT;
 8005614:	e7bd      	b.n	8005592 <UART_WaitOnFlagUntilTimeout+0x2a>
 8005616:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005618:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800561c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	e842 3100 	strex	r1, r3, [r2]
 8005624:	2900      	cmp	r1, #0
 8005626:	d1f7      	bne.n	8005618 <UART_WaitOnFlagUntilTimeout+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	f102 0308 	add.w	r3, r2, #8
 800562c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005630:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005634:	f102 0008 	add.w	r0, r2, #8
 8005638:	e840 3100 	strex	r1, r3, [r0]
 800563c:	2900      	cmp	r1, #0
 800563e:	d1f3      	bne.n	8005628 <UART_WaitOnFlagUntilTimeout+0xc0>
        huart->gState = HAL_UART_STATE_READY;
 8005640:	2320      	movs	r3, #32
 8005642:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8005644:	f887 1074 	strb.w	r1, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005648:	67fb      	str	r3, [r7, #124]	; 0x7c
        return HAL_TIMEOUT;
 800564a:	2003      	movs	r0, #3
 800564c:	e7a1      	b.n	8005592 <UART_WaitOnFlagUntilTimeout+0x2a>
 800564e:	bf00      	nop

08005650 <HAL_UART_Transmit>:
{
 8005650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005654:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8005656:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8005658:	2820      	cmp	r0, #32
{
 800565a:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800565c:	f040 808b 	bne.w	8005776 <HAL_UART_Transmit+0x126>
    if ((pData == NULL) || (Size == 0U))
 8005660:	4689      	mov	r9, r1
 8005662:	2900      	cmp	r1, #0
 8005664:	d045      	beq.n	80056f2 <HAL_UART_Transmit+0xa2>
 8005666:	4614      	mov	r4, r2
 8005668:	2a00      	cmp	r2, #0
 800566a:	d042      	beq.n	80056f2 <HAL_UART_Transmit+0xa2>
 800566c:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 800566e:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
 8005672:	2b01      	cmp	r3, #1
 8005674:	d07f      	beq.n	8005776 <HAL_UART_Transmit+0x126>
 8005676:	2301      	movs	r3, #1
 8005678:	f885 3074 	strb.w	r3, [r5, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005680:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005682:	f8c5 8080 	str.w	r8, [r5, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005686:	67ab      	str	r3, [r5, #120]	; 0x78
    tickstart = HAL_GetTick();
 8005688:	f7fd fd6e 	bl	8003168 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568c:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 800568e:	f8a5 4050 	strh.w	r4, [r5, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8005696:	f8a5 4052 	strh.w	r4, [r5, #82]	; 0x52
    tickstart = HAL_GetTick();
 800569a:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569c:	d06f      	beq.n	800577e <HAL_UART_Transmit+0x12e>
    while (huart->TxXferCount > 0U)
 800569e:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
    __HAL_UNLOCK(huart);
 80056a2:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80056a4:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80056a6:	f885 2074 	strb.w	r2, [r5, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80056aa:	b1b3      	cbz	r3, 80056da <HAL_UART_Transmit+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ac:	682c      	ldr	r4, [r5, #0]
 80056ae:	1c71      	adds	r1, r6, #1
 80056b0:	d123      	bne.n	80056fa <HAL_UART_Transmit+0xaa>
 80056b2:	69e2      	ldr	r2, [r4, #28]
 80056b4:	0612      	lsls	r2, r2, #24
 80056b6:	d5fc      	bpl.n	80056b2 <HAL_UART_Transmit+0x62>
      if (pdata8bits == NULL)
 80056b8:	f1b9 0f00 	cmp.w	r9, #0
 80056bc:	d056      	beq.n	800576c <HAL_UART_Transmit+0x11c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056be:	f819 3b01 	ldrb.w	r3, [r9], #1
 80056c2:	8523      	strh	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80056c4:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056d0:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e9      	bne.n	80056ae <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056da:	9600      	str	r6, [sp, #0]
 80056dc:	463b      	mov	r3, r7
 80056de:	2200      	movs	r2, #0
 80056e0:	2140      	movs	r1, #64	; 0x40
 80056e2:	4628      	mov	r0, r5
 80056e4:	f7ff ff40 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d16c      	bne.n	80057c6 <HAL_UART_Transmit+0x176>
    huart->gState = HAL_UART_STATE_READY;
 80056ec:	2320      	movs	r3, #32
 80056ee:	67ab      	str	r3, [r5, #120]	; 0x78
    return HAL_OK;
 80056f0:	e000      	b.n	80056f4 <HAL_UART_Transmit+0xa4>
      return  HAL_ERROR;
 80056f2:	2001      	movs	r0, #1
}
 80056f4:	b003      	add	sp, #12
 80056f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056fa:	69e3      	ldr	r3, [r4, #28]
 80056fc:	061b      	lsls	r3, r3, #24
 80056fe:	d4db      	bmi.n	80056b8 <HAL_UART_Transmit+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005700:	f7fd fd32 	bl	8003168 <HAL_GetTick>
 8005704:	1bc0      	subs	r0, r0, r7
 8005706:	4286      	cmp	r6, r0
 8005708:	d33f      	bcc.n	800578a <HAL_UART_Transmit+0x13a>
 800570a:	2e00      	cmp	r6, #0
 800570c:	d03d      	beq.n	800578a <HAL_UART_Transmit+0x13a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800570e:	682c      	ldr	r4, [r5, #0]
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	0752      	lsls	r2, r2, #29
 8005714:	4623      	mov	r3, r4
 8005716:	d5ca      	bpl.n	80056ae <HAL_UART_Transmit+0x5e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005718:	69e2      	ldr	r2, [r4, #28]
 800571a:	0510      	lsls	r0, r2, #20
 800571c:	d5c7      	bpl.n	80056ae <HAL_UART_Transmit+0x5e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800571e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005722:	6222      	str	r2, [r4, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005724:	e854 2f00 	ldrex	r2, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005728:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	e844 2100 	strex	r1, r2, [r4]
 8005730:	b139      	cbz	r1, 8005742 <HAL_UART_Transmit+0xf2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005732:	e853 2f00 	ldrex	r2, [r3]
 8005736:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	e843 2100 	strex	r1, r2, [r3]
 800573e:	2900      	cmp	r1, #0
 8005740:	d1f7      	bne.n	8005732 <HAL_UART_Transmit+0xe2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	f103 0208 	add.w	r2, r3, #8
 8005746:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	f103 0008 	add.w	r0, r3, #8
 8005752:	e840 2100 	strex	r1, r2, [r0]
 8005756:	2900      	cmp	r1, #0
 8005758:	d1f3      	bne.n	8005742 <HAL_UART_Transmit+0xf2>
          huart->gState = HAL_UART_STATE_READY;
 800575a:	2320      	movs	r3, #32
 800575c:	67ab      	str	r3, [r5, #120]	; 0x78
          __HAL_UNLOCK(huart);
 800575e:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005762:	67eb      	str	r3, [r5, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005764:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005766:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 800576a:	e7c3      	b.n	80056f4 <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800576c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005774:	e7a5      	b.n	80056c2 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8005776:	2002      	movs	r0, #2
}
 8005778:	b003      	add	sp, #12
 800577a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577e:	692b      	ldr	r3, [r5, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d18c      	bne.n	800569e <HAL_UART_Transmit+0x4e>
 8005784:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8005786:	4699      	mov	r9, r3
 8005788:	e789      	b.n	800569e <HAL_UART_Transmit+0x4e>
 800578a:	682b      	ldr	r3, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005790:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	e843 2100 	strex	r1, r2, [r3]
 8005798:	2900      	cmp	r1, #0
 800579a:	d1f7      	bne.n	800578c <HAL_UART_Transmit+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	f103 0208 	add.w	r2, r3, #8
 80057a0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	f103 0008 	add.w	r0, r3, #8
 80057ac:	e840 2100 	strex	r1, r2, [r0]
 80057b0:	2900      	cmp	r1, #0
 80057b2:	d1f3      	bne.n	800579c <HAL_UART_Transmit+0x14c>
        huart->gState = HAL_UART_STATE_READY;
 80057b4:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80057b6:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80057b8:	67ab      	str	r3, [r5, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80057ba:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80057be:	67eb      	str	r3, [r5, #124]	; 0x7c
}
 80057c0:	b003      	add	sp, #12
 80057c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return HAL_TIMEOUT;
 80057c6:	2003      	movs	r0, #3
 80057c8:	e794      	b.n	80056f4 <HAL_UART_Transmit+0xa4>
 80057ca:	bf00      	nop

080057cc <HAL_UART_Init>:
  if (huart == NULL)
 80057cc:	2800      	cmp	r0, #0
 80057ce:	f000 80d5 	beq.w	800597c <HAL_UART_Init+0x1b0>
{
 80057d2:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80057d4:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80057d6:	b082      	sub	sp, #8
 80057d8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 8082 	beq.w	80058e4 <HAL_UART_Init+0x118>
  __HAL_UART_DISABLE(huart);
 80057e0:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057e2:	6920      	ldr	r0, [r4, #16]
 80057e4:	6965      	ldr	r5, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 80057e6:	2224      	movs	r2, #36	; 0x24
 80057e8:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80057ea:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057ec:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80057ee:	f021 0101 	bic.w	r1, r1, #1
 80057f2:	6019      	str	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f4:	4302      	orrs	r2, r0
 80057f6:	432a      	orrs	r2, r5
 80057f8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057fa:	681d      	ldr	r5, [r3, #0]
 80057fc:	4983      	ldr	r1, [pc, #524]	; (8005a0c <HAL_UART_Init+0x240>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057fe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005800:	4029      	ands	r1, r5
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 800580a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800580c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005810:	430a      	orrs	r2, r1
 8005812:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005814:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005816:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005818:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 800581c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800581e:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005820:	497b      	ldr	r1, [pc, #492]	; (8005a10 <HAL_UART_Init+0x244>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005822:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005824:	428b      	cmp	r3, r1
 8005826:	d00c      	beq.n	8005842 <HAL_UART_Init+0x76>
 8005828:	4a7a      	ldr	r2, [pc, #488]	; (8005a14 <HAL_UART_Init+0x248>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d010      	beq.n	8005850 <HAL_UART_Init+0x84>
 800582e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005832:	4293      	cmp	r3, r2
 8005834:	d00c      	beq.n	8005850 <HAL_UART_Init+0x84>
  huart->RxISR = NULL;
 8005836:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005838:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
    return HAL_ERROR;
 800583c:	2001      	movs	r0, #1
}
 800583e:	b002      	add	sp, #8
 8005840:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005842:	4b75      	ldr	r3, [pc, #468]	; (8005a18 <HAL_UART_Init+0x24c>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	3b01      	subs	r3, #1
 800584c:	2b02      	cmp	r3, #2
 800584e:	d96b      	bls.n	8005928 <HAL_UART_Init+0x15c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005850:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005854:	f000 8097 	beq.w	8005986 <HAL_UART_Init+0x1ba>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe ff00 	bl	800465c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800585c:	bb50      	cbnz	r0, 80058b4 <HAL_UART_Init+0xe8>
  huart->RxISR = NULL;
 800585e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8005860:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	d138      	bne.n	80058dc <HAL_UART_Init+0x110>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 8005872:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005874:	6899      	ldr	r1, [r3, #8]
 8005876:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 800587a:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800587c:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587e:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 8005880:	f041 0101 	orr.w	r1, r1, #1
 8005884:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005886:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  tickstart = HAL_GetTick();
 800588a:	f7fd fc6d 	bl	8003168 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 8005894:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005896:	d42a      	bmi.n	80058ee <HAL_UART_Init+0x122>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	075b      	lsls	r3, r3, #29
 800589c:	d436      	bmi.n	800590c <HAL_UART_Init+0x140>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80058a0:	2220      	movs	r2, #32
  return HAL_OK;
 80058a2:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 80058a4:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80058a6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80058aa:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ac:	6623      	str	r3, [r4, #96]	; 0x60
}
 80058ae:	b002      	add	sp, #8
 80058b0:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80058b2:	485a      	ldr	r0, [pc, #360]	; (8005a1c <HAL_UART_Init+0x250>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058b4:	6863      	ldr	r3, [r4, #4]
 80058b6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80058ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80058be:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058c0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80058c4:	f1a0 0310 	sub.w	r3, r0, #16
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d8b4      	bhi.n	8005836 <HAL_UART_Init+0x6a>
        huart->Instance->BRR = usartdiv;
 80058cc:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 80058ce:	2300      	movs	r3, #0
        huart->Instance->BRR = usartdiv;
 80058d0:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 80058d2:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0c6      	beq.n	800586a <HAL_UART_Init+0x9e>
    UART_AdvFeatureConfig(huart);
 80058dc:	4620      	mov	r0, r4
 80058de:	f7ff fdeb 	bl	80054b8 <UART_AdvFeatureConfig>
 80058e2:	e7c2      	b.n	800586a <HAL_UART_Init+0x9e>
    huart->Lock = HAL_UNLOCKED;
 80058e4:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80058e8:	f7fc ff1e 	bl	8002728 <HAL_UART_MspInit>
 80058ec:	e778      	b.n	80057e0 <HAL_UART_Init+0x14>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	462a      	mov	r2, r5
 80058f6:	4603      	mov	r3, r0
 80058f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7ff fe33 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8005902:	b978      	cbnz	r0, 8005924 <HAL_UART_Init+0x158>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	075b      	lsls	r3, r3, #29
 800590a:	d5c8      	bpl.n	800589e <HAL_UART_Init+0xd2>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800590c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	2200      	movs	r2, #0
 8005914:	4633      	mov	r3, r6
 8005916:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800591a:	4620      	mov	r0, r4
 800591c:	f7ff fe24 	bl	8005568 <UART_WaitOnFlagUntilTimeout>
 8005920:	2800      	cmp	r0, #0
 8005922:	d0bc      	beq.n	800589e <HAL_UART_Init+0xd2>
      return HAL_TIMEOUT;
 8005924:	2003      	movs	r0, #3
 8005926:	e78a      	b.n	800583e <HAL_UART_Init+0x72>
 8005928:	4a3d      	ldr	r2, [pc, #244]	; (8005a20 <HAL_UART_Init+0x254>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800592a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800592e:	5cd3      	ldrb	r3, [r2, r3]
 8005930:	d048      	beq.n	80059c4 <HAL_UART_Init+0x1f8>
    switch (clocksource)
 8005932:	2b08      	cmp	r3, #8
 8005934:	f63f af7f 	bhi.w	8005836 <HAL_UART_Init+0x6a>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <HAL_UART_Init+0x174>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005859 	.word	0x08005859
 8005944:	08005971 	.word	0x08005971
 8005948:	080058b3 	.word	0x080058b3
 800594c:	08005837 	.word	0x08005837
 8005950:	08005965 	.word	0x08005965
 8005954:	08005837 	.word	0x08005837
 8005958:	08005837 	.word	0x08005837
 800595c:	08005837 	.word	0x08005837
 8005960:	08005981 	.word	0x08005981
        pclk = HAL_RCC_GetSysClockFreq();
 8005964:	f7fe fe3e 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005968:	2800      	cmp	r0, #0
 800596a:	f43f af78 	beq.w	800585e <HAL_UART_Init+0x92>
 800596e:	e7a1      	b.n	80058b4 <HAL_UART_Init+0xe8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fe fe8c 	bl	800468c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005974:	2800      	cmp	r0, #0
 8005976:	f43f af72 	beq.w	800585e <HAL_UART_Init+0x92>
 800597a:	e79b      	b.n	80058b4 <HAL_UART_Init+0xe8>
    return HAL_ERROR;
 800597c:	2001      	movs	r0, #1
}
 800597e:	4770      	bx	lr
    switch (clocksource)
 8005980:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005984:	e796      	b.n	80058b4 <HAL_UART_Init+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005986:	f7fe fe69 	bl	800465c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800598a:	2800      	cmp	r0, #0
 800598c:	f43f af67 	beq.w	800585e <HAL_UART_Init+0x92>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005990:	0043      	lsls	r3, r0, #1
 8005992:	6862      	ldr	r2, [r4, #4]
 8005994:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8005998:	fbb3 f3f2 	udiv	r3, r3, r2
 800599c:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800599e:	f1a2 0010 	sub.w	r0, r2, #16
 80059a2:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80059a6:	4288      	cmp	r0, r1
 80059a8:	f63f af45 	bhi.w	8005836 <HAL_UART_Init+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059ac:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 80059b0:	6820      	ldr	r0, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b2:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059b4:	f3c2 0242 	ubfx	r2, r2, #1, #3
  huart->RxISR = NULL;
 80059b8:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 80059be:	e9c4 1119 	strd	r1, r1, [r4, #100]	; 0x64
  return ret;
 80059c2:	e74f      	b.n	8005864 <HAL_UART_Init+0x98>
    switch (clocksource)
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	f63f af36 	bhi.w	8005836 <HAL_UART_Init+0x6a>
 80059ca:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <HAL_UART_Init+0x204>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	08005987 	.word	0x08005987
 80059d4:	080059fb 	.word	0x080059fb
 80059d8:	08005a07 	.word	0x08005a07
 80059dc:	08005837 	.word	0x08005837
 80059e0:	080059f5 	.word	0x080059f5
 80059e4:	08005837 	.word	0x08005837
 80059e8:	08005837 	.word	0x08005837
 80059ec:	08005837 	.word	0x08005837
 80059f0:	08005a01 	.word	0x08005a01
        pclk = HAL_RCC_GetSysClockFreq();
 80059f4:	f7fe fdf6 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
        break;
 80059f8:	e7c7      	b.n	800598a <HAL_UART_Init+0x1be>
        pclk = HAL_RCC_GetPCLK2Freq();
 80059fa:	f7fe fe47 	bl	800468c <HAL_RCC_GetPCLK2Freq>
        break;
 80059fe:	e7c4      	b.n	800598a <HAL_UART_Init+0x1be>
    switch (clocksource)
 8005a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a04:	e7c5      	b.n	8005992 <HAL_UART_Init+0x1c6>
 8005a06:	4b07      	ldr	r3, [pc, #28]	; (8005a24 <HAL_UART_Init+0x258>)
 8005a08:	e7c3      	b.n	8005992 <HAL_UART_Init+0x1c6>
 8005a0a:	bf00      	nop
 8005a0c:	efff69f3 	.word	0xefff69f3
 8005a10:	40013800 	.word	0x40013800
 8005a14:	40004400 	.word	0x40004400
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	007a1200 	.word	0x007a1200
 8005a20:	08008ab8 	.word	0x08008ab8
 8005a24:	00f42400 	.word	0x00f42400

08005a28 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8005a28:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 8005a2a:	8840      	ldrh	r0, [r0, #2]
 8005a2c:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8005a30:	0c00      	lsrs	r0, r0, #16
 8005a32:	4770      	bx	lr

08005a34 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8005a34:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005a36:	8802      	ldrh	r2, [r0, #0]
 8005a38:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 8005a3a:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 8005a3e:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005a42:	fb02 f202 	mul.w	r2, r2, r2
 8005a46:	4562      	cmp	r2, ip
{
 8005a48:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005a4a:	d21a      	bcs.n	8005a82 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 8005a4c:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8005a50:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8005a54:	fa5f fc8c 	uxtb.w	ip, ip
 8005a58:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 8005a5c:	8882      	ldrh	r2, [r0, #4]
 8005a5e:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005a62:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8005a64:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005a68:	bfbc      	itt	lt
 8005a6a:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 8005a6e:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bfbc      	itt	lt
 8005a74:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8005a78:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005a7a:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005a7e:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8005a82:	b289      	uxth	r1, r1
 8005a84:	2000      	movs	r0, #0
 8005a86:	f361 000f 	bfi	r0, r1, #0, #16
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005a90:	b004      	add	sp, #16
 8005a92:	4770      	bx	lr

08005a94 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 8005a94:	4401      	add	r1, r0
 8005a96:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 8005a9a:	4770      	bx	lr

08005a9c <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8005a9c:	4401      	add	r1, r0
}
 8005a9e:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8005aa2:	4770      	bx	lr

08005aa4 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8005aa4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8005aa8:	864a      	strh	r2, [r1, #50]	; 0x32
}
 8005aaa:	4770      	bx	lr

08005aac <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8005aac:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8005ab0:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop

08005ab8 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8005abc:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8005abe:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 8005ac2:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8005ac6:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8005aca:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8005ace:	4770      	bx	lr

08005ad0 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8005ad0:	b120      	cbz	r0, 8005adc <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 8005ad2:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8005ad6:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8005ad8:	9b00      	ldr	r3, [sp, #0]
 8005ada:	60c3      	str	r3, [r0, #12]
  }
}
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop

08005ae0 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8005ae0:	b190      	cbz	r0, 8005b08 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8005ae2:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 8005ae4:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 8005ae6:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005ae8:	b151      	cbz	r1, 8005b00 <FCP_CalcCRC+0x20>
 8005aea:	1c82      	adds	r2, r0, #2
 8005aec:	3901      	subs	r1, #1
 8005aee:	3001      	adds	r0, #1
 8005af0:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 8005af4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005af8:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005afa:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 8005afc:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8005afe:	d1f9      	bne.n	8005af4 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8005b00:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 8005b04:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop

08005b0c <HALL_Init>:
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
                                     pHandle->_Super.bElToMecRatio;
 8005b0c:	7843      	ldrb	r3, [r0, #1]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8005b0e:	f8b0 c016 	ldrh.w	ip, [r0, #22]

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8005b12:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
 8005b14:	b570      	push	{r4, r5, r6, lr}
  hMaxReliableElSpeedUnit *= 2u;
 8005b16:	f8b0 e014 	ldrh.w	lr, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8005b1a:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 8005b1e:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8005b22:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 8005b26:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8005b2a:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 8005b2c:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005b30:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8005b32:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 8005b36:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 8005b3a:	d97c      	bls.n	8005c36 <HALL_Init+0x12a>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8005b3c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 8005b40:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005b44:	f242 7410 	movw	r4, #10000	; 0x2710
 8005b48:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005b4c:	fbb4 fcfc 	udiv	ip, r4, ip
 8005b50:	fa1f f48c 	uxth.w	r4, ip
 8005b54:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005b58:	4c39      	ldr	r4, [pc, #228]	; (8005c40 <HALL_Init+0x134>)
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005b5a:	69c6      	ldr	r6, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8005b5c:	f8a0 e0b2 	strh.w	lr, [r0, #178]	; 0xb2
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005b60:	fb0c f101 	mul.w	r1, ip, r1
 8005b64:	fba4 4101 	umull	r4, r1, r4, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005b68:	4c36      	ldr	r4, [pc, #216]	; (8005c44 <HALL_Init+0x138>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005b6a:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005b6e:	0989      	lsrs	r1, r1, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005b70:	fba4 4202 	umull	r4, r2, r4, r2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005b74:	040d      	lsls	r5, r1, #16
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005b76:	0892      	lsrs	r2, r2, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005b78:	f8c0 50b8 	str.w	r5, [r0, #184]	; 0xb8
                                   pHandle->SpeedSamplingFreqHz ) - 1u;

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
  /*--My Code --*/
  pHandle->HallStateCounter = 0;
 8005b7c:	2400      	movs	r4, #0
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005b7e:	eb02 0582 	add.w	r5, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005b82:	fbb2 f2fc 	udiv	r2, r2, ip
 8005b86:	fb06 f202 	mul.w	r2, r6, r2
  pHandle->HallStateCounter = 0;
 8005b8a:	f880 40a7 	strb.w	r4, [r0, #167]	; 0xa7
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005b8e:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005b92:	006a      	lsls	r2, r5, #1
                       / hMaxReliableElSpeedUnit);
 8005b94:	fbb2 f2fe 	udiv	r2, r2, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005b98:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005b9c:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005ba0:	699d      	ldr	r5, [r3, #24]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005ba2:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005ba6:	fb0c f202 	mul.w	r2, ip, r2
  /*--My Code Ends--*/

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 8005baa:	f890 c048 	ldrb.w	ip, [r0, #72]	; 0x48
 8005bae:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
 8005bb2:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8005bb6:	f8b0 c024 	ldrh.w	ip, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005bba:	fbb2 f2fc 	udiv	r2, r2, ip
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8005bbe:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005bc0:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005bc4:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 8005bcc:	619d      	str	r5, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005bce:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005bd0:	695a      	ldr	r2, [r3, #20]
 8005bd2:	f042 0201 	orr.w	r2, r2, #1
 8005bd6:	615a      	str	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8005bd8:	611c      	str	r4, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	f042 0204 	orr.w	r2, r2, #4
 8005be0:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	f042 0202 	orr.w	r2, r2, #2
 8005be8:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 8005bf2:	625c      	str	r4, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 8005bf4:	6a1a      	ldr	r2, [r3, #32]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 8005c04:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8005c08:	b16a      	cbz	r2, 8005c26 <HALL_Init+0x11a>
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	b2d3      	uxtb	r3, r2
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005c0e:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8005c12:	f100 0250 	add.w	r2, r0, #80	; 0x50
 8005c16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005c1a:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8005c1e:	f843 1f04 	str.w	r1, [r3, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d1fb      	bne.n	8005c1e <HALL_Init+0x112>
  }

  /*--My code --*/
  pHandle->HallCounterHomePosition = pHandle->HallStateCounter;
  pHandle->HallStateHomePosition = pHandle->HallState;
 8005c26:	f890 30a6 	ldrb.w	r3, [r0, #166]	; 0xa6
 8005c2a:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9
  pHandle->HallCounterHomePosition = pHandle->HallStateCounter;
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
  /*-- My code ends --*/
}
 8005c34:	bd70      	pop	{r4, r5, r6, pc}
 8005c36:	f04f 0c96 	mov.w	ip, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8005c3a:	4664      	mov	r4, ip
 8005c3c:	e78a      	b.n	8005b54 <HALL_Init+0x48>
 8005c3e:	bf00      	nop
 8005c40:	10624dd3 	.word	0x10624dd3
 8005c44:	aaaaaaab 	.word	0xaaaaaaab

08005c48 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005c48:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005c4a:	68d1      	ldr	r1, [r2, #12]
 8005c4c:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 8005c50:	2300      	movs	r3, #0
{
 8005c52:	b430      	push	{r4, r5}
  pHandle->HallCounterHomePosition = 0;
  pHandle->HallStateHomePosition = 0;
  /*-- My code ends --*/

  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8005c54:	f8b0 40b0 	ldrh.w	r4, [r0, #176]	; 0xb0
 8005c58:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 8005c5a:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 8005c5c:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->HallStateCounter = 0;
 8005c60:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
  pHandle->RatioInc = false;
 8005c64:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->Direction = POSITIVE;
 8005c68:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->FirstCapt = 0u;
 8005c6c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->SpeedFIFOIdx = 0u;
 8005c70:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->BufferFilled = 0u;
 8005c74:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.bSpeedErrorNumber = 0;
 8005c78:	7003      	strb	r3, [r0, #0]
  pHandle->OVFCounter = 0u;
 8005c7a:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->HallCounterHomePosition = 0;
 8005c7e:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
  pHandle->_Super.hMecAccelUnitP = 0;
 8005c82:	8243      	strh	r3, [r0, #18]
  pHandle->CompSpeed = 0;
 8005c84:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
  pHandle->SensorIsReliable = true;
 8005c88:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8005c8c:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8005c8e:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005c90:	6813      	ldr	r3, [r2, #0]
 8005c92:	430b      	orrs	r3, r1
 8005c94:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005c96:	68d3      	ldr	r3, [r2, #12]
 8005c98:	f043 0302 	orr.w	r3, r3, #2
 8005c9c:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005c9e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005ca2:	bb0b      	cbnz	r3, 8005ce8 <HALL_Clear+0xa0>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005ca4:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005ca6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8005ca8:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005caa:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cac:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005cae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005cb0:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005cb2:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 8005cb6:	bf0c      	ite	eq
 8005cb8:	2401      	moveq	r4, #1
 8005cba:	2400      	movne	r4, #0
 8005cbc:	43ab      	bics	r3, r5
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8005ccc:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005cce:	bf08      	it	eq
 8005cd0:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8005cd4:	1e5a      	subs	r2, r3, #1
 8005cd6:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 8005cda:	2a05      	cmp	r2, #5
 8005cdc:	d85c      	bhi.n	8005d98 <HALL_Clear+0x150>
 8005cde:	e8df f002 	tbb	[pc, r2]
 8005ce2:	3329      	.short	0x3329
 8005ce4:	1f51473d 	.word	0x1f51473d
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005ce8:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005cea:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005cec:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005cee:	6914      	ldr	r4, [r2, #16]
 8005cf0:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005cf2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cf4:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005cf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005cf8:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005cfa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2101      	moveq	r1, #1
 8005d00:	2100      	movne	r1, #0
 8005d02:	43ab      	bics	r3, r5
 8005d04:	bf0c      	ite	eq
 8005d06:	2301      	moveq	r3, #1
 8005d08:	2300      	movne	r3, #0
 8005d0a:	43a2      	bics	r2, r4
 8005d0c:	bf0c      	ite	eq
 8005d0e:	2201      	moveq	r2, #1
 8005d10:	2200      	movne	r2, #0
 8005d12:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005d14:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005d18:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	e7d9      	b.n	8005cd4 <HALL_Clear+0x8c>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8005d20:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d22:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8005d26:	3b3f      	subs	r3, #63	; 0x3f
 8005d28:	b21b      	sxth	r3, r3
 8005d2a:	8083      	strh	r3, [r0, #4]
}
 8005d2c:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d2e:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
}
 8005d32:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005d34:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d36:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8005d3a:	333f      	adds	r3, #63	; 0x3f
 8005d3c:	b21b      	sxth	r3, r3
}
 8005d3e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 8005d40:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d42:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
}
 8005d46:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005d48:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d4a:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 8005d4e:	3b2a      	subs	r3, #42	; 0x2a
 8005d50:	b21b      	sxth	r3, r3
}
 8005d52:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 8005d54:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d56:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
}
 8005d5a:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005d5c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d5e:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8005d62:	332a      	adds	r3, #42	; 0x2a
 8005d64:	b21b      	sxth	r3, r3
}
 8005d66:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005d68:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d6a:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
}
 8005d6e:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005d70:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d72:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 8005d76:	3b15      	subs	r3, #21
 8005d78:	b21b      	sxth	r3, r3
}
 8005d7a:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005d7c:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d7e:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
}
 8005d82:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005d84:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005d86:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 8005d8a:	3315      	adds	r3, #21
 8005d8c:	b21b      	sxth	r3, r3
}
 8005d8e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005d90:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d92:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
}
 8005d96:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 8005d98:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005d9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8005d9e:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8005da2:	e7c3      	b.n	8005d2c <HALL_Clear+0xe4>

08005da4 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005da4:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8005da8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005dac:	429a      	cmp	r2, r3
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005dae:	8883      	ldrh	r3, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005db0:	d00f      	beq.n	8005dd2 <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005db2:	f8b0 c0ac 	ldrh.w	ip, [r0, #172]	; 0xac
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005db6:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005dba:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005dbc:	440b      	add	r3, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005dbe:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005dc0:	f8b0 c0ae 	ldrh.w	ip, [r0, #174]	; 0xae
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005dc4:	f8a0 10ac 	strh.w	r1, [r0, #172]	; 0xac
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005dc8:	4463      	add	r3, ip
 8005dca:	b21b      	sxth	r3, r3
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005dcc:	8083      	strh	r3, [r0, #4]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8005dd2:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 8005dd6:	4413      	add	r3, r2
 8005dd8:	b21b      	sxth	r3, r3
 8005dda:	8083      	strh	r3, [r0, #4]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	4770      	bx	lr

08005de0 <HALL_CalcAvrgMecSpeedUnit>:
{
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8005de4:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 8005de8:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 8005dea:	b180      	cbz	r0, 8005e0e <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005dec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8005dee:	f8b4 20b0 	ldrh.w	r2, [r4, #176]	; 0xb0
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d811      	bhi.n	8005e1c <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8005dfc:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8005dfe:	4629      	mov	r1, r5
 8005e00:	4620      	mov	r0, r4
 8005e02:	f001 fcc9 	bl	8007798 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005e06:	f9b5 3000 	ldrsh.w	r3, [r5]
 8005e0a:	81a3      	strh	r3, [r4, #12]
}
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8005e0e:	78e3      	ldrb	r3, [r4, #3]
 8005e10:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 8005e12:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 8005e14:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 8005e16:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8005e18:	81a3      	strh	r3, [r4, #12]
}
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 8005e1c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 8005e20:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 8005e22:	b31b      	cbz	r3, 8005e6c <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005e24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d01d      	beq.n	8005e68 <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 8005e2c:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 8005e30:	b9f2      	cbnz	r2, 8005e70 <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8005e32:	88a2      	ldrh	r2, [r4, #4]
 8005e34:	f8b4 10ac 	ldrh.w	r1, [r4, #172]	; 0xac
 8005e38:	1a89      	subs	r1, r1, r2
 8005e3a:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 8005e3c:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 8005e40:	f8a4 10aa 	strh.w	r1, [r4, #170]	; 0xaa
            pHandle->CompSpeed = ( int16_t )
 8005e44:	fb91 f1f2 	sdiv	r1, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005e48:	8b62      	ldrh	r2, [r4, #26]
 8005e4a:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005e4e:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005e52:	69e1      	ldr	r1, [r4, #28]
 8005e54:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005e56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e5a:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8005e5c:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 8005e60:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 8005e64:	802b      	strh	r3, [r5, #0]
 8005e66:	e7ca      	b.n	8005dfe <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 8005e68:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8005e6c:	802b      	strh	r3, [r5, #0]
 8005e6e:	e7c6      	b.n	8005dfe <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8005e70:	2100      	movs	r1, #0
 8005e72:	e7e9      	b.n	8005e48 <HALL_CalcAvrgMecSpeedUnit+0x68>

08005e74 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005e74:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d047      	beq.n	8005f0c <HALL_TIMx_CC_IRQHandler+0x98>
{
 8005e7c:	b570      	push	{r4, r5, r6, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005e7e:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8005e82:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 8005e86:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005e8a:	b333      	cbz	r3, 8005eda <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005e8c:	e9d0 340e 	ldrd	r3, r4, [r0, #56]	; 0x38
 8005e90:	691d      	ldr	r5, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005e92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e94:	691a      	ldr	r2, [r3, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005e96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005e98:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005e9a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005e9c:	4393      	bics	r3, r2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005e9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005ea0:	bf0c      	ite	eq
 8005ea2:	2201      	moveq	r2, #1
 8005ea4:	2200      	movne	r2, #0
 8005ea6:	43b3      	bics	r3, r6
 8005ea8:	bf0c      	ite	eq
 8005eaa:	2301      	moveq	r3, #1
 8005eac:	2300      	movne	r3, #0
 8005eae:	43ac      	bics	r4, r5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005eb0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2201      	moveq	r2, #1
 8005eb8:	2200      	movne	r2, #0
 8005eba:	0092      	lsls	r2, r2, #2
 8005ebc:	f082 0204 	eor.w	r2, r2, #4
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 8005ec6:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005ec8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	f200 81d7 	bhi.w	800627e <HALL_TIMx_CC_IRQHandler+0x40a>
 8005ed0:	e8df f003 	tbb	[pc, r3]
 8005ed4:	4c60779c 	.word	0x4c60779c
 8005ed8:	1e35      	.short	0x1e35
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005eda:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8005ede:	6912      	ldr	r2, [r2, #16]
 8005ee0:	4393      	bics	r3, r2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8005ee2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005ee4:	691c      	ldr	r4, [r3, #16]
 8005ee6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005ee8:	bf0c      	ite	eq
 8005eea:	2201      	moveq	r2, #1
 8005eec:	2200      	movne	r2, #0
 8005eee:	43a3      	bics	r3, r4
 8005ef0:	bf0c      	ite	eq
 8005ef2:	2301      	moveq	r3, #1
 8005ef4:	2300      	movne	r3, #0
 8005ef6:	005b      	lsls	r3, r3, #1
 8005ef8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005efc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005efe:	6914      	ldr	r4, [r2, #16]
 8005f00:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005f02:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005f04:	bf08      	it	eq
 8005f06:	f043 0301 	orreq.w	r3, r3, #1
 8005f0a:	e7da      	b.n	8005ec2 <HALL_TIMx_CC_IRQHandler+0x4e>
}
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 8005f10:	f1bc 0f02 	cmp.w	ip, #2
 8005f14:	f000 80db 	beq.w	80060ce <HALL_TIMx_CC_IRQHandler+0x25a>
        else if ( bPrevHallState == STATE_4 )
 8005f18:	f1bc 0f04 	cmp.w	ip, #4
 8005f1c:	d17d      	bne.n	800601a <HALL_TIMx_CC_IRQHandler+0x1a6>
   		  pHandle->HallStateCounter--;
 8005f1e:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005f22:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   		  pHandle->HallStateCounter--;
 8005f24:	3b01      	subs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005f26:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = NEGATIVE;
 8005f2a:	25ff      	movs	r5, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005f2c:	3a2a      	subs	r2, #42	; 0x2a
   		  pHandle->HallStateCounter--;
 8005f2e:	b2db      	uxtb	r3, r3
          pHandle->Direction = NEGATIVE;
 8005f30:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005f34:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
   		  pHandle->HallStateCounter--;
 8005f38:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 8005f3c:	e056      	b.n	8005fec <HALL_TIMx_CC_IRQHandler+0x178>
        if ( bPrevHallState == STATE_4 )
 8005f3e:	f1bc 0f04 	cmp.w	ip, #4
 8005f42:	f000 80b7 	beq.w	80060b4 <HALL_TIMx_CC_IRQHandler+0x240>
        else if ( bPrevHallState == STATE_1 )
 8005f46:	f1bc 0f01 	cmp.w	ip, #1
 8005f4a:	d166      	bne.n	800601a <HALL_TIMx_CC_IRQHandler+0x1a6>
   		  pHandle->HallStateCounter--;
 8005f4c:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005f50:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   		  pHandle->HallStateCounter--;
 8005f52:	3b01      	subs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005f54:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = NEGATIVE;
 8005f58:	25ff      	movs	r5, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005f5a:	322a      	adds	r2, #42	; 0x2a
   		  pHandle->HallStateCounter--;
 8005f5c:	b2db      	uxtb	r3, r3
          pHandle->Direction = NEGATIVE;
 8005f5e:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 8005f62:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
   		  pHandle->HallStateCounter--;
 8005f66:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 8005f6a:	e03f      	b.n	8005fec <HALL_TIMx_CC_IRQHandler+0x178>
        if ( bPrevHallState == STATE_6 )
 8005f6c:	f1bc 0f06 	cmp.w	ip, #6
 8005f70:	f000 8090 	beq.w	8006094 <HALL_TIMx_CC_IRQHandler+0x220>
        else if ( bPrevHallState == STATE_5 )
 8005f74:	f1bc 0f05 	cmp.w	ip, #5
 8005f78:	d14f      	bne.n	800601a <HALL_TIMx_CC_IRQHandler+0x1a6>
   		  pHandle->HallStateCounter--;
 8005f7a:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 8005f7e:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 8005f80:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
   		  pHandle->HallStateCounter--;
 8005f84:	3b01      	subs	r3, #1
          pHandle->Direction = NEGATIVE;
 8005f86:	25ff      	movs	r5, #255	; 0xff
   		  pHandle->HallStateCounter--;
 8005f88:	b2db      	uxtb	r3, r3
          pHandle->Direction = NEGATIVE;
 8005f8a:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
   		  pHandle->HallStateCounter--;
 8005f8e:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 8005f92:	e02b      	b.n	8005fec <HALL_TIMx_CC_IRQHandler+0x178>
        if ( bPrevHallState == STATE_1 )
 8005f94:	f1bc 0f01 	cmp.w	ip, #1
 8005f98:	f000 80a9 	beq.w	80060ee <HALL_TIMx_CC_IRQHandler+0x27a>
        else if ( bPrevHallState == STATE_2 )
 8005f9c:	f1bc 0f02 	cmp.w	ip, #2
 8005fa0:	d13b      	bne.n	800601a <HALL_TIMx_CC_IRQHandler+0x1a6>
   		  pHandle->HallStateCounter--;
 8005fa2:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005fa6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   		  pHandle->HallStateCounter--;
 8005fa8:	3b01      	subs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005faa:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = NEGATIVE;
 8005fae:	25ff      	movs	r5, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005fb0:	327f      	adds	r2, #127	; 0x7f
   		  pHandle->HallStateCounter--;
 8005fb2:	b2db      	uxtb	r3, r3
          pHandle->Direction = NEGATIVE;
 8005fb4:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005fb8:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
   		  pHandle->HallStateCounter--;
 8005fbc:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 8005fc0:	e014      	b.n	8005fec <HALL_TIMx_CC_IRQHandler+0x178>
        if ( bPrevHallState == STATE_3 )
 8005fc2:	f1bc 0f03 	cmp.w	ip, #3
 8005fc6:	d055      	beq.n	8006074 <HALL_TIMx_CC_IRQHandler+0x200>
        else if ( bPrevHallState == STATE_6 )
 8005fc8:	f1bc 0f06 	cmp.w	ip, #6
 8005fcc:	d125      	bne.n	800601a <HALL_TIMx_CC_IRQHandler+0x1a6>
   		  pHandle->HallStateCounter--;
 8005fce:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005fd2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   		  pHandle->HallStateCounter--;
 8005fd4:	3b01      	subs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005fd6:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = NEGATIVE;
 8005fda:	25ff      	movs	r5, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005fdc:	3a55      	subs	r2, #85	; 0x55
   		  pHandle->HallStateCounter--;
 8005fde:	b2db      	uxtb	r3, r3
          pHandle->Direction = NEGATIVE;
 8005fe0:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005fe4:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
   		  pHandle->HallStateCounter--;
 8005fe8:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
     else if(pHandle->Direction == NEGATIVE && (pHandle->HallStateCounter == 0 || pHandle->HallStateCounter == 255))
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2bfd      	cmp	r3, #253	; 0xfd
 8005ff2:	f200 80fa 	bhi.w	80061ea <HALL_TIMx_CC_IRQHandler+0x376>
   	  pHandle->HallStateCounter = 71;
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
    if (pHandle->Direction != PrevDirection)
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	d013      	beq.n	8006026 <HALL_TIMx_CC_IRQHandler+0x1b2>
      pHandle->BufferFilled = 0 ;
 8005ffe:	2300      	movs	r3, #0
 8006000:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8006004:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
 8006008:	4611      	mov	r1, r2
 800600a:	e00c      	b.n	8006026 <HALL_TIMx_CC_IRQHandler+0x1b2>
        if ( bPrevHallState == STATE_5 )
 800600c:	f1bc 0f05 	cmp.w	ip, #5
 8006010:	d01c      	beq.n	800604c <HALL_TIMx_CC_IRQHandler+0x1d8>
        else if ( bPrevHallState == STATE_3 )
 8006012:	f1bc 0f03 	cmp.w	ip, #3
 8006016:	f000 8122 	beq.w	800625e <HALL_TIMx_CC_IRQHandler+0x3ea>
     if(pHandle->Direction == POSITIVE && pHandle->HallStateCounter == 72 )
 800601a:	2901      	cmp	r1, #1
 800601c:	f000 810a 	beq.w	8006234 <HALL_TIMx_CC_IRQHandler+0x3c0>
     else if(pHandle->Direction == NEGATIVE && (pHandle->HallStateCounter == 0 || pHandle->HallStateCounter == 255))
 8006020:	1c4b      	adds	r3, r1, #1
 8006022:	f000 80db 	beq.w	80061dc <HALL_TIMx_CC_IRQHandler+0x368>
    if (pHandle->HallMtpa == true)
 8006026:	f890 30c7 	ldrb.w	r3, [r0, #199]	; 0xc7
 800602a:	b113      	cbz	r3, 8006032 <HALL_TIMx_CC_IRQHandler+0x1be>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 800602c:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
 8006030:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 8006032:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d168      	bne.n	800610c <HALL_TIMx_CC_IRQHandler+0x298>
      pHandle->FirstCapt++;
 800603a:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800603e:	3301      	adds	r3, #1
 8006040:	b2db      	uxtb	r3, r3
 8006042:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8006046:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8006048:	2000      	movs	r0, #0
 800604a:	bd70      	pop	{r4, r5, r6, pc}
          pHandle->HallStateCounter++;
 800604c:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8006050:	8c42      	ldrh	r2, [r0, #34]	; 0x22
          pHandle->HallStateCounter++;
 8006052:	3301      	adds	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8006054:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 8006058:	2501      	movs	r5, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800605a:	322a      	adds	r2, #42	; 0x2a
          pHandle->HallStateCounter++;
 800605c:	b2db      	uxtb	r3, r3
          pHandle->Direction = POSITIVE;
 800605e:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8006062:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
          pHandle->HallStateCounter++;
 8006066:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
     if(pHandle->Direction == POSITIVE && pHandle->HallStateCounter == 72 )
 800606a:	2b48      	cmp	r3, #72	; 0x48
 800606c:	f000 80e7 	beq.w	800623e <HALL_TIMx_CC_IRQHandler+0x3ca>
 8006070:	2201      	movs	r2, #1
 8006072:	e7c2      	b.n	8005ffa <HALL_TIMx_CC_IRQHandler+0x186>
          pHandle->HallStateCounter++;
 8006074:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
                                                  + S16_60_PHASE_SHIFT );
 8006078:	8c42      	ldrh	r2, [r0, #34]	; 0x22
          pHandle->HallStateCounter++;
 800607a:	3301      	adds	r3, #1
                                                  + S16_60_PHASE_SHIFT );
 800607c:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 8006080:	2501      	movs	r5, #1
                                                  + S16_60_PHASE_SHIFT );
 8006082:	327f      	adds	r2, #127	; 0x7f
          pHandle->HallStateCounter++;
 8006084:	b2db      	uxtb	r3, r3
          pHandle->Direction = POSITIVE;
 8006086:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 800608a:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
          pHandle->HallStateCounter++;
 800608e:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 8006092:	e7ea      	b.n	800606a <HALL_TIMx_CC_IRQHandler+0x1f6>
          pHandle->HallStateCounter++;
 8006094:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8006098:	8c42      	ldrh	r2, [r0, #34]	; 0x22
          pHandle->HallStateCounter++;
 800609a:	3301      	adds	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800609c:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 80060a0:	2501      	movs	r5, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80060a2:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->HallStateCounter++;
 80060a4:	b2db      	uxtb	r3, r3
          pHandle->Direction = POSITIVE;
 80060a6:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80060aa:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
          pHandle->HallStateCounter++;
 80060ae:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 80060b2:	e7da      	b.n	800606a <HALL_TIMx_CC_IRQHandler+0x1f6>
          pHandle->HallStateCounter++;
 80060b4:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80060b8:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80060ba:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
          pHandle->HallStateCounter++;
 80060be:	3301      	adds	r3, #1
          pHandle->Direction = POSITIVE;
 80060c0:	2501      	movs	r5, #1
          pHandle->HallStateCounter++;
 80060c2:	b2db      	uxtb	r3, r3
          pHandle->Direction = POSITIVE;
 80060c4:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->HallStateCounter++;
 80060c8:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 80060cc:	e7cd      	b.n	800606a <HALL_TIMx_CC_IRQHandler+0x1f6>
          pHandle->HallStateCounter++;
 80060ce:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80060d2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
          pHandle->HallStateCounter++;
 80060d4:	3301      	adds	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80060d6:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 80060da:	2501      	movs	r5, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80060dc:	3a55      	subs	r2, #85	; 0x55
          pHandle->HallStateCounter++;
 80060de:	b2db      	uxtb	r3, r3
          pHandle->Direction = POSITIVE;
 80060e0:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80060e4:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
          pHandle->HallStateCounter++;
 80060e8:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 80060ec:	e7bd      	b.n	800606a <HALL_TIMx_CC_IRQHandler+0x1f6>
          pHandle->HallStateCounter++;
 80060ee:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80060f2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80060f4:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->HallStateCounter++;
 80060f8:	3301      	adds	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80060fa:	f502 42aa 	add.w	r2, r2, #21760	; 0x5500
 80060fe:	3255      	adds	r2, #85	; 0x55
          pHandle->HallStateCounter++;
 8006100:	b2db      	uxtb	r3, r3
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8006102:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
          pHandle->HallStateCounter++;
 8006106:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 800610a:	e7ae      	b.n	800606a <HALL_TIMx_CC_IRQHandler+0x1f6>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 800610c:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 8006110:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 8006114:	4563      	cmp	r3, ip
 8006116:	d205      	bcs.n	8006124 <HALL_TIMx_CC_IRQHandler+0x2b0>
        pHandle->BufferFilled++;
 8006118:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
 800611c:	3301      	adds	r3, #1
 800611e:	b2db      	uxtb	r3, r3
 8006120:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
 8006124:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8006126:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8006128:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 800612c:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8006130:	041b      	lsls	r3, r3, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8006132:	b292      	uxth	r2, r2
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8006134:	fa13 f386 	uxtah	r3, r3, r6
      if ( pHandle->OVFCounter != 0u )
 8006138:	f005 0eff 	and.w	lr, r5, #255	; 0xff
 800613c:	2d00      	cmp	r5, #0
 800613e:	d043      	beq.n	80061c8 <HALL_TIMx_CC_IRQHandler+0x354>
        hAux = hPrscBuf + 1u;
 8006140:	3201      	adds	r2, #1
        wCaptBuf *= hAux;
 8006142:	b292      	uxth	r2, r2
 8006144:	fb02 f303 	mul.w	r3, r2, r3
        if ( pHandle->RatioInc )
 8006148:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 800614c:	2a00      	cmp	r2, #0
 800614e:	d050      	beq.n	80061f2 <HALL_TIMx_CC_IRQHandler+0x37e>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8006150:	2200      	movs	r2, #0
 8006152:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 8006156:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800615a:	429a      	cmp	r2, r3
 800615c:	d82f      	bhi.n	80061be <HALL_TIMx_CC_IRQHandler+0x34a>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800615e:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8006162:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006166:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 800616a:	eb00 0e82 	add.w	lr, r0, r2, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 800616e:	429d      	cmp	r5, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006170:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 8006174:	bf88      	it	hi
 8006176:	fb01 f503 	mulhi.w	r5, r1, r3
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800617a:	eba4 0406 	sub.w	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 800617e:	f102 0201 	add.w	r2, r2, #1
 8006182:	b2d2      	uxtb	r2, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8006184:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 8006188:	bf8a      	itet	hi
 800618a:	1964      	addhi	r4, r4, r5
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 800618c:	434d      	mulls	r5, r1
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 800618e:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 8006192:	4594      	cmp	ip, r2
 8006194:	f8ce 5050 	str.w	r5, [lr, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 8006198:	bf08      	it	eq
 800619a:	2200      	moveq	r2, #0
 800619c:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 80061a0:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
 80061a4:	b38a      	cbz	r2, 800620a <HALL_TIMx_CC_IRQHandler+0x396>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80061a6:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 80061aa:	4594      	cmp	ip, r2
 80061ac:	d94c      	bls.n	8006248 <HALL_TIMx_CC_IRQHandler+0x3d4>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80061ae:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 80061b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b6:	fb13 f101 	smulbb	r1, r3, r1
 80061ba:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 80061be:	2300      	movs	r3, #0
 80061c0:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 80061c4:	2000      	movs	r0, #0
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80061c8:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 80061cc:	b305      	cbz	r5, 8006210 <HALL_TIMx_CC_IRQHandler+0x39c>
          hAux = hPrscBuf + 2u;
 80061ce:	3202      	adds	r2, #2
          wCaptBuf *= hAux;
 80061d0:	b292      	uxth	r2, r2
          pHandle->RatioDec = false;
 80061d2:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
          pHandle->RatioDec = false;
 80061da:	e7bc      	b.n	8006156 <HALL_TIMx_CC_IRQHandler+0x2e2>
     else if(pHandle->Direction == NEGATIVE && (pHandle->HallStateCounter == 0 || pHandle->HallStateCounter == 255))
 80061dc:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2bfd      	cmp	r3, #253	; 0xfd
 80061e6:	f67f af1e 	bls.w	8006026 <HALL_TIMx_CC_IRQHandler+0x1b2>
   	  pHandle->HallStateCounter = 71;
 80061ea:	2347      	movs	r3, #71	; 0x47
 80061ec:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 80061f0:	e701      	b.n	8005ff6 <HALL_TIMx_CC_IRQHandler+0x182>
 80061f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 80061f4:	f8b0 50b0 	ldrh.w	r5, [r0, #176]	; 0xb0
 80061f8:	4295      	cmp	r5, r2
 80061fa:	d9ac      	bls.n	8006156 <HALL_TIMx_CC_IRQHandler+0x2e2>
 80061fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 80061fe:	3201      	adds	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8006200:	62a2      	str	r2, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8006202:	2201      	movs	r2, #1
 8006204:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
 8006208:	e7a5      	b.n	8006156 <HALL_TIMx_CC_IRQHandler+0x2e2>
            pHandle->AvrElSpeedDpp = 0;
 800620a:	f8a0 20a4 	strh.w	r2, [r0, #164]	; 0xa4
 800620e:	e7d6      	b.n	80061be <HALL_TIMx_CC_IRQHandler+0x34a>
          uint16_t hAux = hPrscBuf + 1u;
 8006210:	3201      	adds	r2, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8006212:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 8006214:	b292      	uxth	r2, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8006216:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 800621a:	fb02 f303 	mul.w	r3, r2, r3
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 800621e:	d29a      	bcs.n	8006156 <HALL_TIMx_CC_IRQHandler+0x2e2>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8006220:	6aa2      	ldr	r2, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8006222:	2a00      	cmp	r2, #0
 8006224:	d097      	beq.n	8006156 <HALL_TIMx_CC_IRQHandler+0x2e2>
 8006226:	6aa2      	ldr	r2, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 8006228:	3a01      	subs	r2, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800622a:	62a2      	str	r2, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800622c:	2201      	movs	r2, #1
 800622e:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 8006232:	e790      	b.n	8006156 <HALL_TIMx_CC_IRQHandler+0x2e2>
     if(pHandle->Direction == POSITIVE && pHandle->HallStateCounter == 72 )
 8006234:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8006238:	2b48      	cmp	r3, #72	; 0x48
 800623a:	f47f aef4 	bne.w	8006026 <HALL_TIMx_CC_IRQHandler+0x1b2>
   	  pHandle->HallStateCounter = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 8006244:	2201      	movs	r2, #1
 8006246:	e6d8      	b.n	8005ffa <HALL_TIMx_CC_IRQHandler+0x186>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8006248:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800624c:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 8006250:	fb92 fcfc 	sdiv	ip, r2, ip
 8006254:	fb93 f3fc 	sdiv	r3, r3, ip
 8006258:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 800625c:	e7af      	b.n	80061be <HALL_TIMx_CC_IRQHandler+0x34a>
   		  pHandle->HallStateCounter--;
 800625e:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8006262:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   		  pHandle->HallStateCounter--;
 8006264:	3b01      	subs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8006266:	f502 42aa 	add.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = NEGATIVE;
 800626a:	25ff      	movs	r5, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800626c:	3255      	adds	r2, #85	; 0x55
   		  pHandle->HallStateCounter--;
 800626e:	b2db      	uxtb	r3, r3
          pHandle->Direction = NEGATIVE;
 8006270:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8006274:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
   		  pHandle->HallStateCounter--;
 8006278:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
 800627c:	e6b6      	b.n	8005fec <HALL_TIMx_CC_IRQHandler+0x178>
        pHandle->SensorIsReliable = false;
 800627e:	2300      	movs	r3, #0
 8006280:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8006284:	e6c9      	b.n	800601a <HALL_TIMx_CC_IRQHandler+0x1a6>
 8006286:	bf00      	nop

08006288 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8006288:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800628c:	b1e3      	cbz	r3, 80062c8 <HALL_TIMx_UP_IRQHandler+0x40>
{
 800628e:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 8006290:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8006294:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 8006296:	3301      	adds	r3, #1
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 800629e:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80062a0:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 80062a4:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80062a8:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80062ac:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80062b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062b4:	fb04 2202 	mla	r2, r4, r2, r2
 80062b8:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4299      	cmp	r1, r3
 80062c0:	d204      	bcs.n	80062cc <HALL_TIMx_UP_IRQHandler+0x44>
}
 80062c2:	2000      	movs	r0, #0
 80062c4:	bc30      	pop	{r4, r5}
 80062c6:	4770      	bx	lr
 80062c8:	2000      	movs	r0, #0
 80062ca:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80062cc:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 80062d0:	2200      	movs	r2, #0
 80062d2:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80062d4:	bb0b      	cbnz	r3, 800631a <HALL_TIMx_UP_IRQHandler+0x92>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80062d6:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80062d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80062da:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80062dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80062de:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80062e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80062e2:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80062e4:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 80062e8:	bf0c      	ite	eq
 80062ea:	2401      	moveq	r4, #1
 80062ec:	2400      	movne	r4, #0
 80062ee:	43ab      	bics	r3, r5
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80062fe:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006300:	bf08      	it	eq
 8006302:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 8006306:	1e5a      	subs	r2, r3, #1
 8006308:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 800630c:	2a05      	cmp	r2, #5
 800630e:	d86f      	bhi.n	80063f0 <HALL_TIMx_UP_IRQHandler+0x168>
 8006310:	e8df f002 	tbb	[pc, r2]
 8006314:	52596067 	.word	0x52596067
 8006318:	1f4b      	.short	0x1f4b
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800631a:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800631c:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800631e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006320:	6914      	ldr	r4, [r2, #16]
 8006322:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8006324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006326:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006328:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800632a:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800632c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800632e:	bf0c      	ite	eq
 8006330:	2101      	moveq	r1, #1
 8006332:	2100      	movne	r1, #0
 8006334:	43ab      	bics	r3, r5
 8006336:	bf0c      	ite	eq
 8006338:	2301      	moveq	r3, #1
 800633a:	2300      	movne	r3, #0
 800633c:	43a2      	bics	r2, r4
 800633e:	bf0c      	ite	eq
 8006340:	2201      	moveq	r2, #1
 8006342:	2200      	movne	r2, #0
 8006344:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8006346:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800634a:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800634e:	4313      	orrs	r3, r2
 8006350:	e7d9      	b.n	8006306 <HALL_TIMx_UP_IRQHandler+0x7e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 8006352:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8006354:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8006358:	3b3f      	subs	r3, #63	; 0x3f
 800635a:	b21b      	sxth	r3, r3
 800635c:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800635e:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8006362:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
      pHandle->OVFCounter = 0u;
 8006366:	2200      	movs	r2, #0
 8006368:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 800636c:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8006370:	b17c      	cbz	r4, 8006392 <HALL_TIMx_UP_IRQHandler+0x10a>
 8006372:	1e62      	subs	r2, r4, #1
 8006374:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8006376:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 800637a:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800637e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006382:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8006386:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800638a:	429a      	cmp	r2, r3
 800638c:	d1fb      	bne.n	8006386 <HALL_TIMx_UP_IRQHandler+0xfe>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800638e:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8006392:	2300      	movs	r3, #0
 8006394:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8006398:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800639c:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 80063a0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 80063a4:	bc30      	pop	{r4, r5}
 80063a6:	2000      	movs	r0, #0
 80063a8:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 80063aa:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80063ac:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 80063b0:	3315      	adds	r3, #21
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	8083      	strh	r3, [r0, #4]
      break;
 80063b6:	e7d2      	b.n	800635e <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 80063b8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80063ba:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 80063be:	3b15      	subs	r3, #21
 80063c0:	b21b      	sxth	r3, r3
 80063c2:	8083      	strh	r3, [r0, #4]
      break;
 80063c4:	e7cb      	b.n	800635e <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80063c6:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80063c8:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80063cc:	332a      	adds	r3, #42	; 0x2a
 80063ce:	b21b      	sxth	r3, r3
 80063d0:	8083      	strh	r3, [r0, #4]
      break;
 80063d2:	e7c4      	b.n	800635e <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80063d4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80063d6:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80063da:	3b2a      	subs	r3, #42	; 0x2a
 80063dc:	b21b      	sxth	r3, r3
 80063de:	8083      	strh	r3, [r0, #4]
      break;
 80063e0:	e7bd      	b.n	800635e <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80063e2:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80063e4:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80063e8:	333f      	adds	r3, #63	; 0x3f
 80063ea:	b21b      	sxth	r3, r3
 80063ec:	8083      	strh	r3, [r0, #4]
      break;
 80063ee:	e7b6      	b.n	800635e <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 80063f0:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80063f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80063f6:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80063fa:	e7b0      	b.n	800635e <HALL_TIMx_UP_IRQHandler+0xd6>

080063fc <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80063fc:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 80063fe:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8006402:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 8006404:	2100      	movs	r1, #0
 8006406:	f001 fcfd 	bl	8007e04 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800640a:	2300      	movs	r3, #0
 800640c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8006410:	bd10      	pop	{r4, pc}
 8006412:	bf00      	nop

08006414 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006414:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8006418:	1c53      	adds	r3, r2, #1
 800641a:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 800641c:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800641e:	bf88      	it	hi
 8006420:	2300      	movhi	r3, #0
{
 8006422:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8006424:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006428:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 800642c:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 8006430:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8006434:	2200      	movs	r2, #0
 8006436:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006438:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800643c:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800643e:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006440:	d1fa      	bne.n	8006438 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8006442:	2a00      	cmp	r2, #0
 8006444:	bfb8      	it	lt
 8006446:	327f      	addlt	r2, #127	; 0x7f
 8006448:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800644a:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 800644e:	4608      	mov	r0, r1
 8006450:	f85d fb04 	ldr.w	pc, [sp], #4

08006454 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006454:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800645c:	8a03      	ldrh	r3, [r0, #16]
 800645e:	8b42      	ldrh	r2, [r0, #26]
 8006460:	429a      	cmp	r2, r3
 8006462:	d306      	bcc.n	8006472 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006464:	8b82      	ldrh	r2, [r0, #28]
 8006466:	429a      	cmp	r2, r3
 8006468:	d901      	bls.n	800646e <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 800646a:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 800646c:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 800646e:	8ac0      	ldrh	r0, [r0, #22]
 8006470:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006472:	2008      	movs	r0, #8
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop

08006478 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8006478:	2300      	movs	r3, #0
 800647a:	8203      	strh	r3, [r0, #16]
}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop

08006480 <NTC_Init>:
{
 8006480:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006482:	7803      	ldrb	r3, [r0, #0]
{
 8006484:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006486:	b123      	cbz	r3, 8006492 <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006488:	8a43      	ldrh	r3, [r0, #18]
 800648a:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 800648c:	2200      	movs	r2, #0
 800648e:	82c2      	strh	r2, [r0, #22]
}
 8006490:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006492:	3004      	adds	r0, #4
 8006494:	f7fb fdbe 	bl	8002014 <RCM_RegisterRegConv>
 8006498:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff ffeb 	bl	8006478 <NTC_Clear>
}
 80064a2:	bd10      	pop	{r4, pc}

080064a4 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 80064a4:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80064a6:	7803      	ldrb	r3, [r0, #0]
{
 80064a8:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80064aa:	b113      	cbz	r3, 80064b2 <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80064ac:	2000      	movs	r0, #0
 80064ae:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 80064b0:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80064b2:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80064b6:	f7fb fe9f 	bl	80021f8 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80064ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064be:	4298      	cmp	r0, r3
 80064c0:	d007      	beq.n	80064d2 <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80064c2:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80064c4:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80064c6:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 80064c8:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80064cc:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 80064d0:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff ffc2 	bl	800645c <NTC_SetFaultState>
 80064d8:	82e0      	strh	r0, [r4, #22]
}
 80064da:	bd10      	pop	{r4, pc}

080064dc <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80064dc:	7803      	ldrb	r3, [r0, #0]
 80064de:	b983      	cbnz	r3, 8006502 <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80064e0:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80064e2:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80064e4:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80064e8:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80064ea:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	bfbc      	itt	lt
 80064f4:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80064f8:	33ff      	addlt	r3, #255	; 0xff
 80064fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80064fe:	b200      	sxth	r0, r0
 8006500:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8006502:	8a80      	ldrh	r0, [r0, #20]
}
 8006504:	b200      	sxth	r0, r0
 8006506:	4770      	bx	lr

08006508 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006508:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800650a:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800650c:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800650e:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006510:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8006512:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006514:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006516:	4770      	bx	lr

08006518 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006518:	8081      	strh	r1, [r0, #4]
}
 800651a:	4770      	bx	lr

0800651c <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 800651c:	80c1      	strh	r1, [r0, #6]
}
 800651e:	4770      	bx	lr

08006520 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8006520:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop

08006528 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006528:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop

08006530 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006530:	6081      	str	r1, [r0, #8]

  return;
}
 8006532:	4770      	bx	lr

08006534 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006534:	8b00      	ldrh	r0, [r0, #24]
 8006536:	4770      	bx	lr

08006538 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006538:	8b40      	ldrh	r0, [r0, #26]
 800653a:	4770      	bx	lr

0800653c <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 800653c:	8441      	strh	r1, [r0, #34]	; 0x22
}
 800653e:	4770      	bx	lr

08006540 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006540:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop

08006548 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006548:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 800654c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006550:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8006554:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006556:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800655a:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 800655e:	b162      	cbz	r2, 800657a <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006560:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006564:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 8006566:	188c      	adds	r4, r1, r2
 8006568:	d420      	bmi.n	80065ac <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800656a:	2900      	cmp	r1, #0
 800656c:	db2a      	blt.n	80065c4 <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800656e:	68c2      	ldr	r2, [r0, #12]
 8006570:	42a2      	cmp	r2, r4
 8006572:	db02      	blt.n	800657a <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006574:	6902      	ldr	r2, [r0, #16]
 8006576:	42a2      	cmp	r2, r4
 8006578:	dd22      	ble.n	80065c0 <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 800657a:	8b81      	ldrh	r1, [r0, #28]
 800657c:	410b      	asrs	r3, r1
 800657e:	8bc1      	ldrh	r1, [r0, #30]
 8006580:	fa42 f101 	asr.w	r1, r2, r1
 8006584:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006586:	459c      	cmp	ip, r3
 8006588:	da05      	bge.n	8006596 <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800658a:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800658e:	441a      	add	r2, r3
 8006590:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006592:	4660      	mov	r0, ip
 8006594:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8006596:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006598:	bfc9      	itett	gt
 800659a:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 800659e:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 80065a2:	18d2      	addgt	r2, r2, r3
 80065a4:	46f4      	movgt	ip, lr
 80065a6:	6082      	str	r2, [r0, #8]
}
 80065a8:	4660      	mov	r0, ip
 80065aa:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 80065ac:	2900      	cmp	r1, #0
 80065ae:	ddde      	ble.n	800656e <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	dddc      	ble.n	800656e <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80065b4:	68c2      	ldr	r2, [r0, #12]
 80065b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80065ba:	428a      	cmp	r2, r1
 80065bc:	d1dd      	bne.n	800657a <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 80065be:	4614      	mov	r4, r2
 80065c0:	4622      	mov	r2, r4
 80065c2:	e7da      	b.n	800657a <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 80065c4:	4902      	ldr	r1, [pc, #8]	; (80065d0 <PI_Controller+0x88>)
 80065c6:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 80065ca:	bf28      	it	cs
 80065cc:	460c      	movcs	r4, r1
 80065ce:	e7ce      	b.n	800656e <PI_Controller+0x26>
 80065d0:	80000001 	.word	0x80000001

080065d4 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 80065d4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 80065d8:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80065da:	8b11      	ldrh	r1, [r2, #24]
 80065dc:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80065de:	8993      	ldrh	r3, [r2, #12]
 80065e0:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80065e2:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 80065e6:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 80065e8:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80065ec:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 80065f0:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80065f4:	f7ff fa18 	bl	8005a28 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 80065f8:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 80065fa:	490f      	ldr	r1, [pc, #60]	; (8006638 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 80065fc:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8006600:	bfb8      	it	lt
 8006602:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006606:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 800660a:	bfb8      	it	lt
 800660c:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800660e:	fb81 1000 	smull	r1, r0, r1, r0
 8006612:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 8006616:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8006618:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 800661c:	4907      	ldr	r1, [pc, #28]	; (800663c <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800661e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006622:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006624:	fb81 2103 	smull	r2, r1, r1, r3
 8006628:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800662a:	4628      	mov	r0, r5
 800662c:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006634:	f7ff beee 	b.w	8006414 <MPM_CalcElMotorPower>
 8006638:	1b4e81b5 	.word	0x1b4e81b5
 800663c:	66666667 	.word	0x66666667

08006640 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8006640:	4b17      	ldr	r3, [pc, #92]	; (80066a0 <startTimers+0x60>)
 8006642:	69da      	ldr	r2, [r3, #28]
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8006644:	07d2      	lsls	r2, r2, #31
 8006646:	d415      	bmi.n	8006674 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006650:	69da      	ldr	r2, [r3, #28]
{
 8006652:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006654:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006658:	f002 0201 	and.w	r2, r2, #1
 800665c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800665e:	9a01      	ldr	r2, [sp, #4]
 8006660:	694a      	ldr	r2, [r1, #20]
 8006662:	f042 0201 	orr.w	r2, r2, #1
 8006666:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8006668:	69da      	ldr	r2, [r3, #28]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	61da      	str	r2, [r3, #28]
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8006670:	b002      	add	sp, #8
 8006672:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8006674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006678:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800667a:	6859      	ldr	r1, [r3, #4]
 800667c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006680:	f041 0120 	orr.w	r1, r1, #32
 8006684:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006686:	6959      	ldr	r1, [r3, #20]
 8006688:	f041 0101 	orr.w	r1, r1, #1
 800668c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800668e:	6859      	ldr	r1, [r3, #4]
 8006690:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006694:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40021000 	.word	0x40021000

080066a4 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 80066a4:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 80066a6:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 80066a8:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 80066ac:	d11c      	bne.n	80066e8 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80066ae:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 80066b0:	3201      	adds	r2, #1
 80066b2:	0855      	lsrs	r5, r2, #1
 80066b4:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80066b6:	f06f 0602 	mvn.w	r6, #2
 80066ba:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 80066bc:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 80066be:	f893 c000 	ldrb.w	ip, [r3]
 80066c2:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80066c6:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 80066ca:	d80c      	bhi.n	80066e6 <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80066cc:	6904      	ldr	r4, [r0, #16]
 80066ce:	07a4      	lsls	r4, r4, #30
 80066d0:	d5f5      	bpl.n	80066be <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 80066d2:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80066d6:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80066d8:	6106      	str	r6, [r0, #16]
 80066da:	d8f0      	bhi.n	80066be <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 80066dc:	781c      	ldrb	r4, [r3, #0]
 80066de:	2c0f      	cmp	r4, #15
 80066e0:	d8ed      	bhi.n	80066be <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 80066e2:	2301      	movs	r3, #1
 80066e4:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80066e8:	2c60      	cmp	r4, #96	; 0x60
 80066ea:	d1e1      	bne.n	80066b0 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80066ec:	3201      	adds	r2, #1
 80066ee:	0155      	lsls	r5, r2, #5
 80066f0:	e7e1      	b.n	80066b6 <waitForPolarizationEnd+0x12>
 80066f2:	bf00      	nop

080066f4 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80066f4:	6843      	ldr	r3, [r0, #4]
 80066f6:	4718      	bx	r3

080066f8 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80066f8:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80066fa:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80066fe:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8006700:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006702:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8006706:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006708:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800670c:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800670e:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006712:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006716:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 800671a:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800671e:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006722:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006726:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800672a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 800672e:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006732:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8006736:	db7d      	blt.n	8006834 <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006738:	f1b1 3fff 	cmp.w	r1, #4294967295
 800673c:	db51      	blt.n	80067e2 <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800673e:	ebbe 0e02 	subs.w	lr, lr, r2
 8006742:	bf44      	itt	mi
 8006744:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006748:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 800674c:	2900      	cmp	r1, #0
 800674e:	bfbc      	itt	lt
 8006750:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006754:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006758:	2b00      	cmp	r3, #0
 800675a:	bfb8      	it	lt
 800675c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006760:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006764:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006768:	bfb8      	it	lt
 800676a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 800676e:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8006772:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006776:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 800677a:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 800677e:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006780:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8006782:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006786:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 800678a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800678e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006792:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006796:	b292      	uxth	r2, r2
 8006798:	b289      	uxth	r1, r1
 800679a:	b29b      	uxth	r3, r3
 800679c:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 800679e:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 80067a0:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 80067a2:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 80067a4:	d118      	bne.n	80067d8 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 80067a6:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 80067aa:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 80067ac:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 80067b0:	bfcc      	ite	gt
 80067b2:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80067b4:	1b12      	suble	r2, r2, r4
 80067b6:	b292      	uxth	r2, r2
 80067b8:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 80067ba:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 80067be:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 80067c0:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 80067c4:	bfcc      	ite	gt
 80067c6:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80067c8:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 80067ca:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80067cc:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 80067ce:	bfcc      	ite	gt
 80067d0:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80067d2:	1b1b      	suble	r3, r3, r4
 80067d4:	8681      	strh	r1, [r0, #52]	; 0x34
 80067d6:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80067d8:	6983      	ldr	r3, [r0, #24]
}
 80067da:	b002      	add	sp, #8
 80067dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 80067e0:	4718      	bx	r3
      if ( wX <= 0 )
 80067e2:	f1bc 0f00 	cmp.w	ip, #0
 80067e6:	dd4b      	ble.n	8006880 <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80067e8:	ebbc 0e02 	subs.w	lr, ip, r2
 80067ec:	bf44      	itt	mi
 80067ee:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80067f2:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80067f6:	2900      	cmp	r1, #0
 80067f8:	bfb8      	it	lt
 80067fa:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 80067fe:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8006802:	bfb8      	it	lt
 8006804:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8006808:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800680c:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 800680e:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006812:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006816:	bfb8      	it	lt
 8006818:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 800681c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006820:	bfb8      	it	lt
 8006822:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006826:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 800682a:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800682c:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800682e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8006832:	e7a8      	b.n	8006786 <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 8006834:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006838:	db6f      	blt.n	800691a <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 800683a:	f1bc 0f00 	cmp.w	ip, #0
 800683e:	dd46      	ble.n	80068ce <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006840:	ebbe 0e0c 	subs.w	lr, lr, ip
 8006844:	bf48      	it	mi
 8006846:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800684a:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800684e:	bf48      	it	mi
 8006850:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006854:	2b00      	cmp	r3, #0
 8006856:	bfb8      	it	lt
 8006858:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 800685c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006860:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006864:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006868:	bfb8      	it	lt
 800686a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 800686e:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006872:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8006876:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006878:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800687a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800687e:	e782      	b.n	8006786 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006880:	ebbe 0e0c 	subs.w	lr, lr, ip
 8006884:	bf44      	itt	mi
 8006886:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 800688a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 800688e:	2b00      	cmp	r3, #0
 8006890:	bfb8      	it	lt
 8006892:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8006896:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 800689a:	bfb8      	it	lt
 800689c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 80068a0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 80068a4:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80068a8:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80068ac:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80068b0:	bfb8      	it	lt
 80068b2:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 80068b6:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 80068ba:	bfb8      	it	lt
 80068bc:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 80068c0:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 80068c4:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 80068c6:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 80068c8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80068cc:	e75b      	b.n	8006786 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80068ce:	ebbc 0e02 	subs.w	lr, ip, r2
 80068d2:	bf44      	itt	mi
 80068d4:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80068d8:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 80068dc:	2900      	cmp	r1, #0
 80068de:	bfb8      	it	lt
 80068e0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 80068e4:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 80068e8:	bfb8      	it	lt
 80068ea:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 80068ee:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80068f2:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 80068f4:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 80068f8:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 80068fc:	bfb8      	it	lt
 80068fe:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006902:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006906:	bfb8      	it	lt
 8006908:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 800690c:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8006910:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006912:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006914:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006918:	e735      	b.n	8006786 <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800691a:	ebbe 0e02 	subs.w	lr, lr, r2
 800691e:	bf44      	itt	mi
 8006920:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006924:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006928:	2900      	cmp	r1, #0
 800692a:	bfbc      	itt	lt
 800692c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006930:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006934:	2b00      	cmp	r3, #0
 8006936:	bfb8      	it	lt
 8006938:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800693c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006940:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006944:	bfb8      	it	lt
 8006946:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 800694a:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 800694e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006952:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8006956:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 800695a:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800695c:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800695e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006962:	e710      	b.n	8006786 <PWMC_SetPhaseVoltage+0x8e>

08006964 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006964:	6883      	ldr	r3, [r0, #8]
 8006966:	4718      	bx	r3

08006968 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006968:	b510      	push	{r4, lr}
 800696a:	4604      	mov	r4, r0
 800696c:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 800696e:	b199      	cbz	r1, 8006998 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006970:	2901      	cmp	r1, #1
 8006972:	d002      	beq.n	800697a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006974:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006976:	b002      	add	sp, #8
 8006978:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800697a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800697e:	b1cb      	cbz	r3, 80069b4 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006980:	3b01      	subs	r3, #1
 8006982:	b29b      	uxth	r3, r3
 8006984:	9101      	str	r1, [sp, #4]
 8006986:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f2      	bne.n	8006974 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 800698e:	6903      	ldr	r3, [r0, #16]
 8006990:	4798      	blx	r3
        retVal = true;
 8006992:	9901      	ldr	r1, [sp, #4]
 8006994:	4608      	mov	r0, r1
 8006996:	e7ee      	b.n	8006976 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8006998:	f7ff ffe4 	bl	8006964 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800699c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80069a0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 80069a8:	4620      	mov	r0, r4
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	4798      	blx	r3
      retVal = true;
 80069ae:	2001      	movs	r0, #1
}
 80069b0:	b002      	add	sp, #8
 80069b2:	bd10      	pop	{r4, pc}
      retVal = true;
 80069b4:	4608      	mov	r0, r1
}
 80069b6:	b002      	add	sp, #8
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	bf00      	nop

080069bc <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 80069bc:	69c3      	ldr	r3, [r0, #28]
 80069be:	4718      	bx	r3

080069c0 <R3_1_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80069c0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 80069c2:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 80069c6:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80069c8:	685c      	ldr	r4, [r3, #4]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80069ca:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80069ce:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 80069d2:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80069d4:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069dc:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 80069de:	2a05      	cmp	r2, #5
 80069e0:	f200 809f 	bhi.w	8006b22 <R3_1_GetPhaseCurrents+0x162>
 80069e4:	e8df f002 	tbb	[pc, r2]
 80069e8:	031f1f38 	.word	0x031f1f38
 80069ec:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80069ee:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 80069f0:	4b4f      	ldr	r3, [pc, #316]	; (8006b30 <R3_1_GetPhaseCurrents+0x170>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80069f2:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80069f4:	429c      	cmp	r4, r3
 80069f6:	da54      	bge.n	8006aa2 <R3_1_GetPhaseCurrents+0xe2>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 80069f8:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80069fa:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 80069fc:	4d4c      	ldr	r5, [pc, #304]	; (8006b30 <R3_1_GetPhaseCurrents+0x170>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80069fe:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8006a00:	42aa      	cmp	r2, r5
 8006a02:	da54      	bge.n	8006aae <R3_1_GetPhaseCurrents+0xee>

    default:
      break;
  }

  pHandle->_Super.Ia = Iab->a;
 8006a04:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = -INT16_MAX;
 8006a08:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006a0a:	fa1f f38c 	uxth.w	r3, ip
 8006a0e:	f248 0201 	movw	r2, #32769	; 0x8001
 8006a12:	4413      	add	r3, r2
 8006a14:	425b      	negs	r3, r3
  pHandle->_Super.Ib = Iab->b;
 8006a16:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ia = Iab->a;
 8006a1a:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48
}
 8006a1e:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006a20:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8006a24:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006a26:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 8006a28:	4b41      	ldr	r3, [pc, #260]	; (8006b30 <R3_1_GetPhaseCurrents+0x170>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8006a2a:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	db32      	blt.n	8006a96 <R3_1_GetPhaseCurrents+0xd6>
      else  if ( Aux > INT16_MAX )
 8006a30:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006a34:	db69      	blt.n	8006b0a <R3_1_GetPhaseCurrents+0x14a>
        Iab->a = INT16_MAX;
 8006a36:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	800a      	strh	r2, [r1, #0]
 8006a3e:	4614      	mov	r4, r2
 8006a40:	4694      	mov	ip, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006a42:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006a44:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8006a46:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8006a48:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a4c:	db44      	blt.n	8006ad8 <R3_1_GetPhaseCurrents+0x118>
        Iab->b = INT16_MAX;
 8006a4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006a52:	804a      	strh	r2, [r1, #2]
 8006a54:	4615      	mov	r5, r2
 8006a56:	e7dc      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8006a58:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 8006a5a:	4b35      	ldr	r3, [pc, #212]	; (8006b30 <R3_1_GetPhaseCurrents+0x170>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8006a5c:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	db13      	blt.n	8006a8a <R3_1_GetPhaseCurrents+0xca>
      else  if ( Aux > INT16_MAX )
 8006a62:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006a66:	db44      	blt.n	8006af2 <R3_1_GetPhaseCurrents+0x132>
        Iab->b = INT16_MAX;
 8006a68:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	804b      	strh	r3, [r1, #2]
 8006a70:	461c      	mov	r4, r3
 8006a72:	461d      	mov	r5, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8006a74:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006a76:	1af3      	subs	r3, r6, r3
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8006a78:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8006a7a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006a7e:	db23      	blt.n	8006ac8 <R3_1_GetPhaseCurrents+0x108>
        Iab->a = INT16_MAX;
 8006a80:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006a84:	800b      	strh	r3, [r1, #0]
 8006a86:	469c      	mov	ip, r3
 8006a88:	e7c3      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
        Iab->b = -INT16_MAX;
 8006a8a:	804b      	strh	r3, [r1, #2]
 8006a8c:	461c      	mov	r4, r3
 8006a8e:	f248 0201 	movw	r2, #32769	; 0x8001
 8006a92:	461d      	mov	r5, r3
 8006a94:	e7ee      	b.n	8006a74 <R3_1_GetPhaseCurrents+0xb4>
        Iab->a = -INT16_MAX;
 8006a96:	461c      	mov	r4, r3
 8006a98:	800b      	strh	r3, [r1, #0]
 8006a9a:	46a4      	mov	ip, r4
 8006a9c:	f248 0301 	movw	r3, #32769	; 0x8001
 8006aa0:	e7cf      	b.n	8006a42 <R3_1_GetPhaseCurrents+0x82>
      else  if ( Aux > INT16_MAX )
 8006aa2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8006aa6:	db1e      	blt.n	8006ae6 <R3_1_GetPhaseCurrents+0x126>
        Iab->a = INT16_MAX;
 8006aa8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006aac:	e7a4      	b.n	80069f8 <R3_1_GetPhaseCurrents+0x38>
      else  if ( Aux > INT16_MAX )
 8006aae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006ab2:	db22      	blt.n	8006afa <R3_1_GetPhaseCurrents+0x13a>
        Iab->b = INT16_MAX;
 8006ab4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = Iab->a;
 8006ab8:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = INT16_MAX;
 8006abc:	804b      	strh	r3, [r1, #2]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006ac2:	fa1f f38c 	uxth.w	r3, ip
 8006ac6:	e7a4      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
      else  if ( Aux < -INT16_MAX )
 8006ac8:	4e19      	ldr	r6, [pc, #100]	; (8006b30 <R3_1_GetPhaseCurrents+0x170>)
 8006aca:	42b4      	cmp	r4, r6
 8006acc:	da23      	bge.n	8006b16 <R3_1_GetPhaseCurrents+0x156>
        Iab->a = -INT16_MAX;
 8006ace:	800e      	strh	r6, [r1, #0]
 8006ad0:	f248 0301 	movw	r3, #32769	; 0x8001
 8006ad4:	46b4      	mov	ip, r6
 8006ad6:	e79c      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
      else  if ( Aux < -INT16_MAX )
 8006ad8:	4d15      	ldr	r5, [pc, #84]	; (8006b30 <R3_1_GetPhaseCurrents+0x170>)
 8006ada:	42aa      	cmp	r2, r5
 8006adc:	da05      	bge.n	8006aea <R3_1_GetPhaseCurrents+0x12a>
        Iab->b = -INT16_MAX;
 8006ade:	804d      	strh	r5, [r1, #2]
 8006ae0:	f248 0201 	movw	r2, #32769	; 0x8001
 8006ae4:	e795      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
        Iab->a = ( int16_t )Aux;
 8006ae6:	800c      	strh	r4, [r1, #0]
 8006ae8:	e787      	b.n	80069fa <R3_1_GetPhaseCurrents+0x3a>
        Iab->b = ( int16_t )Aux;
 8006aea:	b215      	sxth	r5, r2
 8006aec:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006aee:	b292      	uxth	r2, r2
 8006af0:	e78f      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
        Iab->b = ( int16_t )Aux;
 8006af2:	b225      	sxth	r5, r4
 8006af4:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006af6:	b2a2      	uxth	r2, r4
 8006af8:	e7bc      	b.n	8006a74 <R3_1_GetPhaseCurrents+0xb4>
  pHandle->_Super.Ia = Iab->a;
 8006afa:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = ( int16_t )Aux;
 8006afe:	b215      	sxth	r5, r2
 8006b00:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006b02:	fa1f f38c 	uxth.w	r3, ip
 8006b06:	b292      	uxth	r2, r2
 8006b08:	e783      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
        Iab->a = ( int16_t )Aux;
 8006b0a:	fa0f fc84 	sxth.w	ip, r4
 8006b0e:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006b12:	b2a3      	uxth	r3, r4
 8006b14:	e795      	b.n	8006a42 <R3_1_GetPhaseCurrents+0x82>
        Iab->a = ( int16_t )Aux;
 8006b16:	fa0f fc84 	sxth.w	ip, r4
 8006b1a:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006b1e:	b2a3      	uxth	r3, r4
 8006b20:	e777      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
  pHandle->_Super.Ia = Iab->a;
 8006b22:	f9b1 c000 	ldrsh.w	ip, [r1]
  pHandle->_Super.Ib = Iab->b;
 8006b26:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8006b2a:	880b      	ldrh	r3, [r1, #0]
 8006b2c:	884a      	ldrh	r2, [r1, #2]
 8006b2e:	e770      	b.n	8006a12 <R3_1_GetPhaseCurrents+0x52>
 8006b30:	ffff8001 	.word	0xffff8001

08006b34 <R3_1_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8006b34:	b430      	push	{r4, r5}
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;

  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8006b36:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8006b3a:	f890 106f 	ldrb.w	r1, [r0, #111]	; 0x6f
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006b3e:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8006b40:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006b44:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8006b46:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8006b48:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8006b4a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b4c:	635d      	str	r5, [r3, #52]	; 0x34
  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8006b4e:	3a01      	subs	r2, #1
 8006b50:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006b52:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006b54:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006b56:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f013 0f70 	tst.w	r3, #112	; 0x70
}
 8006b5e:	bf14      	ite	ne
 8006b60:	2001      	movne	r0, #1
 8006b62:	2000      	moveq	r0, #0
 8006b64:	bc30      	pop	{r4, r5}
 8006b66:	4770      	bx	lr

08006b68 <R3_1_SetADCSampPointSectX>:
{
 8006b68:	b530      	push	{r4, r5, lr}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8006b6a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8006b6c:	f8b0 e068 	ldrh.w	lr, [r0, #104]	; 0x68
 8006b70:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8006b72:	ebae 0203 	sub.w	r2, lr, r3
 8006b76:	f8b1 4072 	ldrh.w	r4, [r1, #114]	; 0x72
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	42a2      	cmp	r2, r4
 8006b7e:	d914      	bls.n	8006baa <R3_1_SetADCSampPointSectX+0x42>
    pHandle->_Super.Sector = SECTOR_5;
 8006b80:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006b82:	f10e 33ff 	add.w	r3, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006b86:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006b8a:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006b8c:	684a      	ldr	r2, [r1, #4]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8006b8e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8006b90:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8006b92:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b94:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006b96:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006b98:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006b9a:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006b9c:	6853      	ldr	r3, [r2, #4]
 8006b9e:	f013 0f70 	tst.w	r3, #112	; 0x70
}
 8006ba2:	bf14      	ite	ne
 8006ba4:	2001      	movne	r0, #1
 8006ba6:	2000      	moveq	r0, #0
 8006ba8:	bd30      	pop	{r4, r5, pc}
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8006baa:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8006bae:	eba3 0c0c 	sub.w	ip, r3, ip
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 8006bb2:	fa1f fc8c 	uxth.w	ip, ip
 8006bb6:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8006bba:	d904      	bls.n	8006bc6 <R3_1_SetADCSampPointSectX+0x5e>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8006bbc:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	e7e2      	b.n	8006b8c <R3_1_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8006bc6:	4423      	add	r3, r4
 8006bc8:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8006bca:	459e      	cmp	lr, r3
 8006bcc:	d8de      	bhi.n	8006b8c <R3_1_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006bce:	43db      	mvns	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006bd0:	2280      	movs	r2, #128	; 0x80
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006bd2:	eb03 034e 	add.w	r3, r3, lr, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006bd6:	f8a0 206c 	strh.w	r2, [r0, #108]	; 0x6c
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	e7d6      	b.n	8006b8c <R3_1_SetADCSampPointSectX+0x24>
 8006bde:	bf00      	nop

08006be0 <R3_1_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHandle Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_1_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 8006be0:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006be2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006be4:	f890 406f 	ldrb.w	r4, [r0, #111]	; 0x6f
 8006be8:	685a      	ldr	r2, [r3, #4]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8006bea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006bee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006bf0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8006bf2:	6824      	ldr	r4, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006bf4:	682d      	ldr	r5, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006bf6:	6853      	ldr	r3, [r2, #4]
 8006bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfc:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006bfe:	f890 c06e 	ldrb.w	ip, [r0, #110]	; 0x6e
 8006c02:	f1bc 0f0f 	cmp.w	ip, #15
 8006c06:	d80b      	bhi.n	8006c20 <R3_1_HFCurrentsPolarizationAB+0x40>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 8006c08:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006c0a:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle-> PhaseAOffset += ADCDataReg1;
 8006c0c:	441c      	add	r4, r3
    pHandle->PolarizationCounter++;
 8006c0e:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006c12:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8006c14:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8006c16:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006c20:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006c22:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 8006c24:	600b      	str	r3, [r1, #0]
}
 8006c26:	4770      	bx	lr

08006c28 <R3_1_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c28:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006c2a:	f890 c06f 	ldrb.w	ip, [r0, #111]	; 0x6f
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c2e:	685a      	ldr	r2, [r3, #4]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006c30:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8006c34:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	681c      	ldr	r4, [r3, #0]
 8006c3a:	6853      	ldr	r3, [r2, #4]
 8006c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c40:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006c42:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8006c46:	2b0f      	cmp	r3, #15
 8006c48:	d808      	bhi.n	8006c5c <R3_1_HFCurrentsPolarizationC+0x34>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8006c4a:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006c4e:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8006c50:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006c52:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006c54:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8006c56:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8006c58:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006c5c:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 8006c62:	600b      	str	r3, [r1, #0]
}
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop

08006c68 <R3_1_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c68:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006c6a:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006c6e:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006c70:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c74:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c76:	f06f 0001 	mvn.w	r0, #1
 8006c7a:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c7c:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c7e:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006c80:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006c82:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006c84:	07db      	lsls	r3, r3, #31
 8006c86:	d5fc      	bpl.n	8006c82 <R3_1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006c88:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c8e:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006c90:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d000      	beq.n	8006c9a <R3_1_TurnOnLowSides+0x32>
 8006c98:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006c9a:	e9d1 2006 	ldrd	r2, r0, [r1, #24]
{
 8006c9e:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006ca0:	6a0b      	ldr	r3, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006ca2:	f8b1 406c 	ldrh.w	r4, [r1, #108]	; 0x6c
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006ca6:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006ca8:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006cac:	f8b1 2070 	ldrh.w	r2, [r1, #112]	; 0x70
 8006cb0:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8006cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cb6:	619a      	str	r2, [r3, #24]
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop

08006cbc <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cbc:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8006cbe:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006cc2:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006cc4:	f04f 0c00 	mov.w	ip, #0
{
 8006cc8:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006cca:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 8006cce:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006cd0:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8006cd2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006cd4:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006cd6:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006cd8:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006cdc:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006cde:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006ce0:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006ce2:	07d2      	lsls	r2, r2, #31
 8006ce4:	d5fc      	bpl.n	8006ce0 <R3_1_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006ce6:	f06f 0201 	mvn.w	r2, #1
 8006cea:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cfa:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006cfc:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
 8006d00:	2a02      	cmp	r2, #2
 8006d02:	d008      	beq.n	8006d16 <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d04:	f06f 0201 	mvn.w	r2, #1
 8006d08:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 8006d10:	bc30      	pop	{r4, r5}
 8006d12:	60da      	str	r2, [r3, #12]
 8006d14:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006d16:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006d18:	698c      	ldr	r4, [r1, #24]
 8006d1a:	f8b1 506c 	ldrh.w	r5, [r1, #108]	; 0x6c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006d1e:	f240 5255 	movw	r2, #1365	; 0x555
 8006d22:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006d24:	e9d1 0207 	ldrd	r0, r2, [r1, #28]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006d28:	d007      	beq.n	8006d3a <R3_1_SwitchOnPWM+0x7e>
 8006d2a:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006d2c:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006d30:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 8006d34:	6184      	str	r4, [r0, #24]
 8006d36:	6191      	str	r1, [r2, #24]
}
 8006d38:	e7e4      	b.n	8006d04 <R3_1_SwitchOnPWM+0x48>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8006d3a:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006d3c:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006d40:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 8006d44:	6284      	str	r4, [r0, #40]	; 0x28
 8006d46:	6291      	str	r1, [r2, #40]	; 0x28
}
 8006d48:	e7dc      	b.n	8006d04 <R3_1_SwitchOnPWM+0x48>
 8006d4a:	bf00      	nop

08006d4c <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d4c:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8006d4e:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d50:	68d3      	ldr	r3, [r2, #12]
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006d58:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8006d5a:	f04f 0c00 	mov.w	ip, #0
 8006d5e:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8006d62:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
 8006d66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8006d6c:	b918      	cbnz	r0, 8006d76 <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006d6e:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d009      	beq.n	8006d8a <R3_1_SwitchOffPWM+0x3e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d76:	f06f 0301 	mvn.w	r3, #1
 8006d7a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006d7c:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006d7e:	07db      	lsls	r3, r3, #31
 8006d80:	d5fc      	bpl.n	8006d7c <R3_1_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d82:	f06f 0301 	mvn.w	r3, #1
 8006d86:	6113      	str	r3, [r2, #16]
 8006d88:	4770      	bx	lr
{
 8006d8a:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006d8c:	e9d1 4006 	ldrd	r4, r0, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006d90:	6a0b      	ldr	r3, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006d92:	f8b1 506c 	ldrh.w	r5, [r1, #108]	; 0x6c
  WRITE_REG(GPIOx->BRR, PinMask);
 8006d96:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006d98:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006d9c:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 8006da0:	6284      	str	r4, [r0, #40]	; 0x28
 8006da2:	6299      	str	r1, [r3, #40]	; 0x28
 8006da4:	f06f 0301 	mvn.w	r3, #1
 8006da8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006daa:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006dac:	07d9      	lsls	r1, r3, #31
 8006dae:	d5fc      	bpl.n	8006daa <R3_1_SwitchOffPWM+0x5e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006db0:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

}
 8006db4:	bc30      	pop	{r4, r5}
 8006db6:	6113      	str	r3, [r2, #16]
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop

08006dbc <R3_1_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006dbc:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8006dbe:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006dc0:	6854      	ldr	r4, [r2, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006dc2:	6863      	ldr	r3, [r4, #4]
 8006dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc8:	6063      	str	r3, [r4, #4]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 8006dca:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8006dce:	6e03      	ldr	r3, [r0, #96]	; 0x60

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8006dd0:	480d      	ldr	r0, [pc, #52]	; (8006e08 <R3_1_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector];
 8006dd2:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006dd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006dd8:	6812      	ldr	r2, [r2, #0]
 8006dda:	1a9b      	subs	r3, r3, r2
  if ( wAux > -INT16_MAX )
 8006ddc:	4283      	cmp	r3, r0
 8006dde:	db05      	blt.n	8006dec <R3_1_RLGetPhaseCurrents+0x30>
  {
    if ( wAux < INT16_MAX )
 8006de0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006de4:	4293      	cmp	r3, r2
 8006de6:	dc0b      	bgt.n	8006e00 <R3_1_RLGetPhaseCurrents+0x44>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8006de8:	b21b      	sxth	r3, r3
 8006dea:	e000      	b.n	8006dee <R3_1_RLGetPhaseCurrents+0x32>
 8006dec:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <R3_1_RLGetPhaseCurrents+0x50>)
  pStator_Currents->b = (int16_t)wAux;
}
 8006dee:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = (int16_t)wAux;
 8006df2:	2200      	movs	r2, #0
 8006df4:	f363 020f 	bfi	r2, r3, #0, #16
 8006df8:	f363 421f 	bfi	r2, r3, #16, #16
 8006dfc:	600a      	str	r2, [r1, #0]
}
 8006dfe:	4770      	bx	lr
 8006e00:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006e04:	e7f3      	b.n	8006dee <R3_1_RLGetPhaseCurrents+0x32>
 8006e06:	bf00      	nop
 8006e08:	ffff8002 	.word	0xffff8002
 8006e0c:	ffff8001 	.word	0xffff8001

08006e10 <R3_1_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e10:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8006e12:	684a      	ldr	r2, [r1, #4]
{
 8006e14:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006e16:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e1a:	2400      	movs	r4, #0
 8006e1c:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006e1e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006e20:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006e22:	07db      	lsls	r3, r3, #31
 8006e24:	d5fc      	bpl.n	8006e20 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006e26:	f06f 0301 	mvn.w	r3, #1
 8006e2a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006e2c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e32:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006e34:	f891 307a 	ldrb.w	r3, [r1, #122]	; 0x7a
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d10b      	bne.n	8006e54 <R3_1_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006e3c:	e9d1 2006 	ldrd	r2, r0, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006e40:	f8b1 406c 	ldrh.w	r4, [r1, #108]	; 0x6c
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006e44:	6a0b      	ldr	r3, [r1, #32]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006e46:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006e48:	f8b1 406e 	ldrh.w	r4, [r1, #110]	; 0x6e
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006e4c:	f8b1 2070 	ldrh.w	r2, [r1, #112]	; 0x70
  WRITE_REG(GPIOx->BRR, PinMask);
 8006e50:	6284      	str	r4, [r0, #40]	; 0x28
 8006e52:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 8006e54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop

08006e5c <R3_1_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006e5c:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006e5e:	2200      	movs	r2, #0
{
 8006e60:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006e62:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006e66:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	06d6      	lsls	r6, r2, #27
 8006e6e:	d4fc      	bmi.n	8006e6a <R3_1_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	06d5      	lsls	r5, r2, #27
 8006e74:	d5fc      	bpl.n	8006e70 <R3_1_RLSwitchOnPWM+0x14>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006e76:	2201      	movs	r2, #1
 8006e78:	635a      	str	r2, [r3, #52]	; 0x34
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8006e7a:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8006e7e:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006e80:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006e82:	f06f 0201 	mvn.w	r2, #1
 8006e86:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006e88:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006e8a:	07d2      	lsls	r2, r2, #31
 8006e8c:	d5fc      	bpl.n	8006e88 <R3_1_RLSwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006e8e:	f06f 0201 	mvn.w	r2, #1
 8006e92:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e9a:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006ea4:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
 8006ea8:	2a02      	cmp	r2, #2
 8006eaa:	d010      	beq.n	8006ece <R3_1_RLSwitchOnPWM+0x72>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 8006eac:	2203      	movs	r2, #3
 8006eae:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 8006eb2:	68a2      	ldr	r2, [r4, #8]
 8006eb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006eb8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8006ebc:	f042 0208 	orr.w	r2, r2, #8
 8006ec0:	60a2      	str	r2, [r4, #8]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_EnableIT_UPDATE( TIMx );



  return;
}
 8006ec8:	bcf0      	pop	{r4, r5, r6, r7}
 8006eca:	60da      	str	r2, [r3, #12]
 8006ecc:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006ece:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006ed0:	698e      	ldr	r6, [r1, #24]
 8006ed2:	f8b1 706c 	ldrh.w	r7, [r1, #108]	; 0x6c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006ed6:	f240 5255 	movw	r2, #1365	; 0x555
 8006eda:	4215      	tst	r5, r2
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006edc:	e9d1 5207 	ldrd	r5, r2, [r1, #28]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006ee0:	d007      	beq.n	8006ef2 <R3_1_RLSwitchOnPWM+0x96>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006ee2:	61b7      	str	r7, [r6, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006ee4:	f8b1 606e 	ldrh.w	r6, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006ee8:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 8006eec:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006eee:	6291      	str	r1, [r2, #40]	; 0x28
}
 8006ef0:	e7dc      	b.n	8006eac <R3_1_RLSwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BRR, PinMask);
 8006ef2:	62b7      	str	r7, [r6, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006ef4:	f8b1 606e 	ldrh.w	r6, [r1, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006ef8:	f8b1 1070 	ldrh.w	r1, [r1, #112]	; 0x70
 8006efc:	62ae      	str	r6, [r5, #40]	; 0x28
 8006efe:	6291      	str	r1, [r2, #40]	; 0x28
}
 8006f00:	e7d4      	b.n	8006eac <R3_1_RLSwitchOnPWM+0x50>
 8006f02:	bf00      	nop

08006f04 <R3_1_Init>:
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8006f04:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006f06:	680b      	ldr	r3, [r1, #0]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006f08:	684a      	ldr	r2, [r1, #4]
{
 8006f0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8006f0e:	685c      	ldr	r4, [r3, #4]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 8006f10:	690f      	ldr	r7, [r1, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8006f12:	694d      	ldr	r5, [r1, #20]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8006f14:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8006f18:	f024 0404 	bic.w	r4, r4, #4
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8006f1c:	e9d1 6c02 	ldrd	r6, ip, [r1, #8]
 8006f20:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8006f22:	f8c3 e000 	str.w	lr, [r3]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8006f26:	685c      	ldr	r4, [r3, #4]
 8006f28:	f024 0420 	bic.w	r4, r4, #32
 8006f2c:	605c      	str	r4, [r3, #4]
    if ( TIMx == TIM1 )
 8006f2e:	4cab      	ldr	r4, [pc, #684]	; (80071dc <R3_1_Init+0x2d8>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8006f30:	f04f 0e20 	mov.w	lr, #32
 8006f34:	42a2      	cmp	r2, r4
{
 8006f36:	b083      	sub	sp, #12
 8006f38:	f8c3 e000 	str.w	lr, [r3]
    if ( TIMx == TIM1 )
 8006f3c:	f000 808b 	beq.w	8007056 <R3_1_Init+0x152>
    if ( COMP_OCPAx != NULL )
 8006f40:	b18e      	cbz	r6, 8006f66 <R3_1_Init+0x62>
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 8006f42:	f891 407d 	ldrb.w	r4, [r1, #125]	; 0x7d
 8006f46:	2c01      	cmp	r4, #1
 8006f48:	d005      	beq.n	8006f56 <R3_1_Init+0x52>
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8006f4a:	6834      	ldr	r4, [r6, #0]
 8006f4c:	f004 0470 	and.w	r4, r4, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8006f50:	2c40      	cmp	r4, #64	; 0x40
 8006f52:	f000 8117 	beq.w	8007184 <R3_1_Init+0x280>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006f56:	6834      	ldr	r4, [r6, #0]
 8006f58:	f044 0401 	orr.w	r4, r4, #1
 8006f5c:	6034      	str	r4, [r6, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006f5e:	6834      	ldr	r4, [r6, #0]
 8006f60:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006f64:	6034      	str	r4, [r6, #0]
    if ( COMP_OCPBx != NULL )
 8006f66:	f1bc 0f00 	cmp.w	ip, #0
 8006f6a:	d00b      	beq.n	8006f84 <R3_1_Init+0x80>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006f6c:	f8dc 4000 	ldr.w	r4, [ip]
 8006f70:	f044 0401 	orr.w	r4, r4, #1
 8006f74:	f8cc 4000 	str.w	r4, [ip]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006f78:	f8dc 4000 	ldr.w	r4, [ip]
 8006f7c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006f80:	f8cc 4000 	str.w	r4, [ip]
    if ( COMP_OCPCx != NULL )
 8006f84:	b13f      	cbz	r7, 8006f96 <R3_1_Init+0x92>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006f86:	683c      	ldr	r4, [r7, #0]
 8006f88:	f044 0401 	orr.w	r4, r4, #1
 8006f8c:	603c      	str	r4, [r7, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006f8e:	683c      	ldr	r4, [r7, #0]
 8006f90:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006f94:	603c      	str	r4, [r7, #0]
    if ( COMP_OVPx != NULL )
 8006f96:	b18d      	cbz	r5, 8006fbc <R3_1_Init+0xb8>
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 8006f98:	f891 4080 	ldrb.w	r4, [r1, #128]	; 0x80
 8006f9c:	2c01      	cmp	r4, #1
 8006f9e:	d005      	beq.n	8006fac <R3_1_Init+0xa8>
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 8006fa0:	682c      	ldr	r4, [r5, #0]
 8006fa2:	f004 0470 	and.w	r4, r4, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8006fa6:	2c40      	cmp	r4, #64	; 0x40
 8006fa8:	f000 80c8 	beq.w	800713c <R3_1_Init+0x238>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006fac:	682c      	ldr	r4, [r5, #0]
 8006fae:	f044 0401 	orr.w	r4, r4, #1
 8006fb2:	602c      	str	r4, [r5, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006fb4:	682c      	ldr	r4, [r5, #0]
 8006fb6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006fba:	602c      	str	r4, [r5, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8006fbc:	689c      	ldr	r4, [r3, #8]
    if (LL_ADC_IsEnabled (ADCx) == 0)
 8006fbe:	07e6      	lsls	r6, r4, #31
 8006fc0:	d562      	bpl.n	8007088 <R3_1_Init+0x184>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006fca:	6853      	ldr	r3, [r2, #4]
 8006fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd0:	6053      	str	r3, [r2, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006fd2:	6993      	ldr	r3, [r2, #24]
 8006fd4:	f043 0308 	orr.w	r3, r3, #8
 8006fd8:	6193      	str	r3, [r2, #24]
 8006fda:	6993      	ldr	r3, [r2, #24]
 8006fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fe0:	6193      	str	r3, [r2, #24]
 8006fe2:	69d3      	ldr	r3, [r2, #28]
 8006fe4:	f043 0308 	orr.w	r3, r3, #8
 8006fe8:	61d3      	str	r3, [r2, #28]
 8006fea:	69d3      	ldr	r3, [r2, #28]
 8006fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ff0:	61d3      	str	r3, [r2, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006ff2:	6953      	ldr	r3, [r2, #20]
 8006ff4:	f043 0301 	orr.w	r3, r3, #1
 8006ff8:	6153      	str	r3, [r2, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8006ffa:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d032      	beq.n	8007068 <R3_1_Init+0x164>
    if ( pHandle->_Super.Motor == M1 )
 8007002:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8007006:	b933      	cbnz	r3, 8007016 <R3_1_Init+0x112>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8007008:	f891 307b 	ldrb.w	r3, [r1, #123]	; 0x7b
 800700c:	2b01      	cmp	r3, #1
 800700e:	d02f      	beq.n	8007070 <R3_1_Init+0x16c>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8007010:	2b03      	cmp	r3, #3
 8007012:	f000 80f1 	beq.w	80071f8 <R3_1_Init+0x2f4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007016:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800701a:	6113      	str	r3, [r2, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800701c:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 8007020:	b163      	cbz	r3, 800703c <R3_1_Init+0x138>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007022:	6913      	ldr	r3, [r2, #16]
 8007024:	05d8      	lsls	r0, r3, #23
 8007026:	d509      	bpl.n	800703c <R3_1_Init+0x138>
 8007028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800702c:	f46f 7080 	mvn.w	r0, #256	; 0x100
 8007030:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007032:	6911      	ldr	r1, [r2, #16]
 8007034:	05c9      	lsls	r1, r1, #23
 8007036:	d501      	bpl.n	800703c <R3_1_Init+0x138>
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8007038:	3b01      	subs	r3, #1
 800703a:	d1f9      	bne.n	8007030 <R3_1_Init+0x12c>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800703c:	68d3      	ldr	r3, [r2, #12]
 800703e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007042:	60d3      	str	r3, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007044:	6a13      	ldr	r3, [r2, #32]
 8007046:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800704a:	f043 0305 	orr.w	r3, r3, #5
 800704e:	6213      	str	r3, [r2, #32]
}
 8007050:	b003      	add	sp, #12
 8007052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8007056:	f8df e198 	ldr.w	lr, [pc, #408]	; 80071f0 <R3_1_Init+0x2ec>
 800705a:	f8de 400c 	ldr.w	r4, [lr, #12]
 800705e:	f044 0401 	orr.w	r4, r4, #1
 8007062:	f8ce 400c 	str.w	r4, [lr, #12]
}
 8007066:	e76b      	b.n	8006f40 <R3_1_Init+0x3c>
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 8007068:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 800706c:	2b01      	cmp	r3, #1
 800706e:	d05a      	beq.n	8007126 <R3_1_Init+0x222>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8007070:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007074:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007076:	6253      	str	r3, [r2, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007078:	f06f 0380 	mvn.w	r3, #128	; 0x80
 800707c:	6113      	str	r3, [r2, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800707e:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0da      	beq.n	800703c <R3_1_Init+0x138>
 8007086:	e7cc      	b.n	8007022 <R3_1_Init+0x11e>
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 8007088:	689c      	ldr	r4, [r3, #8]
 800708a:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 800708e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8007092:	d01b      	beq.n	80070cc <R3_1_Init+0x1c8>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8007094:	689c      	ldr	r4, [r3, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8007096:	4d52      	ldr	r5, [pc, #328]	; (80071e0 <R3_1_Init+0x2dc>)
 8007098:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 800709c:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CR,
 800709e:	689c      	ldr	r4, [r3, #8]
 80070a0:	f024 4410 	bic.w	r4, r4, #2415919104	; 0x90000000
 80070a4:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80070a8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80070ac:	609c      	str	r4, [r3, #8]
 80070ae:	4c4d      	ldr	r4, [pc, #308]	; (80071e4 <R3_1_Init+0x2e0>)
 80070b0:	6824      	ldr	r4, [r4, #0]
 80070b2:	09a4      	lsrs	r4, r4, #6
 80070b4:	fba5 5404 	umull	r5, r4, r5, r4
 80070b8:	09a4      	lsrs	r4, r4, #6
 80070ba:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 80070bc:	9c01      	ldr	r4, [sp, #4]
 80070be:	b12c      	cbz	r4, 80070cc <R3_1_Init+0x1c8>
      wait_loop_index--;
 80070c0:	9c01      	ldr	r4, [sp, #4]
 80070c2:	3c01      	subs	r4, #1
 80070c4:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 80070c6:	9c01      	ldr	r4, [sp, #4]
 80070c8:	2c00      	cmp	r4, #0
 80070ca:	d1f9      	bne.n	80070c0 <R3_1_Init+0x1bc>
  MODIFY_REG(ADCx->CR,
 80070cc:	689c      	ldr	r4, [r3, #8]
 80070ce:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 80070d2:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80070d6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80070da:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80070dc:	689c      	ldr	r4, [r3, #8]
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 80070de:	2c00      	cmp	r4, #0
 80070e0:	dbfc      	blt.n	80070dc <R3_1_Init+0x1d8>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 80070e2:	681c      	ldr	r4, [r3, #0]
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 80070e4:	07e5      	lsls	r5, r4, #31
 80070e6:	d408      	bmi.n	80070fa <R3_1_Init+0x1f6>
  MODIFY_REG(ADCx->CR,
 80070e8:	4d3f      	ldr	r5, [pc, #252]	; (80071e8 <R3_1_Init+0x2e4>)
 80070ea:	689c      	ldr	r4, [r3, #8]
 80070ec:	402c      	ands	r4, r5
 80070ee:	f044 0401 	orr.w	r4, r4, #1
 80070f2:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 80070f4:	681c      	ldr	r4, [r3, #0]
 80070f6:	07e4      	lsls	r4, r4, #31
 80070f8:	d5f7      	bpl.n	80070ea <R3_1_Init+0x1e6>
  MODIFY_REG(ADCx->CR,
 80070fa:	689d      	ldr	r5, [r3, #8]
 80070fc:	4e3a      	ldr	r6, [pc, #232]	; (80071e8 <R3_1_Init+0x2e4>)
 80070fe:	4035      	ands	r5, r6
 8007100:	f045 0508 	orr.w	r5, r5, #8
 8007104:	609d      	str	r5, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8007106:	689c      	ldr	r4, [r3, #8]
 8007108:	4034      	ands	r4, r6
 800710a:	f044 0420 	orr.w	r4, r4, #32
 800710e:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 8007110:	68dc      	ldr	r4, [r3, #12]
 8007112:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8007116:	60dc      	str	r4, [r3, #12]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8007118:	2440      	movs	r4, #64	; 0x40
 800711a:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800711c:	685c      	ldr	r4, [r3, #4]
 800711e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8007122:	605c      	str	r4, [r3, #4]
}
 8007124:	e74d      	b.n	8006fc2 <R3_1_Init+0xbe>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8007126:	f891 407b 	ldrb.w	r4, [r1, #123]	; 0x7b
 800712a:	2c03      	cmp	r4, #3
 800712c:	d1a0      	bne.n	8007070 <R3_1_Init+0x16c>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800712e:	6313      	str	r3, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007130:	6953      	ldr	r3, [r2, #20]
 8007132:	f043 0301 	orr.w	r3, r3, #1
 8007136:	6153      	str	r3, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007138:	6314      	str	r4, [r2, #48]	; 0x30
}
 800713a:	e799      	b.n	8007070 <R3_1_Init+0x16c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 8007140:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8007144:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 8007148:	fab4 f484 	clz	r4, r4
 800714c:	40e6      	lsrs	r6, r4
 800714e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80071f4 <R3_1_Init+0x2f0>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 8007152:	f8b1 7078 	ldrh.w	r7, [r1, #120]	; 0x78
  MODIFY_REG(*preg,
 8007156:	f85c 4026 	ldr.w	r4, [ip, r6, lsl #2]
 800715a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800715e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8007162:	433c      	orrs	r4, r7
 8007164:	f84c 4026 	str.w	r4, [ip, r6, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 8007168:	4c20      	ldr	r4, [pc, #128]	; (80071ec <R3_1_Init+0x2e8>)
 800716a:	6866      	ldr	r6, [r4, #4]
 800716c:	f046 0601 	orr.w	r6, r6, #1
 8007170:	6066      	str	r6, [r4, #4]
  return (READ_BIT(DACx->CR,
 8007172:	6826      	ldr	r6, [r4, #0]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 8007174:	07f7      	lsls	r7, r6, #31
 8007176:	f53f af19 	bmi.w	8006fac <R3_1_Init+0xa8>
  SET_BIT(DACx->CR,
 800717a:	6826      	ldr	r6, [r4, #0]
 800717c:	f046 0601 	orr.w	r6, r6, #1
 8007180:	6026      	str	r6, [r4, #0]
    while(wait_loop_index != 0UL)
 8007182:	e713      	b.n	8006fac <R3_1_Init+0xa8>
 8007184:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 8007188:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 800718c:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 8007190:	fab4 f484 	clz	r4, r4
 8007194:	fa2e fe04 	lsr.w	lr, lr, r4
 8007198:	f8df 9058 	ldr.w	r9, [pc, #88]	; 80071f4 <R3_1_Init+0x2f0>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 800719c:	f8b1 8076 	ldrh.w	r8, [r1, #118]	; 0x76
  MODIFY_REG(*preg,
 80071a0:	f859 402e 	ldr.w	r4, [r9, lr, lsl #2]
 80071a4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80071a8:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80071ac:	ea48 0404 	orr.w	r4, r8, r4
 80071b0:	f849 402e 	str.w	r4, [r9, lr, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 80071b4:	4c0d      	ldr	r4, [pc, #52]	; (80071ec <R3_1_Init+0x2e8>)
 80071b6:	f8d4 e004 	ldr.w	lr, [r4, #4]
 80071ba:	f04e 0e01 	orr.w	lr, lr, #1
 80071be:	f8c4 e004 	str.w	lr, [r4, #4]
  return (READ_BIT(DACx->CR,
 80071c2:	f8d4 e000 	ldr.w	lr, [r4]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 80071c6:	f01e 0f01 	tst.w	lr, #1
 80071ca:	f47f aec4 	bne.w	8006f56 <R3_1_Init+0x52>
  SET_BIT(DACx->CR,
 80071ce:	f8d4 e000 	ldr.w	lr, [r4]
 80071d2:	f04e 0e01 	orr.w	lr, lr, #1
 80071d6:	f8c4 e000 	str.w	lr, [r4]
    while(wait_loop_index != 0UL)
 80071da:	e6bc      	b.n	8006f56 <R3_1_Init+0x52>
 80071dc:	40012c00 	.word	0x40012c00
 80071e0:	053e2d63 	.word	0x053e2d63
 80071e4:	200005dc 	.word	0x200005dc
 80071e8:	7fffffc0 	.word	0x7fffffc0
 80071ec:	40007400 	.word	0x40007400
 80071f0:	e0042000 	.word	0xe0042000
 80071f4:	40007408 	.word	0x40007408
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80071f8:	2001      	movs	r0, #1
 80071fa:	6310      	str	r0, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80071fc:	6950      	ldr	r0, [r2, #20]
 80071fe:	f040 0001 	orr.w	r0, r0, #1
 8007202:	6150      	str	r0, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007204:	6313      	str	r3, [r2, #48]	; 0x30
}
 8007206:	e706      	b.n	8007016 <R3_1_Init+0x112>

08007208 <R3_1_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007208:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800720a:	b570      	push	{r4, r5, r6, lr}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800720c:	e9d3 6500 	ldrd	r6, r5, [r3]
  pHandle->PhaseAOffset = 0u;
 8007210:	2300      	movs	r3, #0
  pHandle->PolarizationCounter = 0u;
 8007212:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
  pHandle->PhaseBOffset = 0u;
 8007216:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  pHandle->PhaseCOffset = 0u;
 800721a:	6643      	str	r3, [r0, #100]	; 0x64
  CLEAR_BIT(TIMx->CCER, Channels);
 800721c:	6a2b      	ldr	r3, [r5, #32]
 800721e:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8007222:	f023 0305 	bic.w	r3, r3, #5
 8007226:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 8007228:	4b3c      	ldr	r3, [pc, #240]	; (800731c <R3_1_CurrentReadingPolarization+0x114>)
 800722a:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800722c:	4b3c      	ldr	r3, [pc, #240]	; (8007320 <R3_1_CurrentReadingPolarization+0x118>)
 800722e:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007230:	2340      	movs	r3, #64	; 0x40
 8007232:	f8a0 306c 	strh.w	r3, [r0, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_5;
 8007236:	2304      	movs	r3, #4
{
 8007238:	b082      	sub	sp, #8
  pHandle->PolarizationSector=SECTOR_5;
 800723a:	f880 306f 	strb.w	r3, [r0, #111]	; 0x6f
  pHandle->_Super.Sector = SECTOR_5;   
 800723e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
{
 8007242:	4604      	mov	r4, r0
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8007244:	f7ff fd3a 	bl	8006cbc <R3_1_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8007248:	686b      	ldr	r3, [r5, #4]
 800724a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800724e:	2b70      	cmp	r3, #112	; 0x70
 8007250:	d1fa      	bne.n	8007248 <R3_1_CurrentReadingPolarization+0x40>
  MODIFY_REG(ADCx->CR,
 8007252:	68b3      	ldr	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 8007254:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800725a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800725e:	f043 0308 	orr.w	r3, r3, #8
 8007262:	60b3      	str	r3, [r6, #8]
 8007264:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007268:	f104 036e 	add.w	r3, r4, #110	; 0x6e
 800726c:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 8007270:	4628      	mov	r0, r5
 8007272:	e9cd 1300 	strd	r1, r3, [sp]
 8007276:	f7ff fa15 	bl	80066a4 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800727a:	4620      	mov	r0, r4
 800727c:	f7ff fd66 	bl	8006d4c <R3_1_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 8007280:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 8007282:	4a28      	ldr	r2, [pc, #160]	; (8007324 <R3_1_CurrentReadingPolarization+0x11c>)
 8007284:	6062      	str	r2, [r4, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8007286:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8007288:	f884 606e 	strb.w	r6, [r4, #110]	; 0x6e
  pHandle->PolarizationSector=SECTOR_1;
 800728c:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  pHandle->_Super.Sector = SECTOR_1; 
 8007290:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8007294:	f7ff fd12 	bl	8006cbc <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8007298:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800729a:	e9dd 1300 	ldrd	r1, r3, [sp]
 800729e:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 80072a2:	4628      	mov	r0, r5
 80072a4:	f7ff f9fe 	bl	80066a4 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7ff fd4f 	bl	8006d4c <R3_1_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80072ae:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80072b2:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80072ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80072bc:	4a1a      	ldr	r2, [pc, #104]	; (8007328 <R3_1_CurrentReadingPolarization+0x120>)
 80072be:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80072c0:	091b      	lsrs	r3, r3, #4
 80072c2:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80072c4:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 80072c6:	4a19      	ldr	r2, [pc, #100]	; (800732c <R3_1_CurrentReadingPolarization+0x124>)
 80072c8:	61a2      	str	r2, [r4, #24]
 80072ca:	f023 0308 	bic.w	r3, r3, #8
 80072ce:	61ab      	str	r3, [r5, #24]
 80072d0:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80072d2:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80072d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072da:	61aa      	str	r2, [r5, #24]
 80072dc:	69ea      	ldr	r2, [r5, #28]
 80072de:	f022 0208 	bic.w	r2, r2, #8
 80072e2:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80072e4:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80072e6:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80072e8:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80072ea:	69ab      	ldr	r3, [r5, #24]
 80072ec:	f043 0308 	orr.w	r3, r3, #8
 80072f0:	61ab      	str	r3, [r5, #24]
 80072f2:	69ab      	ldr	r3, [r5, #24]
 80072f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072f8:	61ab      	str	r3, [r5, #24]
 80072fa:	69eb      	ldr	r3, [r5, #28]
 80072fc:	f043 0308 	orr.w	r3, r3, #8
 8007300:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007302:	6a2b      	ldr	r3, [r5, #32]
 8007304:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector=SECTOR_5;
 8007308:	2204      	movs	r2, #4
 800730a:	f043 0305 	orr.w	r3, r3, #5
 800730e:	622b      	str	r3, [r5, #32]
 8007310:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 8007314:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
}
 8007318:	b002      	add	sp, #8
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	08006be1 	.word	0x08006be1
 8007320:	08006b35 	.word	0x08006b35
 8007324:	08006c29 	.word	0x08006c29
 8007328:	080069c1 	.word	0x080069c1
 800732c:	08006b69 	.word	0x08006b69

08007330 <R3_1_TIMx_UP_IRQHandler>:
{
 8007330:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007332:	6f41      	ldr	r1, [r0, #116]	; 0x74
{
 8007334:	4603      	mov	r3, r0
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007336:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
 800733a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800733e:	680c      	ldr	r4, [r1, #0]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007340:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007344:	6849      	ldr	r1, [r1, #4]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007346:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8007348:	4302      	orrs	r2, r0
 800734a:	64e2      	str	r2, [r4, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800734c:	684a      	ldr	r2, [r1, #4]
}
 800734e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007352:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8007356:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800735a:	604a      	str	r2, [r1, #4]
}
 800735c:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007360:	f8a3 c06c 	strh.w	ip, [r3, #108]	; 0x6c
}
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop

08007368 <R3_1_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8007368:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 800736c:	b923      	cbnz	r3, 8007378 <R3_1_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800736e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007370:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 8007374:	2a02      	cmp	r2, #2
 8007376:	d004      	beq.n	8007382 <R3_1_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8007378:	2301      	movs	r3, #1
 800737a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 800737e:	3046      	adds	r0, #70	; 0x46
 8007380:	4770      	bx	lr
{
 8007382:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007384:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007388:	f8b3 506c 	ldrh.w	r5, [r3, #108]	; 0x6c
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800738c:	6a1a      	ldr	r2, [r3, #32]
  WRITE_REG(GPIOx->BRR, PinMask);
 800738e:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007390:	f8b3 406e 	ldrh.w	r4, [r3, #110]	; 0x6e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007394:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 8007398:	628c      	str	r4, [r1, #40]	; 0x28
 800739a:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 800739c:	2301      	movs	r3, #1
 800739e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
}
 80073a2:	bc30      	pop	{r4, r5}
 80073a4:	3046      	adds	r0, #70	; 0x46
 80073a6:	4770      	bx	lr

080073a8 <R3_1_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80073a8:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80073aa:	6851      	ldr	r1, [r2, #4]
 80073ac:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 80073ae:	4603      	mov	r3, r0
  pHandle->OverVoltageFlag = true;
 80073b0:	f240 1c01 	movw	ip, #257	; 0x101
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80073b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073b8:	644a      	str	r2, [r1, #68]	; 0x44
}
 80073ba:	3046      	adds	r0, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 80073bc:	f8a3 c071 	strh.w	ip, [r3, #113]	; 0x71
}
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop

080073c4 <R3_1_IsOverCurrentOccurred>:
  if ( pHandle->OverVoltageFlag == true )
 80073c4:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 80073c8:	b16b      	cbz	r3, 80073e6 <R3_1_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 80073ca:	2300      	movs	r3, #0
 80073cc:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
 80073d0:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 80073d2:	2302      	movs	r3, #2
  if ( pHandle->OverCurrentFlag == true )
 80073d4:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 80073d8:	b11a      	cbz	r2, 80073e2 <R3_1_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 80073da:	2300      	movs	r3, #0
 80073dc:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    retVal |= MC_BREAK_IN;
 80073e0:	460b      	mov	r3, r1
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	4770      	bx	lr
 80073e6:	2140      	movs	r1, #64	; 0x40
 80073e8:	e7f4      	b.n	80073d4 <R3_1_IsOverCurrentOccurred+0x10>
 80073ea:	bf00      	nop

080073ec <R3_1_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 80073ec:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 80073f0:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 80073f2:	2900      	cmp	r1, #0
 80073f4:	d13a      	bne.n	800746c <R3_1_RLDetectionModeEnable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073f6:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80073f8:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80073fa:	699a      	ldr	r2, [r3, #24]
 80073fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007400:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007404:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007408:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	f042 0201 	orr.w	r2, r2, #1
 8007410:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007412:	6a1a      	ldr	r2, [r3, #32]
 8007414:	f022 0204 	bic.w	r2, r2, #4
 8007418:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800741a:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800741c:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
 8007420:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007422:	f103 0418 	add.w	r4, r3, #24
 8007426:	d02e      	beq.n	8007486 <R3_1_RLDetectionModeEnable+0x9a>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007428:	2a02      	cmp	r2, #2
 800742a:	d10f      	bne.n	800744c <R3_1_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800742c:	699a      	ldr	r2, [r3, #24]
 800742e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007432:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800743a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800743c:	6a1a      	ldr	r2, [r3, #32]
 800743e:	f042 0210 	orr.w	r2, r2, #16
 8007442:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007444:	6a1a      	ldr	r2, [r3, #32]
 8007446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800744a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800744c:	6862      	ldr	r2, [r4, #4]
 800744e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007452:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007456:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 800745a:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007462:	621a      	str	r2, [r3, #32]
 8007464:	6a1a      	ldr	r2, [r3, #32]
 8007466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800746a:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800746c:	4b0e      	ldr	r3, [pc, #56]	; (80074a8 <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800746e:	490f      	ldr	r1, [pc, #60]	; (80074ac <R3_1_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007470:	4a0f      	ldr	r2, [pc, #60]	; (80074b0 <R3_1_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8007472:	4c10      	ldr	r4, [pc, #64]	; (80074b4 <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8007474:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8007476:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8007478:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800747a:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 800747e:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8007480:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007484:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007486:	699a      	ldr	r2, [r3, #24]
 8007488:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800748c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007490:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007494:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007496:	6a1a      	ldr	r2, [r3, #32]
 8007498:	f022 0210 	bic.w	r2, r2, #16
 800749c:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	e7d1      	b.n	800744c <R3_1_RLDetectionModeEnable+0x60>
 80074a8:	08006e11 	.word	0x08006e11
 80074ac:	08006e5d 	.word	0x08006e5d
 80074b0:	08006d4d 	.word	0x08006d4d
 80074b4:	08006dbd 	.word	0x08006dbd

080074b8 <R3_1_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 80074b8:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d045      	beq.n	800754c <R3_1_RLDetectionModeDisable+0x94>
{
 80074c0:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80074c2:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80074c4:	684b      	ldr	r3, [r1, #4]
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	06d4      	lsls	r4, r2, #27
 80074ca:	d5fc      	bpl.n	80074c6 <R3_1_RLDetectionModeDisable+0xe>
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	06d2      	lsls	r2, r2, #27
 80074d0:	d4fc      	bmi.n	80074cc <R3_1_RLDetectionModeDisable+0x14>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80074d2:	699a      	ldr	r2, [r3, #24]
 80074d4:	4d45      	ldr	r5, [pc, #276]	; (80075ec <R3_1_RLDetectionModeDisable+0x134>)
 80074d6:	402a      	ands	r2, r5
 80074d8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80074dc:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80074de:	6a1a      	ldr	r2, [r3, #32]
 80074e0:	f042 0201 	orr.w	r2, r2, #1
 80074e4:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 80074e6:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	d02f      	beq.n	800754e <R3_1_RLDetectionModeDisable+0x96>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80074ee:	2a02      	cmp	r2, #2
 80074f0:	d054      	beq.n	800759c <R3_1_RLDetectionModeDisable+0xe4>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 80074f2:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80074f6:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074f8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80074fa:	699c      	ldr	r4, [r3, #24]
 80074fc:	f024 7c80 	bic.w	ip, r4, #16777216	; 0x1000000
 8007500:	f42c 4ce6 	bic.w	ip, ip, #29440	; 0x7300
 8007504:	f44c 44c0 	orr.w	r4, ip, #24576	; 0x6000
 8007508:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800750a:	6a1c      	ldr	r4, [r3, #32]
 800750c:	f044 0410 	orr.w	r4, r4, #16
 8007510:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007512:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007514:	69dc      	ldr	r4, [r3, #28]
 8007516:	4025      	ands	r5, r4
 8007518:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 800751c:	61dd      	str	r5, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800751e:	6a1c      	ldr	r4, [r3, #32]
 8007520:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8007524:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 8007526:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007528:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 800752a:	68cb      	ldr	r3, [r1, #12]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800752c:	4a30      	ldr	r2, [pc, #192]	; (80075f0 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800752e:	4c31      	ldr	r4, [pc, #196]	; (80075f4 <R3_1_RLDetectionModeDisable+0x13c>)
 8007530:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007534:	60cb      	str	r3, [r1, #12]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8007536:	4930      	ldr	r1, [pc, #192]	; (80075f8 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8007538:	6042      	str	r2, [r0, #4]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800753a:	4a30      	ldr	r2, [pc, #192]	; (80075fc <R3_1_RLDetectionModeDisable+0x144>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800753c:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800753e:	2300      	movs	r3, #0
}
 8007540:	bc30      	pop	{r4, r5}
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007542:	e9c0 2102 	strd	r2, r1, [r0, #8]
    pHandle->_Super.RLDetectionMode = false;
 8007546:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 800754a:	4770      	bx	lr
 800754c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800754e:	6a1a      	ldr	r2, [r3, #32]
 8007550:	f042 0204 	orr.w	r2, r2, #4
 8007554:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007556:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 800755a:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800755c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800755e:	699c      	ldr	r4, [r3, #24]
 8007560:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8007564:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8007568:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 800756c:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800756e:	6a1c      	ldr	r4, [r3, #32]
 8007570:	f044 0410 	orr.w	r4, r4, #16
 8007574:	621c      	str	r4, [r3, #32]
 8007576:	6a1c      	ldr	r4, [r3, #32]
 8007578:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800757c:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800757e:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007580:	69dc      	ldr	r4, [r3, #28]
 8007582:	4025      	ands	r5, r4
 8007584:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 8007588:	61dd      	str	r5, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800758a:	6a1c      	ldr	r4, [r3, #32]
 800758c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8007590:	621c      	str	r4, [r3, #32]
 8007592:	6a1c      	ldr	r4, [r3, #32]
 8007594:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8007598:	621c      	str	r4, [r3, #32]
}
 800759a:	e7c4      	b.n	8007526 <R3_1_RLDetectionModeDisable+0x6e>
  CLEAR_BIT(TIMx->CCER, Channels);
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	f022 0204 	bic.w	r2, r2, #4
 80075a2:	621a      	str	r2, [r3, #32]
 80075a4:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 80075a8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80075aa:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80075ac:	699c      	ldr	r4, [r3, #24]
 80075ae:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80075b2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80075b6:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 80075ba:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80075bc:	6a1c      	ldr	r4, [r3, #32]
 80075be:	f044 0410 	orr.w	r4, r4, #16
 80075c2:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80075c4:	6a1c      	ldr	r4, [r3, #32]
 80075c6:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80075ca:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80075cc:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80075ce:	69dc      	ldr	r4, [r3, #28]
 80075d0:	4025      	ands	r5, r4
 80075d2:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 80075d6:	61dd      	str	r5, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80075d8:	6a1c      	ldr	r4, [r3, #32]
 80075da:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80075de:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80075e0:	6a1c      	ldr	r4, [r3, #32]
 80075e2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80075e6:	621c      	str	r4, [r3, #32]
}
 80075e8:	e79d      	b.n	8007526 <R3_1_RLDetectionModeDisable+0x6e>
 80075ea:	bf00      	nop
 80075ec:	fffeff8c 	.word	0xfffeff8c
 80075f0:	080069c1 	.word	0x080069c1
 80075f4:	08006c69 	.word	0x08006c69
 80075f8:	08006cbd 	.word	0x08006cbd
 80075fc:	08006d4d 	.word	0x08006d4d

08007600 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007600:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007604:	6f42      	ldr	r2, [r0, #116]	; 0x74
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007606:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800760a:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 800760c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800760e:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8007610:	f04f 0c03 	mov.w	ip, #3
 8007614:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007618:	8641      	strh	r1, [r0, #50]	; 0x32
  if ( pHandle->_Super.SWerror == 1u )
 800761a:	2b01      	cmp	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800761c:	6351      	str	r1, [r2, #52]	; 0x34
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800761e:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007620:	d006      	beq.n	8007630 <R3_1_RLDetectionModeSetDuty+0x30>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007622:	f012 0f70 	tst.w	r2, #112	; 0x70
    hAux = MC_FOC_DURATION;
 8007626:	bf14      	ite	ne
 8007628:	2301      	movne	r3, #1
 800762a:	2300      	moveq	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8007630:	2200      	movs	r2, #0
 8007632:	8702      	strh	r2, [r0, #56]	; 0x38
}
 8007634:	4618      	mov	r0, r3
 8007636:	4770      	bx	lr

08007638 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007638:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 800763c:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800763e:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007640:	4494      	add	ip, r2
{
 8007642:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007644:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007648:	b14b      	cbz	r3, 800765e <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 800764a:	6a04      	ldr	r4, [r0, #32]
 800764c:	2300      	movs	r3, #0
 800764e:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007650:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8007652:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007656:	8b01      	ldrh	r1, [r0, #24]
 8007658:	b29a      	uxth	r2, r3
 800765a:	4291      	cmp	r1, r2
 800765c:	d8f7      	bhi.n	800764e <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 800765e:	2300      	movs	r3, #0
 8007660:	f36c 030f 	bfi	r3, ip, #0, #16
 8007664:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8007668:	2200      	movs	r2, #0
}
 800766a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.LatestConv = aux;
 800766e:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8007670:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop

08007678 <RVBS_Init>:
{
 8007678:	b510      	push	{r4, lr}
 800767a:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800767c:	300c      	adds	r0, #12
 800767e:	f7fa fcc9 	bl	8002014 <RCM_RegisterRegConv>
 8007682:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8007686:	4620      	mov	r0, r4
 8007688:	f7ff ffd6 	bl	8007638 <RVBS_Clear>
}
 800768c:	bd10      	pop	{r4, pc}
 800768e:	bf00      	nop

08007690 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007690:	88c3      	ldrh	r3, [r0, #6]
 8007692:	8b42      	ldrh	r2, [r0, #26]
 8007694:	429a      	cmp	r2, r3
 8007696:	d305      	bcc.n	80076a4 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007698:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 800769a:	4298      	cmp	r0, r3
 800769c:	bf8c      	ite	hi
 800769e:	2004      	movhi	r0, #4
 80076a0:	2000      	movls	r0, #0
 80076a2:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 80076a4:	2002      	movs	r0, #2
  }
  return fault;
}
 80076a6:	4770      	bx	lr

080076a8 <RVBS_CalcAvVbusFilt>:
{
 80076a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 80076ac:	8b05      	ldrh	r5, [r0, #24]
{
 80076ae:	4681      	mov	r9, r0
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 80076b0:	b355      	cbz	r5, 8007708 <RVBS_CalcAvVbusFilt+0x60>
  uint32_t tot = 0u;
 80076b2:	2500      	movs	r5, #0
  uint16_t max = 0, min = 0;
 80076b4:	462f      	mov	r7, r5
 80076b6:	462e      	mov	r6, r5
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 80076b8:	462c      	mov	r4, r5
    if ( hAux != 0xFFFFu )
 80076ba:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80076be:	e008      	b.n	80076d2 <RVBS_CalcAvVbusFilt+0x2a>
 80076c0:	b2b6      	uxth	r6, r6
        if ( hAux > max )
 80076c2:	b2bf      	uxth	r7, r7
      vindex++;
 80076c4:	3401      	adds	r4, #1
 80076c6:	b2e4      	uxtb	r4, r4
      tot += hAux;
 80076c8:	4405      	add	r5, r0
  for ( vindex = 0; vindex < pHandle->LowPassFilterBW; )
 80076ca:	f8b9 3018 	ldrh.w	r3, [r9, #24]
 80076ce:	429c      	cmp	r4, r3
 80076d0:	d210      	bcs.n	80076f4 <RVBS_CalcAvVbusFilt+0x4c>
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80076d2:	f899 0026 	ldrb.w	r0, [r9, #38]	; 0x26
 80076d6:	f7fa fd8f 	bl	80021f8 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80076da:	4540      	cmp	r0, r8
 80076dc:	d0f5      	beq.n	80076ca <RVBS_CalcAvVbusFilt+0x22>
        if ( hAux < min )
 80076de:	4286      	cmp	r6, r0
 80076e0:	bf28      	it	cs
 80076e2:	4606      	movcs	r6, r0
 80076e4:	4287      	cmp	r7, r0
 80076e6:	bf38      	it	cc
 80076e8:	4607      	movcc	r7, r0
      if ( vindex == 0 )
 80076ea:	2c00      	cmp	r4, #0
 80076ec:	d1e8      	bne.n	80076c0 <RVBS_CalcAvVbusFilt+0x18>
 80076ee:	4606      	mov	r6, r0
 80076f0:	4607      	mov	r7, r0
 80076f2:	e7e7      	b.n	80076c4 <RVBS_CalcAvVbusFilt+0x1c>
  tot -= min;
 80076f4:	443e      	add	r6, r7
 80076f6:	1bad      	subs	r5, r5, r6
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 80076f8:	3b02      	subs	r3, #2
  if ( hAux != 0xFFFF )
 80076fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
  return ( uint16_t )( tot / ( pHandle->LowPassFilterBW - 2u ) );
 80076fe:	fbb5 f5f3 	udiv	r5, r5, r3
 8007702:	b2ad      	uxth	r5, r5
  if ( hAux != 0xFFFF )
 8007704:	4295      	cmp	r5, r2
 8007706:	d01e      	beq.n	8007746 <RVBS_CalcAvVbusFilt+0x9e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8007708:	f8d9 6020 	ldr.w	r6, [r9, #32]
 800770c:	f899 7025 	ldrb.w	r7, [r9, #37]	; 0x25
 8007710:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007714:	f8b9 4018 	ldrh.w	r4, [r9, #24]
 8007718:	b1e4      	cbz	r4, 8007754 <RVBS_CalcAvVbusFilt+0xac>
 800771a:	2300      	movs	r3, #0
    wtemp = 0;
 800771c:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 800771e:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007722:	3301      	adds	r3, #1
 8007724:	b2d9      	uxtb	r1, r3
 8007726:	42a1      	cmp	r1, r4
      wtemp += pHandle->aBuffer[i];
 8007728:	4402      	add	r2, r0
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800772a:	460b      	mov	r3, r1
 800772c:	d3f7      	bcc.n	800771e <RVBS_CalcAvVbusFilt+0x76>
    wtemp /= pHandle->LowPassFilterBW;
 800772e:	fbb2 f2f4 	udiv	r2, r2, r4
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007732:	1e63      	subs	r3, r4, #1
 8007734:	429f      	cmp	r7, r3
    pHandle->_Super.LatestConv = hAux;
 8007736:	f8a9 5004 	strh.w	r5, [r9, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800773a:	f8a9 2006 	strh.w	r2, [r9, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800773e:	da0d      	bge.n	800775c <RVBS_CalcAvVbusFilt+0xb4>
      pHandle->index++;
 8007740:	3701      	adds	r7, #1
 8007742:	f889 7025 	strb.w	r7, [r9, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007746:	4648      	mov	r0, r9
 8007748:	f7ff ffa2 	bl	8007690 <RVBS_CheckFaultState>
 800774c:	f8a9 0008 	strh.w	r0, [r9, #8]
}
 8007750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007754:	f8a9 4006 	strh.w	r4, [r9, #6]
    pHandle->_Super.LatestConv = hAux;
 8007758:	f8a9 5004 	strh.w	r5, [r9, #4]
      pHandle->index = 0;
 800775c:	2300      	movs	r3, #0
 800775e:	f889 3025 	strb.w	r3, [r9, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007762:	4648      	mov	r0, r9
 8007764:	f7ff ff94 	bl	8007690 <RVBS_CheckFaultState>
 8007768:	f8a9 0008 	strh.w	r0, [r9, #8]
}
 800776c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007770 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8007770:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8007772:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8007774:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007778:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 800777c:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800777e:	4770      	bx	lr

08007780 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8007780:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8007788:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop

08007790 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8007790:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop

08007798 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8007798:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800779c:	8a81      	ldrh	r1, [r0, #20]
{
 800779e:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 80077a0:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 80077a2:	bfb8      	it	lt
 80077a4:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80077a6:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80077aa:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80077ae:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 80077b0:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80077b2:	459e      	cmp	lr, r3
 80077b4:	d819      	bhi.n	80077ea <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80077b6:	4299      	cmp	r1, r3
 80077b8:	bf2c      	ite	cs
 80077ba:	2300      	movcs	r3, #0
 80077bc:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80077be:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80077c2:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 80077c6:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 80077c8:	bfb8      	it	lt
 80077ca:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 80077cc:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80077ce:	458e      	cmp	lr, r1
 80077d0:	d300      	bcc.n	80077d4 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80077d2:	b163      	cbz	r3, 80077ee <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80077d4:	4594      	cmp	ip, r2
 80077d6:	d901      	bls.n	80077dc <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 80077d8:	3201      	adds	r2, #1
 80077da:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80077dc:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 80077de:	ebb2 000c 	subs.w	r0, r2, ip
 80077e2:	bf18      	it	ne
 80077e4:	2001      	movne	r0, #1
 80077e6:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e7e7      	b.n	80077be <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 80077ee:	4594      	cmp	ip, r2
 80077f0:	bf88      	it	hi
 80077f2:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80077f4:	7002      	strb	r2, [r0, #0]
}
 80077f6:	ebb2 000c 	subs.w	r0, r2, ip
 80077fa:	bf18      	it	ne
 80077fc:	2001      	movne	r0, #1
 80077fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007802:	bf00      	nop

08007804 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8007804:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007808:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 800780c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007810:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8007814:	b200      	sxth	r0, r0
 8007816:	4770      	bx	lr

08007818 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007818:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 800781c:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800781e:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8007822:	6142      	str	r2, [r0, #20]
{
 8007824:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8007826:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 800782a:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 800782c:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800782e:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007832:	0409      	lsls	r1, r1, #16
 8007834:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8007838:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800783a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 800783e:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007840:	6183      	str	r3, [r0, #24]
}
 8007842:	4770      	bx	lr

08007844 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8007844:	6940      	ldr	r0, [r0, #20]
 8007846:	4770      	bx	lr

08007848 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007848:	7803      	ldrb	r3, [r0, #0]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d000      	beq.n	8007850 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 800784e:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8007850:	6900      	ldr	r0, [r0, #16]
 8007852:	2100      	movs	r1, #0
 8007854:	f7fe be6c 	b.w	8006530 <PID_SetIntegralTerm>

08007858 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8007858:	6840      	ldr	r0, [r0, #4]
 800785a:	2800      	cmp	r0, #0
 800785c:	bfbc      	itt	lt
 800785e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007862:	30ff      	addlt	r0, #255	; 0xff
}
 8007864:	1400      	asrs	r0, r0, #16
 8007866:	4770      	bx	lr

08007868 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8007868:	6880      	ldr	r0, [r0, #8]
 800786a:	2800      	cmp	r0, #0
 800786c:	bfbc      	itt	lt
 800786e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007872:	30ff      	addlt	r0, #255	; 0xff
}
 8007874:	1400      	asrs	r0, r0, #16
 8007876:	4770      	bx	lr

08007878 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007878:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800787a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800787c:	60c3      	str	r3, [r0, #12]
}
 800787e:	4770      	bx	lr

08007880 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8007880:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8007882:	7803      	ldrb	r3, [r0, #0]
{
 8007884:	4604      	mov	r4, r0
 8007886:	460d      	mov	r5, r1
 8007888:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800788a:	b323      	cbz	r3, 80078d6 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800788c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800788e:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8007890:	2800      	cmp	r0, #0
 8007892:	bfbc      	itt	lt
 8007894:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8007898:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800789a:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800789c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 80078a0:	dd01      	ble.n	80078a6 <STC_ExecRamp+0x26>
      AllowedRange = false;
 80078a2:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 80078a4:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 80078a6:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 80078aa:	428b      	cmp	r3, r1
 80078ac:	dcf9      	bgt.n	80078a2 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 80078ae:	8c23      	ldrh	r3, [r4, #32]
 80078b0:	4299      	cmp	r1, r3
 80078b2:	da03      	bge.n	80078bc <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 80078b4:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 80078b8:	428b      	cmp	r3, r1
 80078ba:	dbf2      	blt.n	80078a2 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 80078bc:	b9ae      	cbnz	r6, 80078ea <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80078be:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80078c0:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 80078c2:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 80078c4:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80078c8:	bf0c      	ite	eq
 80078ca:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80078cc:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80078ce:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80078d0:	61a3      	str	r3, [r4, #24]
 80078d2:	2001      	movs	r0, #1
}
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80078d6:	f7ff ffc7 	bl	8007868 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80078da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80078dc:	429d      	cmp	r5, r3
 80078de:	dce0      	bgt.n	80078a2 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80078e0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80078e4:	42ab      	cmp	r3, r5
 80078e6:	dcdc      	bgt.n	80078a2 <STC_ExecRamp+0x22>
 80078e8:	e7e8      	b.n	80078bc <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80078ea:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 80078ec:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80078ee:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 80078f2:	4e06      	ldr	r6, [pc, #24]	; (800790c <STC_ExecRamp+0x8c>)
 80078f4:	fba6 2303 	umull	r2, r3, r6, r3
 80078f8:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80078fa:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80078fc:	1a28      	subs	r0, r5, r0
 80078fe:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8007900:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8007902:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8007906:	61a0      	str	r0, [r4, #24]
 8007908:	2001      	movs	r0, #1
}
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	10624dd3 	.word	0x10624dd3

08007910 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8007910:	2300      	movs	r3, #0
 8007912:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007914:	6183      	str	r3, [r0, #24]
}
 8007916:	4770      	bx	lr

08007918 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8007918:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 800791a:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800791e:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8007920:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8007922:	2a00      	cmp	r2, #0
 8007924:	bf08      	it	eq
 8007926:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8007928:	2b01      	cmp	r3, #1
{
 800792a:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 800792c:	d90c      	bls.n	8007948 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800792e:	6981      	ldr	r1, [r0, #24]
 8007930:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8007932:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007934:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8007936:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8007938:	4630      	mov	r0, r6
 800793a:	db09      	blt.n	8007950 <STC_CalcTorqueReference+0x38>
 800793c:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 800793e:	2a01      	cmp	r2, #1
 8007940:	d00a      	beq.n	8007958 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8007942:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8007944:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8007946:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8007948:	d012      	beq.n	8007970 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800794a:	2e00      	cmp	r6, #0
 800794c:	4630      	mov	r0, r6
 800794e:	daf5      	bge.n	800793c <STC_CalcTorqueReference+0x24>
 8007950:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8007954:	30ff      	adds	r0, #255	; 0xff
 8007956:	e7f1      	b.n	800793c <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8007958:	6960      	ldr	r0, [r4, #20]
 800795a:	f7ff ff15 	bl	8007788 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800795e:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8007960:	b209      	sxth	r1, r1
 8007962:	6920      	ldr	r0, [r4, #16]
 8007964:	f7fe fdf0 	bl	8006548 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8007968:	0403      	lsls	r3, r0, #16
 800796a:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800796e:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007970:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8007974:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8007976:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8007978:	60c3      	str	r3, [r0, #12]
 800797a:	e7e0      	b.n	800793e <STC_CalcTorqueReference+0x26>

0800797c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800797c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop

08007984 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8007984:	8bc0      	ldrh	r0, [r0, #30]
 8007986:	4770      	bx	lr

08007988 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8007988:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop

08007990 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8007990:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8007994:	2200      	movs	r2, #0
 8007996:	b299      	uxth	r1, r3
 8007998:	f361 020f 	bfi	r2, r1, #0, #16
 800799c:	0c1b      	lsrs	r3, r3, #16
 800799e:	f363 421f 	bfi	r2, r3, #16, #16
{
 80079a2:	b082      	sub	sp, #8
}
 80079a4:	4610      	mov	r0, r2
 80079a6:	b002      	add	sp, #8
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop

080079ac <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 80079ac:	b510      	push	{r4, lr}
 80079ae:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 80079b0:	6940      	ldr	r0, [r0, #20]
 80079b2:	f7ff fee9 	bl	8007788 <SPD_GetAvrgMecSpeedUnit>
 80079b6:	0400      	lsls	r0, r0, #16
 80079b8:	6060      	str	r0, [r4, #4]
}
 80079ba:	bd10      	pop	{r4, pc}

080079bc <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 80079bc:	2300      	movs	r3, #0
 80079be:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 80079c0:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 80079c4:	4770      	bx	lr
 80079c6:	bf00      	nop

080079c8 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80079c8:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80079ca:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80079ce:	430b      	orrs	r3, r1
 80079d0:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 80079d4:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 80079d6:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80079da:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 80079dc:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80079de:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80079e0:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 80079e2:	d006      	beq.n	80079f2 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80079e4:	b90a      	cbnz	r2, 80079ea <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80079ea:	230a      	movs	r3, #10
 80079ec:	7003      	strb	r3, [r0, #0]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80079f2:	2a00      	cmp	r2, #0
 80079f4:	d1f7      	bne.n	80079e6 <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 80079f6:	230b      	movs	r3, #11
 80079f8:	7003      	strb	r3, [r0, #0]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop

08007a00 <STM_NextState>:
{
 8007a00:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8007a02:	7803      	ldrb	r3, [r0, #0]
 8007a04:	2b14      	cmp	r3, #20
 8007a06:	d810      	bhi.n	8007a2a <STM_NextState+0x2a>
 8007a08:	e8df f003 	tbb	[pc, r3]
 8007a0c:	200d3457 	.word	0x200d3457
 8007a10:	500d532a 	.word	0x500d532a
 8007a14:	0f0f484d 	.word	0x0f0f484d
 8007a18:	455e0b1b 	.word	0x455e0b1b
 8007a1c:	3b3f6342 	.word	0x3b3f6342
 8007a20:	31          	.byte	0x31
 8007a21:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007a22:	290e      	cmp	r1, #14
 8007a24:	d00f      	beq.n	8007a46 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 8007a26:	2907      	cmp	r1, #7
 8007a28:	d00d      	beq.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007a2a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d014      	beq.n	8007a5c <STM_NextState+0x5c>
 8007a32:	2907      	cmp	r1, #7
 8007a34:	d012      	beq.n	8007a5c <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8007a36:	2200      	movs	r2, #0
 8007a38:	2180      	movs	r1, #128	; 0x80
 8007a3a:	f7ff ffc5 	bl	80079c8 <STM_FaultProcessing>
 8007a3e:	2000      	movs	r0, #0
}
 8007a40:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8007a42:	2900      	cmp	r1, #0
 8007a44:	d1f1      	bne.n	8007a2a <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8007a46:	7001      	strb	r1, [r0, #0]
 8007a48:	2001      	movs	r0, #1
}
 8007a4a:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8007a4c:	2911      	cmp	r1, #17
 8007a4e:	d8f2      	bhi.n	8007a36 <STM_NextState+0x36>
 8007a50:	4b23      	ldr	r3, [pc, #140]	; (8007ae0 <STM_NextState+0xe0>)
 8007a52:	40cb      	lsrs	r3, r1
 8007a54:	07da      	lsls	r2, r3, #31
 8007a56:	d4f6      	bmi.n	8007a46 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007a58:	2903      	cmp	r1, #3
 8007a5a:	d1ec      	bne.n	8007a36 <STM_NextState+0x36>
 8007a5c:	2000      	movs	r0, #0
}
 8007a5e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007a60:	2913      	cmp	r1, #19
 8007a62:	d0f0      	beq.n	8007a46 <STM_NextState+0x46>
 8007a64:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8007a68:	2b05      	cmp	r3, #5
 8007a6a:	d1e0      	bne.n	8007a2e <STM_NextState+0x2e>
 8007a6c:	e7eb      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8007a6e:	2912      	cmp	r1, #18
 8007a70:	d1d9      	bne.n	8007a26 <STM_NextState+0x26>
 8007a72:	e7e8      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8007a74:	2907      	cmp	r1, #7
 8007a76:	d0e6      	beq.n	8007a46 <STM_NextState+0x46>
 8007a78:	f1a1 030d 	sub.w	r3, r1, #13
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d8d4      	bhi.n	8007a2a <STM_NextState+0x2a>
 8007a80:	e7e1      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8007a82:	1f0b      	subs	r3, r1, #4
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d8ce      	bhi.n	8007a26 <STM_NextState+0x26>
 8007a88:	e7dd      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8007a8a:	2904      	cmp	r1, #4
 8007a8c:	d1cb      	bne.n	8007a26 <STM_NextState+0x26>
 8007a8e:	e7da      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8007a90:	2911      	cmp	r1, #17
 8007a92:	d1c8      	bne.n	8007a26 <STM_NextState+0x26>
 8007a94:	e7d7      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8007a96:	2902      	cmp	r1, #2
 8007a98:	d1c5      	bne.n	8007a26 <STM_NextState+0x26>
 8007a9a:	e7d4      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	d0d2      	beq.n	8007a46 <STM_NextState+0x46>
 8007aa0:	290c      	cmp	r1, #12
 8007aa2:	d1c2      	bne.n	8007a2a <STM_NextState+0x2a>
 8007aa4:	e7cf      	b.n	8007a46 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8007aa6:	2909      	cmp	r1, #9
 8007aa8:	d1bf      	bne.n	8007a2a <STM_NextState+0x2a>
 8007aaa:	e7cc      	b.n	8007a46 <STM_NextState+0x46>
      if ( bState == STOP )
 8007aac:	2908      	cmp	r1, #8
 8007aae:	d1bc      	bne.n	8007a2a <STM_NextState+0x2a>
 8007ab0:	e7c9      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8007ab2:	1f8b      	subs	r3, r1, #6
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d8b8      	bhi.n	8007a2a <STM_NextState+0x2a>
 8007ab8:	e7c5      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8007aba:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d0c1      	beq.n	8007a46 <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 8007ac2:	290c      	cmp	r1, #12
 8007ac4:	d1b5      	bne.n	8007a32 <STM_NextState+0x32>
 8007ac6:	e7be      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8007ac8:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8007acc:	2b07      	cmp	r3, #7
 8007ace:	d1ac      	bne.n	8007a2a <STM_NextState+0x2a>
 8007ad0:	e7b9      	b.n	8007a46 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8007ad2:	2914      	cmp	r1, #20
 8007ad4:	d8a9      	bhi.n	8007a2a <STM_NextState+0x2a>
 8007ad6:	4b03      	ldr	r3, [pc, #12]	; (8007ae4 <STM_NextState+0xe4>)
 8007ad8:	40cb      	lsrs	r3, r1
 8007ada:	07db      	lsls	r3, r3, #31
 8007adc:	d4b3      	bmi.n	8007a46 <STM_NextState+0x46>
 8007ade:	e7a4      	b.n	8007a2a <STM_NextState+0x2a>
 8007ae0:	00030092 	.word	0x00030092
 8007ae4:	00140080 	.word	0x00140080

08007ae8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8007ae8:	7800      	ldrb	r0, [r0, #0]
 8007aea:	4770      	bx	lr

08007aec <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8007aec:	7803      	ldrb	r3, [r0, #0]
 8007aee:	2b0b      	cmp	r3, #11
 8007af0:	d001      	beq.n	8007af6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8007af2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8007af4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8007af6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007af8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8007afa:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8007afc:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8007afe:	2001      	movs	r0, #1
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop

08007b04 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8007b04:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8007b06:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8007b08:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007b0c:	4770      	bx	lr
 8007b0e:	bf00      	nop

08007b10 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8007b10:	f7fd bfd2 	b.w	8005ab8 <FCP_Init>

08007b14 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8007b14:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 8007b18:	b16b      	cbz	r3, 8007b36 <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8007b1a:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8007b1e:	4602      	mov	r2, r0
 8007b20:	b1a3      	cbz	r3, 8007b4c <UFCP_TX_IRQ_Handler+0x38>
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d108      	bne.n	8007b38 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8007b26:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007b28:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8007b2c:	8501      	strh	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8007b2e:	3301      	adds	r3, #1
 8007b30:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 8007b34:	4770      	bx	lr
 8007b36:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8007b38:	7d41      	ldrb	r1, [r0, #21]
 8007b3a:	3101      	adds	r1, #1
 8007b3c:	428b      	cmp	r3, r1
 8007b3e:	dc07      	bgt.n	8007b50 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8007b40:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007b42:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8007b46:	7d09      	ldrb	r1, [r1, #20]
 8007b48:	8501      	strh	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8007b4a:	e7f0      	b.n	8007b2e <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8007b4c:	7d01      	ldrb	r1, [r0, #20]
        break;
 8007b4e:	e7eb      	b.n	8007b28 <UFCP_TX_IRQ_Handler+0x14>
{
 8007b50:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8007b52:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 8007b56:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8007b5a:	850b      	strh	r3, [r1, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8007b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	e841 3400 	strex	r4, r3, [r1]
 8007b68:	2c00      	cmp	r4, #0
 8007b6a:	d1f7      	bne.n	8007b5c <UFCP_TX_IRQ_Handler+0x48>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8007b6c:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8007b70:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8007b74:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8007b78:	4718      	bx	r3
 8007b7a:	bf00      	nop

08007b7c <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8007b7c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8007b80:	b973      	cbnz	r3, 8007ba0 <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8007b82:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007b84:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8007b88:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	e852 3f00 	ldrex	r3, [r2]
 8007b90:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b94:	e842 3100 	strex	r1, r3, [r2]
 8007b98:	2900      	cmp	r1, #0
 8007b9a:	d1f7      	bne.n	8007b8c <UFCP_Receive+0x10>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8007b9c:	2002      	movs	r0, #2
 8007b9e:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8007ba0:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8007ba2:	4770      	bx	lr

08007ba4 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8007ba8:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d147      	bne.n	8007c40 <UFCP_Send+0x9c>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8007bb0:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8007bb2:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 8007bb6:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8007bb8:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8007bba:	b2c0      	uxtb	r0, r0
 8007bbc:	b343      	cbz	r3, 8007c10 <UFCP_Send+0x6c>
 8007bbe:	1c51      	adds	r1, r2, #1
 8007bc0:	1a75      	subs	r5, r6, r1
 8007bc2:	2d02      	cmp	r5, #2
 8007bc4:	d93e      	bls.n	8007c44 <UFCP_Send+0xa0>
 8007bc6:	2807      	cmp	r0, #7
 8007bc8:	d93c      	bls.n	8007c44 <UFCP_Send+0xa0>
 8007bca:	089d      	lsrs	r5, r3, #2
 8007bcc:	3d01      	subs	r5, #1
 8007bce:	b2e9      	uxtb	r1, r5
 8007bd0:	1d15      	adds	r5, r2, #4
 8007bd2:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8007bd6:	46b4      	mov	ip, r6
 8007bd8:	4611      	mov	r1, r2
 8007bda:	f851 eb04 	ldr.w	lr, [r1], #4
 8007bde:	f84c eb04 	str.w	lr, [ip], #4
 8007be2:	42a9      	cmp	r1, r5
 8007be4:	d1f9      	bne.n	8007bda <UFCP_Send+0x36>
 8007be6:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8007bea:	1a40      	subs	r0, r0, r1
 8007bec:	428b      	cmp	r3, r1
 8007bee:	b2c0      	uxtb	r0, r0
 8007bf0:	eb02 0c01 	add.w	ip, r2, r1
 8007bf4:	eb06 0501 	add.w	r5, r6, r1
 8007bf8:	d00a      	beq.n	8007c10 <UFCP_Send+0x6c>
 8007bfa:	5c53      	ldrb	r3, [r2, r1]
 8007bfc:	5473      	strb	r3, [r6, r1]
 8007bfe:	b138      	cbz	r0, 8007c10 <UFCP_Send+0x6c>
 8007c00:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8007c04:	706b      	strb	r3, [r5, #1]
 8007c06:	2801      	cmp	r0, #1
 8007c08:	d002      	beq.n	8007c10 <UFCP_Send+0x6c>
 8007c0a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8007c0e:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007c10:	f104 0014 	add.w	r0, r4, #20
 8007c14:	f7fd ff64 	bl	8005ae0 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 8007c18:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8007c1a:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8007c1c:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8007c20:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 8007c24:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8007c28:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2c:	e852 3f00 	ldrex	r3, [r2]
 8007c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	e842 3100 	strex	r1, r3, [r2]
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d1f7      	bne.n	8007c2c <UFCP_Send+0x88>
 8007c3c:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8007c40:	2001      	movs	r0, #1
}
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	f104 0015 	add.w	r0, r4, #21
 8007c48:	4413      	add	r3, r2
 8007c4a:	e000      	b.n	8007c4e <UFCP_Send+0xaa>
 8007c4c:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 8007c4e:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8007c52:	f800 2f01 	strb.w	r2, [r0, #1]!
 8007c56:	4299      	cmp	r1, r3
 8007c58:	d1f8      	bne.n	8007c4c <UFCP_Send+0xa8>
 8007c5a:	e7d9      	b.n	8007c10 <UFCP_Send+0x6c>

08007c5c <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8007c5c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8007c60:	b90b      	cbnz	r3, 8007c66 <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007c62:	4830      	ldr	r0, [pc, #192]	; (8007d24 <UFCP_RX_IRQ_Handler+0xc8>)
}
 8007c64:	4770      	bx	lr
{
 8007c66:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8007c68:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8007c6c:	b083      	sub	sp, #12
 8007c6e:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8007c70:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 8007c72:	b393      	cbz	r3, 8007cda <UFCP_RX_IRQ_Handler+0x7e>
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d03a      	beq.n	8007cee <UFCP_RX_IRQ_Handler+0x92>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8007c78:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8007c7c:	3101      	adds	r1, #1
 8007c7e:	428b      	cmp	r3, r1
 8007c80:	dc08      	bgt.n	8007c94 <UFCP_RX_IRQ_Handler+0x38>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8007c82:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 8007c84:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007c86:	4827      	ldr	r0, [pc, #156]	; (8007d24 <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8007c88:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8007c8c:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8007c90:	b003      	add	sp, #12
 8007c92:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 8007c94:	2300      	movs	r3, #0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8007c96:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8007c9a:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8007c9e:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	e851 3f00 	ldrex	r3, [r1]
 8007ca4:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	e841 3200 	strex	r2, r3, [r1]
 8007cac:	2a00      	cmp	r2, #0
 8007cae:	d1f7      	bne.n	8007ca0 <UFCP_RX_IRQ_Handler+0x44>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007cb0:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8007cb4:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8007cb8:	f7fd ff12 	bl	8005ae0 <FCP_CalcCRC>
 8007cbc:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8007cc0:	4283      	cmp	r3, r0
 8007cc2:	d122      	bne.n	8007d0a <UFCP_RX_IRQ_Handler+0xae>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	68a5      	ldr	r5, [r4, #8]
 8007cc8:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8007ccc:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8007cd0:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8007cd4:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8007cd6:	4814      	ldr	r0, [pc, #80]	; (8007d28 <UFCP_RX_IRQ_Handler+0xcc>)
 8007cd8:	e7da      	b.n	8007c90 <UFCP_RX_IRQ_Handler+0x34>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8007cda:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8007cdc:	4813      	ldr	r0, [pc, #76]	; (8007d2c <UFCP_RX_IRQ_Handler+0xd0>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8007cde:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8007ce2:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8007ce4:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8007ce6:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8007cea:	b003      	add	sp, #12
 8007cec:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8007cee:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8007cf0:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8007cf4:	d404      	bmi.n	8007d00 <UFCP_RX_IRQ_Handler+0xa4>
        pBaseHandle->RxFrameLevel++;
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007cfc:	4809      	ldr	r0, [pc, #36]	; (8007d24 <UFCP_RX_IRQ_Handler+0xc8>)
 8007cfe:	e7c7      	b.n	8007c90 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 8007d00:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8007d02:	4808      	ldr	r0, [pc, #32]	; (8007d24 <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrameLevel =0 ;
 8007d04:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8007d08:	e7c2      	b.n	8007c90 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 8007d0a:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	f10d 0207 	add.w	r2, sp, #7
 8007d12:	21ff      	movs	r1, #255	; 0xff
 8007d14:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8007d16:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007d1a:	f7ff ff43 	bl	8007ba4 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8007d1e:	4802      	ldr	r0, [pc, #8]	; (8007d28 <UFCP_RX_IRQ_Handler+0xcc>)
  return ret_val;
 8007d20:	e7b6      	b.n	8007c90 <UFCP_RX_IRQ_Handler+0x34>
 8007d22:	bf00      	nop
 8007d24:	08008abc 	.word	0x08008abc
 8007d28:	08008ac0 	.word	0x08008ac0
 8007d2c:	08008abe 	.word	0x08008abe

08007d30 <UFCP_OVR_IRQ_Handler>:
{
 8007d30:	b500      	push	{lr}
 8007d32:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8007d34:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f10d 0207 	add.w	r2, sp, #7
 8007d3e:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8007d40:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8007d44:	f7ff ff2e 	bl	8007ba4 <UFCP_Send>
}
 8007d48:	b003      	add	sp, #12
 8007d4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d4e:	bf00      	nop

08007d50 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8007d56:	4770      	bx	lr

08007d58 <RUC_SetPhaseDurationms>:
 8007d58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d60:	818a      	strh	r2, [r1, #12]
 8007d62:	4770      	bx	lr

08007d64 <RUC_SetPhaseFinalMecSpeedUnit>:
 8007d64:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d6c:	81ca      	strh	r2, [r1, #14]
 8007d6e:	4770      	bx	lr

08007d70 <RUC_SetPhaseFinalTorque>:
 8007d70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d78:	820a      	strh	r2, [r1, #16]
 8007d7a:	4770      	bx	lr

08007d7c <RUC_GetPhaseDurationms>:
 8007d7c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d84:	8988      	ldrh	r0, [r1, #12]
 8007d86:	4770      	bx	lr

08007d88 <RUC_GetPhaseFinalMecSpeedUnit>:
 8007d88:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d8c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d90:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop

08007d98 <RUC_GetPhaseFinalTorque>:
 8007d98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007d9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007da0:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop

08007da8 <RUC_GetNumberOfPhases>:
 8007da8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop

08007db0 <__errno>:
 8007db0:	4b01      	ldr	r3, [pc, #4]	; (8007db8 <__errno+0x8>)
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	200005e8 	.word	0x200005e8

08007dbc <__libc_init_array>:
 8007dbc:	b570      	push	{r4, r5, r6, lr}
 8007dbe:	4d0d      	ldr	r5, [pc, #52]	; (8007df4 <__libc_init_array+0x38>)
 8007dc0:	4c0d      	ldr	r4, [pc, #52]	; (8007df8 <__libc_init_array+0x3c>)
 8007dc2:	1b64      	subs	r4, r4, r5
 8007dc4:	10a4      	asrs	r4, r4, #2
 8007dc6:	2600      	movs	r6, #0
 8007dc8:	42a6      	cmp	r6, r4
 8007dca:	d109      	bne.n	8007de0 <__libc_init_array+0x24>
 8007dcc:	4d0b      	ldr	r5, [pc, #44]	; (8007dfc <__libc_init_array+0x40>)
 8007dce:	4c0c      	ldr	r4, [pc, #48]	; (8007e00 <__libc_init_array+0x44>)
 8007dd0:	f000 fc8e 	bl	80086f0 <_init>
 8007dd4:	1b64      	subs	r4, r4, r5
 8007dd6:	10a4      	asrs	r4, r4, #2
 8007dd8:	2600      	movs	r6, #0
 8007dda:	42a6      	cmp	r6, r4
 8007ddc:	d105      	bne.n	8007dea <__libc_init_array+0x2e>
 8007dde:	bd70      	pop	{r4, r5, r6, pc}
 8007de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de4:	4798      	blx	r3
 8007de6:	3601      	adds	r6, #1
 8007de8:	e7ee      	b.n	8007dc8 <__libc_init_array+0xc>
 8007dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dee:	4798      	blx	r3
 8007df0:	3601      	adds	r6, #1
 8007df2:	e7f2      	b.n	8007dda <__libc_init_array+0x1e>
 8007df4:	08008af8 	.word	0x08008af8
 8007df8:	08008af8 	.word	0x08008af8
 8007dfc:	08008af8 	.word	0x08008af8
 8007e00:	08008afc 	.word	0x08008afc

08007e04 <memset>:
 8007e04:	4402      	add	r2, r0
 8007e06:	4603      	mov	r3, r0
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d100      	bne.n	8007e0e <memset+0xa>
 8007e0c:	4770      	bx	lr
 8007e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007e12:	e7f9      	b.n	8007e08 <memset+0x4>

08007e14 <siprintf>:
 8007e14:	b40e      	push	{r1, r2, r3}
 8007e16:	b500      	push	{lr}
 8007e18:	b09c      	sub	sp, #112	; 0x70
 8007e1a:	ab1d      	add	r3, sp, #116	; 0x74
 8007e1c:	9002      	str	r0, [sp, #8]
 8007e1e:	9006      	str	r0, [sp, #24]
 8007e20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e24:	4809      	ldr	r0, [pc, #36]	; (8007e4c <siprintf+0x38>)
 8007e26:	9107      	str	r1, [sp, #28]
 8007e28:	9104      	str	r1, [sp, #16]
 8007e2a:	4909      	ldr	r1, [pc, #36]	; (8007e50 <siprintf+0x3c>)
 8007e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e30:	9105      	str	r1, [sp, #20]
 8007e32:	6800      	ldr	r0, [r0, #0]
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	a902      	add	r1, sp, #8
 8007e38:	f000 f868 	bl	8007f0c <_svfiprintf_r>
 8007e3c:	9b02      	ldr	r3, [sp, #8]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	701a      	strb	r2, [r3, #0]
 8007e42:	b01c      	add	sp, #112	; 0x70
 8007e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e48:	b003      	add	sp, #12
 8007e4a:	4770      	bx	lr
 8007e4c:	200005e8 	.word	0x200005e8
 8007e50:	ffff0208 	.word	0xffff0208

08007e54 <__ssputs_r>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	688e      	ldr	r6, [r1, #8]
 8007e5a:	429e      	cmp	r6, r3
 8007e5c:	4682      	mov	sl, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	4690      	mov	r8, r2
 8007e62:	461f      	mov	r7, r3
 8007e64:	d838      	bhi.n	8007ed8 <__ssputs_r+0x84>
 8007e66:	898a      	ldrh	r2, [r1, #12]
 8007e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e6c:	d032      	beq.n	8007ed4 <__ssputs_r+0x80>
 8007e6e:	6825      	ldr	r5, [r4, #0]
 8007e70:	6909      	ldr	r1, [r1, #16]
 8007e72:	eba5 0901 	sub.w	r9, r5, r1
 8007e76:	6965      	ldr	r5, [r4, #20]
 8007e78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e80:	3301      	adds	r3, #1
 8007e82:	444b      	add	r3, r9
 8007e84:	106d      	asrs	r5, r5, #1
 8007e86:	429d      	cmp	r5, r3
 8007e88:	bf38      	it	cc
 8007e8a:	461d      	movcc	r5, r3
 8007e8c:	0553      	lsls	r3, r2, #21
 8007e8e:	d531      	bpl.n	8007ef4 <__ssputs_r+0xa0>
 8007e90:	4629      	mov	r1, r5
 8007e92:	f000 fb63 	bl	800855c <_malloc_r>
 8007e96:	4606      	mov	r6, r0
 8007e98:	b950      	cbnz	r0, 8007eb0 <__ssputs_r+0x5c>
 8007e9a:	230c      	movs	r3, #12
 8007e9c:	f8ca 3000 	str.w	r3, [sl]
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ea6:	81a3      	strh	r3, [r4, #12]
 8007ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8007eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb0:	6921      	ldr	r1, [r4, #16]
 8007eb2:	464a      	mov	r2, r9
 8007eb4:	f000 fabe 	bl	8008434 <memcpy>
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec2:	81a3      	strh	r3, [r4, #12]
 8007ec4:	6126      	str	r6, [r4, #16]
 8007ec6:	6165      	str	r5, [r4, #20]
 8007ec8:	444e      	add	r6, r9
 8007eca:	eba5 0509 	sub.w	r5, r5, r9
 8007ece:	6026      	str	r6, [r4, #0]
 8007ed0:	60a5      	str	r5, [r4, #8]
 8007ed2:	463e      	mov	r6, r7
 8007ed4:	42be      	cmp	r6, r7
 8007ed6:	d900      	bls.n	8007eda <__ssputs_r+0x86>
 8007ed8:	463e      	mov	r6, r7
 8007eda:	6820      	ldr	r0, [r4, #0]
 8007edc:	4632      	mov	r2, r6
 8007ede:	4641      	mov	r1, r8
 8007ee0:	f000 fab6 	bl	8008450 <memmove>
 8007ee4:	68a3      	ldr	r3, [r4, #8]
 8007ee6:	1b9b      	subs	r3, r3, r6
 8007ee8:	60a3      	str	r3, [r4, #8]
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	4433      	add	r3, r6
 8007eee:	6023      	str	r3, [r4, #0]
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	e7db      	b.n	8007eac <__ssputs_r+0x58>
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	f000 fba5 	bl	8008644 <_realloc_r>
 8007efa:	4606      	mov	r6, r0
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d1e1      	bne.n	8007ec4 <__ssputs_r+0x70>
 8007f00:	6921      	ldr	r1, [r4, #16]
 8007f02:	4650      	mov	r0, sl
 8007f04:	f000 fabe 	bl	8008484 <_free_r>
 8007f08:	e7c7      	b.n	8007e9a <__ssputs_r+0x46>
	...

08007f0c <_svfiprintf_r>:
 8007f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	4698      	mov	r8, r3
 8007f12:	898b      	ldrh	r3, [r1, #12]
 8007f14:	061b      	lsls	r3, r3, #24
 8007f16:	b09d      	sub	sp, #116	; 0x74
 8007f18:	4607      	mov	r7, r0
 8007f1a:	460d      	mov	r5, r1
 8007f1c:	4614      	mov	r4, r2
 8007f1e:	d50e      	bpl.n	8007f3e <_svfiprintf_r+0x32>
 8007f20:	690b      	ldr	r3, [r1, #16]
 8007f22:	b963      	cbnz	r3, 8007f3e <_svfiprintf_r+0x32>
 8007f24:	2140      	movs	r1, #64	; 0x40
 8007f26:	f000 fb19 	bl	800855c <_malloc_r>
 8007f2a:	6028      	str	r0, [r5, #0]
 8007f2c:	6128      	str	r0, [r5, #16]
 8007f2e:	b920      	cbnz	r0, 8007f3a <_svfiprintf_r+0x2e>
 8007f30:	230c      	movs	r3, #12
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295
 8007f38:	e0d1      	b.n	80080de <_svfiprintf_r+0x1d2>
 8007f3a:	2340      	movs	r3, #64	; 0x40
 8007f3c:	616b      	str	r3, [r5, #20]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9309      	str	r3, [sp, #36]	; 0x24
 8007f42:	2320      	movs	r3, #32
 8007f44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f48:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f4c:	2330      	movs	r3, #48	; 0x30
 8007f4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080f8 <_svfiprintf_r+0x1ec>
 8007f52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f56:	f04f 0901 	mov.w	r9, #1
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	469a      	mov	sl, r3
 8007f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f62:	b10a      	cbz	r2, 8007f68 <_svfiprintf_r+0x5c>
 8007f64:	2a25      	cmp	r2, #37	; 0x25
 8007f66:	d1f9      	bne.n	8007f5c <_svfiprintf_r+0x50>
 8007f68:	ebba 0b04 	subs.w	fp, sl, r4
 8007f6c:	d00b      	beq.n	8007f86 <_svfiprintf_r+0x7a>
 8007f6e:	465b      	mov	r3, fp
 8007f70:	4622      	mov	r2, r4
 8007f72:	4629      	mov	r1, r5
 8007f74:	4638      	mov	r0, r7
 8007f76:	f7ff ff6d 	bl	8007e54 <__ssputs_r>
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	f000 80aa 	beq.w	80080d4 <_svfiprintf_r+0x1c8>
 8007f80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f82:	445a      	add	r2, fp
 8007f84:	9209      	str	r2, [sp, #36]	; 0x24
 8007f86:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 80a2 	beq.w	80080d4 <_svfiprintf_r+0x1c8>
 8007f90:	2300      	movs	r3, #0
 8007f92:	f04f 32ff 	mov.w	r2, #4294967295
 8007f96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f9a:	f10a 0a01 	add.w	sl, sl, #1
 8007f9e:	9304      	str	r3, [sp, #16]
 8007fa0:	9307      	str	r3, [sp, #28]
 8007fa2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fa6:	931a      	str	r3, [sp, #104]	; 0x68
 8007fa8:	4654      	mov	r4, sl
 8007faa:	2205      	movs	r2, #5
 8007fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb0:	4851      	ldr	r0, [pc, #324]	; (80080f8 <_svfiprintf_r+0x1ec>)
 8007fb2:	f7f8 f90d 	bl	80001d0 <memchr>
 8007fb6:	9a04      	ldr	r2, [sp, #16]
 8007fb8:	b9d8      	cbnz	r0, 8007ff2 <_svfiprintf_r+0xe6>
 8007fba:	06d0      	lsls	r0, r2, #27
 8007fbc:	bf44      	itt	mi
 8007fbe:	2320      	movmi	r3, #32
 8007fc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc4:	0711      	lsls	r1, r2, #28
 8007fc6:	bf44      	itt	mi
 8007fc8:	232b      	movmi	r3, #43	; 0x2b
 8007fca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fce:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd4:	d015      	beq.n	8008002 <_svfiprintf_r+0xf6>
 8007fd6:	9a07      	ldr	r2, [sp, #28]
 8007fd8:	4654      	mov	r4, sl
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f04f 0c0a 	mov.w	ip, #10
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe6:	3b30      	subs	r3, #48	; 0x30
 8007fe8:	2b09      	cmp	r3, #9
 8007fea:	d94e      	bls.n	800808a <_svfiprintf_r+0x17e>
 8007fec:	b1b0      	cbz	r0, 800801c <_svfiprintf_r+0x110>
 8007fee:	9207      	str	r2, [sp, #28]
 8007ff0:	e014      	b.n	800801c <_svfiprintf_r+0x110>
 8007ff2:	eba0 0308 	sub.w	r3, r0, r8
 8007ff6:	fa09 f303 	lsl.w	r3, r9, r3
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	9304      	str	r3, [sp, #16]
 8007ffe:	46a2      	mov	sl, r4
 8008000:	e7d2      	b.n	8007fa8 <_svfiprintf_r+0x9c>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	1d19      	adds	r1, r3, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	9103      	str	r1, [sp, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	bfbb      	ittet	lt
 800800e:	425b      	neglt	r3, r3
 8008010:	f042 0202 	orrlt.w	r2, r2, #2
 8008014:	9307      	strge	r3, [sp, #28]
 8008016:	9307      	strlt	r3, [sp, #28]
 8008018:	bfb8      	it	lt
 800801a:	9204      	strlt	r2, [sp, #16]
 800801c:	7823      	ldrb	r3, [r4, #0]
 800801e:	2b2e      	cmp	r3, #46	; 0x2e
 8008020:	d10c      	bne.n	800803c <_svfiprintf_r+0x130>
 8008022:	7863      	ldrb	r3, [r4, #1]
 8008024:	2b2a      	cmp	r3, #42	; 0x2a
 8008026:	d135      	bne.n	8008094 <_svfiprintf_r+0x188>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	9203      	str	r2, [sp, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	bfb8      	it	lt
 8008034:	f04f 33ff 	movlt.w	r3, #4294967295
 8008038:	3402      	adds	r4, #2
 800803a:	9305      	str	r3, [sp, #20]
 800803c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008108 <_svfiprintf_r+0x1fc>
 8008040:	7821      	ldrb	r1, [r4, #0]
 8008042:	2203      	movs	r2, #3
 8008044:	4650      	mov	r0, sl
 8008046:	f7f8 f8c3 	bl	80001d0 <memchr>
 800804a:	b140      	cbz	r0, 800805e <_svfiprintf_r+0x152>
 800804c:	2340      	movs	r3, #64	; 0x40
 800804e:	eba0 000a 	sub.w	r0, r0, sl
 8008052:	fa03 f000 	lsl.w	r0, r3, r0
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	4303      	orrs	r3, r0
 800805a:	3401      	adds	r4, #1
 800805c:	9304      	str	r3, [sp, #16]
 800805e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008062:	4826      	ldr	r0, [pc, #152]	; (80080fc <_svfiprintf_r+0x1f0>)
 8008064:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008068:	2206      	movs	r2, #6
 800806a:	f7f8 f8b1 	bl	80001d0 <memchr>
 800806e:	2800      	cmp	r0, #0
 8008070:	d038      	beq.n	80080e4 <_svfiprintf_r+0x1d8>
 8008072:	4b23      	ldr	r3, [pc, #140]	; (8008100 <_svfiprintf_r+0x1f4>)
 8008074:	bb1b      	cbnz	r3, 80080be <_svfiprintf_r+0x1b2>
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	3307      	adds	r3, #7
 800807a:	f023 0307 	bic.w	r3, r3, #7
 800807e:	3308      	adds	r3, #8
 8008080:	9303      	str	r3, [sp, #12]
 8008082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008084:	4433      	add	r3, r6
 8008086:	9309      	str	r3, [sp, #36]	; 0x24
 8008088:	e767      	b.n	8007f5a <_svfiprintf_r+0x4e>
 800808a:	fb0c 3202 	mla	r2, ip, r2, r3
 800808e:	460c      	mov	r4, r1
 8008090:	2001      	movs	r0, #1
 8008092:	e7a5      	b.n	8007fe0 <_svfiprintf_r+0xd4>
 8008094:	2300      	movs	r3, #0
 8008096:	3401      	adds	r4, #1
 8008098:	9305      	str	r3, [sp, #20]
 800809a:	4619      	mov	r1, r3
 800809c:	f04f 0c0a 	mov.w	ip, #10
 80080a0:	4620      	mov	r0, r4
 80080a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a6:	3a30      	subs	r2, #48	; 0x30
 80080a8:	2a09      	cmp	r2, #9
 80080aa:	d903      	bls.n	80080b4 <_svfiprintf_r+0x1a8>
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0c5      	beq.n	800803c <_svfiprintf_r+0x130>
 80080b0:	9105      	str	r1, [sp, #20]
 80080b2:	e7c3      	b.n	800803c <_svfiprintf_r+0x130>
 80080b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080b8:	4604      	mov	r4, r0
 80080ba:	2301      	movs	r3, #1
 80080bc:	e7f0      	b.n	80080a0 <_svfiprintf_r+0x194>
 80080be:	ab03      	add	r3, sp, #12
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	462a      	mov	r2, r5
 80080c4:	4b0f      	ldr	r3, [pc, #60]	; (8008104 <_svfiprintf_r+0x1f8>)
 80080c6:	a904      	add	r1, sp, #16
 80080c8:	4638      	mov	r0, r7
 80080ca:	f3af 8000 	nop.w
 80080ce:	1c42      	adds	r2, r0, #1
 80080d0:	4606      	mov	r6, r0
 80080d2:	d1d6      	bne.n	8008082 <_svfiprintf_r+0x176>
 80080d4:	89ab      	ldrh	r3, [r5, #12]
 80080d6:	065b      	lsls	r3, r3, #25
 80080d8:	f53f af2c 	bmi.w	8007f34 <_svfiprintf_r+0x28>
 80080dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080de:	b01d      	add	sp, #116	; 0x74
 80080e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e4:	ab03      	add	r3, sp, #12
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	462a      	mov	r2, r5
 80080ea:	4b06      	ldr	r3, [pc, #24]	; (8008104 <_svfiprintf_r+0x1f8>)
 80080ec:	a904      	add	r1, sp, #16
 80080ee:	4638      	mov	r0, r7
 80080f0:	f000 f87a 	bl	80081e8 <_printf_i>
 80080f4:	e7eb      	b.n	80080ce <_svfiprintf_r+0x1c2>
 80080f6:	bf00      	nop
 80080f8:	08008ac2 	.word	0x08008ac2
 80080fc:	08008acc 	.word	0x08008acc
 8008100:	00000000 	.word	0x00000000
 8008104:	08007e55 	.word	0x08007e55
 8008108:	08008ac8 	.word	0x08008ac8

0800810c <_printf_common>:
 800810c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008110:	4616      	mov	r6, r2
 8008112:	4699      	mov	r9, r3
 8008114:	688a      	ldr	r2, [r1, #8]
 8008116:	690b      	ldr	r3, [r1, #16]
 8008118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800811c:	4293      	cmp	r3, r2
 800811e:	bfb8      	it	lt
 8008120:	4613      	movlt	r3, r2
 8008122:	6033      	str	r3, [r6, #0]
 8008124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008128:	4607      	mov	r7, r0
 800812a:	460c      	mov	r4, r1
 800812c:	b10a      	cbz	r2, 8008132 <_printf_common+0x26>
 800812e:	3301      	adds	r3, #1
 8008130:	6033      	str	r3, [r6, #0]
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	0699      	lsls	r1, r3, #26
 8008136:	bf42      	ittt	mi
 8008138:	6833      	ldrmi	r3, [r6, #0]
 800813a:	3302      	addmi	r3, #2
 800813c:	6033      	strmi	r3, [r6, #0]
 800813e:	6825      	ldr	r5, [r4, #0]
 8008140:	f015 0506 	ands.w	r5, r5, #6
 8008144:	d106      	bne.n	8008154 <_printf_common+0x48>
 8008146:	f104 0a19 	add.w	sl, r4, #25
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	6832      	ldr	r2, [r6, #0]
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	42ab      	cmp	r3, r5
 8008152:	dc26      	bgt.n	80081a2 <_printf_common+0x96>
 8008154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008158:	1e13      	subs	r3, r2, #0
 800815a:	6822      	ldr	r2, [r4, #0]
 800815c:	bf18      	it	ne
 800815e:	2301      	movne	r3, #1
 8008160:	0692      	lsls	r2, r2, #26
 8008162:	d42b      	bmi.n	80081bc <_printf_common+0xb0>
 8008164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008168:	4649      	mov	r1, r9
 800816a:	4638      	mov	r0, r7
 800816c:	47c0      	blx	r8
 800816e:	3001      	adds	r0, #1
 8008170:	d01e      	beq.n	80081b0 <_printf_common+0xa4>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	68e5      	ldr	r5, [r4, #12]
 8008176:	6832      	ldr	r2, [r6, #0]
 8008178:	f003 0306 	and.w	r3, r3, #6
 800817c:	2b04      	cmp	r3, #4
 800817e:	bf08      	it	eq
 8008180:	1aad      	subeq	r5, r5, r2
 8008182:	68a3      	ldr	r3, [r4, #8]
 8008184:	6922      	ldr	r2, [r4, #16]
 8008186:	bf0c      	ite	eq
 8008188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800818c:	2500      	movne	r5, #0
 800818e:	4293      	cmp	r3, r2
 8008190:	bfc4      	itt	gt
 8008192:	1a9b      	subgt	r3, r3, r2
 8008194:	18ed      	addgt	r5, r5, r3
 8008196:	2600      	movs	r6, #0
 8008198:	341a      	adds	r4, #26
 800819a:	42b5      	cmp	r5, r6
 800819c:	d11a      	bne.n	80081d4 <_printf_common+0xc8>
 800819e:	2000      	movs	r0, #0
 80081a0:	e008      	b.n	80081b4 <_printf_common+0xa8>
 80081a2:	2301      	movs	r3, #1
 80081a4:	4652      	mov	r2, sl
 80081a6:	4649      	mov	r1, r9
 80081a8:	4638      	mov	r0, r7
 80081aa:	47c0      	blx	r8
 80081ac:	3001      	adds	r0, #1
 80081ae:	d103      	bne.n	80081b8 <_printf_common+0xac>
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081b8:	3501      	adds	r5, #1
 80081ba:	e7c6      	b.n	800814a <_printf_common+0x3e>
 80081bc:	18e1      	adds	r1, r4, r3
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	2030      	movs	r0, #48	; 0x30
 80081c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081c6:	4422      	add	r2, r4
 80081c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081d0:	3302      	adds	r3, #2
 80081d2:	e7c7      	b.n	8008164 <_printf_common+0x58>
 80081d4:	2301      	movs	r3, #1
 80081d6:	4622      	mov	r2, r4
 80081d8:	4649      	mov	r1, r9
 80081da:	4638      	mov	r0, r7
 80081dc:	47c0      	blx	r8
 80081de:	3001      	adds	r0, #1
 80081e0:	d0e6      	beq.n	80081b0 <_printf_common+0xa4>
 80081e2:	3601      	adds	r6, #1
 80081e4:	e7d9      	b.n	800819a <_printf_common+0x8e>
	...

080081e8 <_printf_i>:
 80081e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	7e0f      	ldrb	r7, [r1, #24]
 80081ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081f0:	2f78      	cmp	r7, #120	; 0x78
 80081f2:	4691      	mov	r9, r2
 80081f4:	4680      	mov	r8, r0
 80081f6:	460c      	mov	r4, r1
 80081f8:	469a      	mov	sl, r3
 80081fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081fe:	d807      	bhi.n	8008210 <_printf_i+0x28>
 8008200:	2f62      	cmp	r7, #98	; 0x62
 8008202:	d80a      	bhi.n	800821a <_printf_i+0x32>
 8008204:	2f00      	cmp	r7, #0
 8008206:	f000 80d8 	beq.w	80083ba <_printf_i+0x1d2>
 800820a:	2f58      	cmp	r7, #88	; 0x58
 800820c:	f000 80a3 	beq.w	8008356 <_printf_i+0x16e>
 8008210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008218:	e03a      	b.n	8008290 <_printf_i+0xa8>
 800821a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800821e:	2b15      	cmp	r3, #21
 8008220:	d8f6      	bhi.n	8008210 <_printf_i+0x28>
 8008222:	a101      	add	r1, pc, #4	; (adr r1, 8008228 <_printf_i+0x40>)
 8008224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008228:	08008281 	.word	0x08008281
 800822c:	08008295 	.word	0x08008295
 8008230:	08008211 	.word	0x08008211
 8008234:	08008211 	.word	0x08008211
 8008238:	08008211 	.word	0x08008211
 800823c:	08008211 	.word	0x08008211
 8008240:	08008295 	.word	0x08008295
 8008244:	08008211 	.word	0x08008211
 8008248:	08008211 	.word	0x08008211
 800824c:	08008211 	.word	0x08008211
 8008250:	08008211 	.word	0x08008211
 8008254:	080083a1 	.word	0x080083a1
 8008258:	080082c5 	.word	0x080082c5
 800825c:	08008383 	.word	0x08008383
 8008260:	08008211 	.word	0x08008211
 8008264:	08008211 	.word	0x08008211
 8008268:	080083c3 	.word	0x080083c3
 800826c:	08008211 	.word	0x08008211
 8008270:	080082c5 	.word	0x080082c5
 8008274:	08008211 	.word	0x08008211
 8008278:	08008211 	.word	0x08008211
 800827c:	0800838b 	.word	0x0800838b
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	1d1a      	adds	r2, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	602a      	str	r2, [r5, #0]
 8008288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800828c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008290:	2301      	movs	r3, #1
 8008292:	e0a3      	b.n	80083dc <_printf_i+0x1f4>
 8008294:	6820      	ldr	r0, [r4, #0]
 8008296:	6829      	ldr	r1, [r5, #0]
 8008298:	0606      	lsls	r6, r0, #24
 800829a:	f101 0304 	add.w	r3, r1, #4
 800829e:	d50a      	bpl.n	80082b6 <_printf_i+0xce>
 80082a0:	680e      	ldr	r6, [r1, #0]
 80082a2:	602b      	str	r3, [r5, #0]
 80082a4:	2e00      	cmp	r6, #0
 80082a6:	da03      	bge.n	80082b0 <_printf_i+0xc8>
 80082a8:	232d      	movs	r3, #45	; 0x2d
 80082aa:	4276      	negs	r6, r6
 80082ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082b0:	485e      	ldr	r0, [pc, #376]	; (800842c <_printf_i+0x244>)
 80082b2:	230a      	movs	r3, #10
 80082b4:	e019      	b.n	80082ea <_printf_i+0x102>
 80082b6:	680e      	ldr	r6, [r1, #0]
 80082b8:	602b      	str	r3, [r5, #0]
 80082ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082be:	bf18      	it	ne
 80082c0:	b236      	sxthne	r6, r6
 80082c2:	e7ef      	b.n	80082a4 <_printf_i+0xbc>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	6820      	ldr	r0, [r4, #0]
 80082c8:	1d19      	adds	r1, r3, #4
 80082ca:	6029      	str	r1, [r5, #0]
 80082cc:	0601      	lsls	r1, r0, #24
 80082ce:	d501      	bpl.n	80082d4 <_printf_i+0xec>
 80082d0:	681e      	ldr	r6, [r3, #0]
 80082d2:	e002      	b.n	80082da <_printf_i+0xf2>
 80082d4:	0646      	lsls	r6, r0, #25
 80082d6:	d5fb      	bpl.n	80082d0 <_printf_i+0xe8>
 80082d8:	881e      	ldrh	r6, [r3, #0]
 80082da:	4854      	ldr	r0, [pc, #336]	; (800842c <_printf_i+0x244>)
 80082dc:	2f6f      	cmp	r7, #111	; 0x6f
 80082de:	bf0c      	ite	eq
 80082e0:	2308      	moveq	r3, #8
 80082e2:	230a      	movne	r3, #10
 80082e4:	2100      	movs	r1, #0
 80082e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ea:	6865      	ldr	r5, [r4, #4]
 80082ec:	60a5      	str	r5, [r4, #8]
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	bfa2      	ittt	ge
 80082f2:	6821      	ldrge	r1, [r4, #0]
 80082f4:	f021 0104 	bicge.w	r1, r1, #4
 80082f8:	6021      	strge	r1, [r4, #0]
 80082fa:	b90e      	cbnz	r6, 8008300 <_printf_i+0x118>
 80082fc:	2d00      	cmp	r5, #0
 80082fe:	d04d      	beq.n	800839c <_printf_i+0x1b4>
 8008300:	4615      	mov	r5, r2
 8008302:	fbb6 f1f3 	udiv	r1, r6, r3
 8008306:	fb03 6711 	mls	r7, r3, r1, r6
 800830a:	5dc7      	ldrb	r7, [r0, r7]
 800830c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008310:	4637      	mov	r7, r6
 8008312:	42bb      	cmp	r3, r7
 8008314:	460e      	mov	r6, r1
 8008316:	d9f4      	bls.n	8008302 <_printf_i+0x11a>
 8008318:	2b08      	cmp	r3, #8
 800831a:	d10b      	bne.n	8008334 <_printf_i+0x14c>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	07de      	lsls	r6, r3, #31
 8008320:	d508      	bpl.n	8008334 <_printf_i+0x14c>
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	6861      	ldr	r1, [r4, #4]
 8008326:	4299      	cmp	r1, r3
 8008328:	bfde      	ittt	le
 800832a:	2330      	movle	r3, #48	; 0x30
 800832c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008330:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008334:	1b52      	subs	r2, r2, r5
 8008336:	6122      	str	r2, [r4, #16]
 8008338:	f8cd a000 	str.w	sl, [sp]
 800833c:	464b      	mov	r3, r9
 800833e:	aa03      	add	r2, sp, #12
 8008340:	4621      	mov	r1, r4
 8008342:	4640      	mov	r0, r8
 8008344:	f7ff fee2 	bl	800810c <_printf_common>
 8008348:	3001      	adds	r0, #1
 800834a:	d14c      	bne.n	80083e6 <_printf_i+0x1fe>
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	b004      	add	sp, #16
 8008352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008356:	4835      	ldr	r0, [pc, #212]	; (800842c <_printf_i+0x244>)
 8008358:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800835c:	6829      	ldr	r1, [r5, #0]
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	f851 6b04 	ldr.w	r6, [r1], #4
 8008364:	6029      	str	r1, [r5, #0]
 8008366:	061d      	lsls	r5, r3, #24
 8008368:	d514      	bpl.n	8008394 <_printf_i+0x1ac>
 800836a:	07df      	lsls	r7, r3, #31
 800836c:	bf44      	itt	mi
 800836e:	f043 0320 	orrmi.w	r3, r3, #32
 8008372:	6023      	strmi	r3, [r4, #0]
 8008374:	b91e      	cbnz	r6, 800837e <_printf_i+0x196>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	f023 0320 	bic.w	r3, r3, #32
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	2310      	movs	r3, #16
 8008380:	e7b0      	b.n	80082e4 <_printf_i+0xfc>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	f043 0320 	orr.w	r3, r3, #32
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	2378      	movs	r3, #120	; 0x78
 800838c:	4828      	ldr	r0, [pc, #160]	; (8008430 <_printf_i+0x248>)
 800838e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008392:	e7e3      	b.n	800835c <_printf_i+0x174>
 8008394:	0659      	lsls	r1, r3, #25
 8008396:	bf48      	it	mi
 8008398:	b2b6      	uxthmi	r6, r6
 800839a:	e7e6      	b.n	800836a <_printf_i+0x182>
 800839c:	4615      	mov	r5, r2
 800839e:	e7bb      	b.n	8008318 <_printf_i+0x130>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	6826      	ldr	r6, [r4, #0]
 80083a4:	6961      	ldr	r1, [r4, #20]
 80083a6:	1d18      	adds	r0, r3, #4
 80083a8:	6028      	str	r0, [r5, #0]
 80083aa:	0635      	lsls	r5, r6, #24
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	d501      	bpl.n	80083b4 <_printf_i+0x1cc>
 80083b0:	6019      	str	r1, [r3, #0]
 80083b2:	e002      	b.n	80083ba <_printf_i+0x1d2>
 80083b4:	0670      	lsls	r0, r6, #25
 80083b6:	d5fb      	bpl.n	80083b0 <_printf_i+0x1c8>
 80083b8:	8019      	strh	r1, [r3, #0]
 80083ba:	2300      	movs	r3, #0
 80083bc:	6123      	str	r3, [r4, #16]
 80083be:	4615      	mov	r5, r2
 80083c0:	e7ba      	b.n	8008338 <_printf_i+0x150>
 80083c2:	682b      	ldr	r3, [r5, #0]
 80083c4:	1d1a      	adds	r2, r3, #4
 80083c6:	602a      	str	r2, [r5, #0]
 80083c8:	681d      	ldr	r5, [r3, #0]
 80083ca:	6862      	ldr	r2, [r4, #4]
 80083cc:	2100      	movs	r1, #0
 80083ce:	4628      	mov	r0, r5
 80083d0:	f7f7 fefe 	bl	80001d0 <memchr>
 80083d4:	b108      	cbz	r0, 80083da <_printf_i+0x1f2>
 80083d6:	1b40      	subs	r0, r0, r5
 80083d8:	6060      	str	r0, [r4, #4]
 80083da:	6863      	ldr	r3, [r4, #4]
 80083dc:	6123      	str	r3, [r4, #16]
 80083de:	2300      	movs	r3, #0
 80083e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e4:	e7a8      	b.n	8008338 <_printf_i+0x150>
 80083e6:	6923      	ldr	r3, [r4, #16]
 80083e8:	462a      	mov	r2, r5
 80083ea:	4649      	mov	r1, r9
 80083ec:	4640      	mov	r0, r8
 80083ee:	47d0      	blx	sl
 80083f0:	3001      	adds	r0, #1
 80083f2:	d0ab      	beq.n	800834c <_printf_i+0x164>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	079b      	lsls	r3, r3, #30
 80083f8:	d413      	bmi.n	8008422 <_printf_i+0x23a>
 80083fa:	68e0      	ldr	r0, [r4, #12]
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	4298      	cmp	r0, r3
 8008400:	bfb8      	it	lt
 8008402:	4618      	movlt	r0, r3
 8008404:	e7a4      	b.n	8008350 <_printf_i+0x168>
 8008406:	2301      	movs	r3, #1
 8008408:	4632      	mov	r2, r6
 800840a:	4649      	mov	r1, r9
 800840c:	4640      	mov	r0, r8
 800840e:	47d0      	blx	sl
 8008410:	3001      	adds	r0, #1
 8008412:	d09b      	beq.n	800834c <_printf_i+0x164>
 8008414:	3501      	adds	r5, #1
 8008416:	68e3      	ldr	r3, [r4, #12]
 8008418:	9903      	ldr	r1, [sp, #12]
 800841a:	1a5b      	subs	r3, r3, r1
 800841c:	42ab      	cmp	r3, r5
 800841e:	dcf2      	bgt.n	8008406 <_printf_i+0x21e>
 8008420:	e7eb      	b.n	80083fa <_printf_i+0x212>
 8008422:	2500      	movs	r5, #0
 8008424:	f104 0619 	add.w	r6, r4, #25
 8008428:	e7f5      	b.n	8008416 <_printf_i+0x22e>
 800842a:	bf00      	nop
 800842c:	08008ad3 	.word	0x08008ad3
 8008430:	08008ae4 	.word	0x08008ae4

08008434 <memcpy>:
 8008434:	440a      	add	r2, r1
 8008436:	4291      	cmp	r1, r2
 8008438:	f100 33ff 	add.w	r3, r0, #4294967295
 800843c:	d100      	bne.n	8008440 <memcpy+0xc>
 800843e:	4770      	bx	lr
 8008440:	b510      	push	{r4, lr}
 8008442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800844a:	4291      	cmp	r1, r2
 800844c:	d1f9      	bne.n	8008442 <memcpy+0xe>
 800844e:	bd10      	pop	{r4, pc}

08008450 <memmove>:
 8008450:	4288      	cmp	r0, r1
 8008452:	b510      	push	{r4, lr}
 8008454:	eb01 0402 	add.w	r4, r1, r2
 8008458:	d902      	bls.n	8008460 <memmove+0x10>
 800845a:	4284      	cmp	r4, r0
 800845c:	4623      	mov	r3, r4
 800845e:	d807      	bhi.n	8008470 <memmove+0x20>
 8008460:	1e43      	subs	r3, r0, #1
 8008462:	42a1      	cmp	r1, r4
 8008464:	d008      	beq.n	8008478 <memmove+0x28>
 8008466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800846a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800846e:	e7f8      	b.n	8008462 <memmove+0x12>
 8008470:	4402      	add	r2, r0
 8008472:	4601      	mov	r1, r0
 8008474:	428a      	cmp	r2, r1
 8008476:	d100      	bne.n	800847a <memmove+0x2a>
 8008478:	bd10      	pop	{r4, pc}
 800847a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800847e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008482:	e7f7      	b.n	8008474 <memmove+0x24>

08008484 <_free_r>:
 8008484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008486:	2900      	cmp	r1, #0
 8008488:	d044      	beq.n	8008514 <_free_r+0x90>
 800848a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848e:	9001      	str	r0, [sp, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f1a1 0404 	sub.w	r4, r1, #4
 8008496:	bfb8      	it	lt
 8008498:	18e4      	addlt	r4, r4, r3
 800849a:	f000 f913 	bl	80086c4 <__malloc_lock>
 800849e:	4a1e      	ldr	r2, [pc, #120]	; (8008518 <_free_r+0x94>)
 80084a0:	9801      	ldr	r0, [sp, #4]
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	b933      	cbnz	r3, 80084b4 <_free_r+0x30>
 80084a6:	6063      	str	r3, [r4, #4]
 80084a8:	6014      	str	r4, [r2, #0]
 80084aa:	b003      	add	sp, #12
 80084ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b0:	f000 b90e 	b.w	80086d0 <__malloc_unlock>
 80084b4:	42a3      	cmp	r3, r4
 80084b6:	d908      	bls.n	80084ca <_free_r+0x46>
 80084b8:	6825      	ldr	r5, [r4, #0]
 80084ba:	1961      	adds	r1, r4, r5
 80084bc:	428b      	cmp	r3, r1
 80084be:	bf01      	itttt	eq
 80084c0:	6819      	ldreq	r1, [r3, #0]
 80084c2:	685b      	ldreq	r3, [r3, #4]
 80084c4:	1949      	addeq	r1, r1, r5
 80084c6:	6021      	streq	r1, [r4, #0]
 80084c8:	e7ed      	b.n	80084a6 <_free_r+0x22>
 80084ca:	461a      	mov	r2, r3
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	b10b      	cbz	r3, 80084d4 <_free_r+0x50>
 80084d0:	42a3      	cmp	r3, r4
 80084d2:	d9fa      	bls.n	80084ca <_free_r+0x46>
 80084d4:	6811      	ldr	r1, [r2, #0]
 80084d6:	1855      	adds	r5, r2, r1
 80084d8:	42a5      	cmp	r5, r4
 80084da:	d10b      	bne.n	80084f4 <_free_r+0x70>
 80084dc:	6824      	ldr	r4, [r4, #0]
 80084de:	4421      	add	r1, r4
 80084e0:	1854      	adds	r4, r2, r1
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	6011      	str	r1, [r2, #0]
 80084e6:	d1e0      	bne.n	80084aa <_free_r+0x26>
 80084e8:	681c      	ldr	r4, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	6053      	str	r3, [r2, #4]
 80084ee:	4421      	add	r1, r4
 80084f0:	6011      	str	r1, [r2, #0]
 80084f2:	e7da      	b.n	80084aa <_free_r+0x26>
 80084f4:	d902      	bls.n	80084fc <_free_r+0x78>
 80084f6:	230c      	movs	r3, #12
 80084f8:	6003      	str	r3, [r0, #0]
 80084fa:	e7d6      	b.n	80084aa <_free_r+0x26>
 80084fc:	6825      	ldr	r5, [r4, #0]
 80084fe:	1961      	adds	r1, r4, r5
 8008500:	428b      	cmp	r3, r1
 8008502:	bf04      	itt	eq
 8008504:	6819      	ldreq	r1, [r3, #0]
 8008506:	685b      	ldreq	r3, [r3, #4]
 8008508:	6063      	str	r3, [r4, #4]
 800850a:	bf04      	itt	eq
 800850c:	1949      	addeq	r1, r1, r5
 800850e:	6021      	streq	r1, [r4, #0]
 8008510:	6054      	str	r4, [r2, #4]
 8008512:	e7ca      	b.n	80084aa <_free_r+0x26>
 8008514:	b003      	add	sp, #12
 8008516:	bd30      	pop	{r4, r5, pc}
 8008518:	20000a48 	.word	0x20000a48

0800851c <sbrk_aligned>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4e0e      	ldr	r6, [pc, #56]	; (8008558 <sbrk_aligned+0x3c>)
 8008520:	460c      	mov	r4, r1
 8008522:	6831      	ldr	r1, [r6, #0]
 8008524:	4605      	mov	r5, r0
 8008526:	b911      	cbnz	r1, 800852e <sbrk_aligned+0x12>
 8008528:	f000 f8bc 	bl	80086a4 <_sbrk_r>
 800852c:	6030      	str	r0, [r6, #0]
 800852e:	4621      	mov	r1, r4
 8008530:	4628      	mov	r0, r5
 8008532:	f000 f8b7 	bl	80086a4 <_sbrk_r>
 8008536:	1c43      	adds	r3, r0, #1
 8008538:	d00a      	beq.n	8008550 <sbrk_aligned+0x34>
 800853a:	1cc4      	adds	r4, r0, #3
 800853c:	f024 0403 	bic.w	r4, r4, #3
 8008540:	42a0      	cmp	r0, r4
 8008542:	d007      	beq.n	8008554 <sbrk_aligned+0x38>
 8008544:	1a21      	subs	r1, r4, r0
 8008546:	4628      	mov	r0, r5
 8008548:	f000 f8ac 	bl	80086a4 <_sbrk_r>
 800854c:	3001      	adds	r0, #1
 800854e:	d101      	bne.n	8008554 <sbrk_aligned+0x38>
 8008550:	f04f 34ff 	mov.w	r4, #4294967295
 8008554:	4620      	mov	r0, r4
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	20000a4c 	.word	0x20000a4c

0800855c <_malloc_r>:
 800855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008560:	1ccd      	adds	r5, r1, #3
 8008562:	f025 0503 	bic.w	r5, r5, #3
 8008566:	3508      	adds	r5, #8
 8008568:	2d0c      	cmp	r5, #12
 800856a:	bf38      	it	cc
 800856c:	250c      	movcc	r5, #12
 800856e:	2d00      	cmp	r5, #0
 8008570:	4607      	mov	r7, r0
 8008572:	db01      	blt.n	8008578 <_malloc_r+0x1c>
 8008574:	42a9      	cmp	r1, r5
 8008576:	d905      	bls.n	8008584 <_malloc_r+0x28>
 8008578:	230c      	movs	r3, #12
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	2600      	movs	r6, #0
 800857e:	4630      	mov	r0, r6
 8008580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008584:	4e2e      	ldr	r6, [pc, #184]	; (8008640 <_malloc_r+0xe4>)
 8008586:	f000 f89d 	bl	80086c4 <__malloc_lock>
 800858a:	6833      	ldr	r3, [r6, #0]
 800858c:	461c      	mov	r4, r3
 800858e:	bb34      	cbnz	r4, 80085de <_malloc_r+0x82>
 8008590:	4629      	mov	r1, r5
 8008592:	4638      	mov	r0, r7
 8008594:	f7ff ffc2 	bl	800851c <sbrk_aligned>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	4604      	mov	r4, r0
 800859c:	d14d      	bne.n	800863a <_malloc_r+0xde>
 800859e:	6834      	ldr	r4, [r6, #0]
 80085a0:	4626      	mov	r6, r4
 80085a2:	2e00      	cmp	r6, #0
 80085a4:	d140      	bne.n	8008628 <_malloc_r+0xcc>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	4631      	mov	r1, r6
 80085aa:	4638      	mov	r0, r7
 80085ac:	eb04 0803 	add.w	r8, r4, r3
 80085b0:	f000 f878 	bl	80086a4 <_sbrk_r>
 80085b4:	4580      	cmp	r8, r0
 80085b6:	d13a      	bne.n	800862e <_malloc_r+0xd2>
 80085b8:	6821      	ldr	r1, [r4, #0]
 80085ba:	3503      	adds	r5, #3
 80085bc:	1a6d      	subs	r5, r5, r1
 80085be:	f025 0503 	bic.w	r5, r5, #3
 80085c2:	3508      	adds	r5, #8
 80085c4:	2d0c      	cmp	r5, #12
 80085c6:	bf38      	it	cc
 80085c8:	250c      	movcc	r5, #12
 80085ca:	4629      	mov	r1, r5
 80085cc:	4638      	mov	r0, r7
 80085ce:	f7ff ffa5 	bl	800851c <sbrk_aligned>
 80085d2:	3001      	adds	r0, #1
 80085d4:	d02b      	beq.n	800862e <_malloc_r+0xd2>
 80085d6:	6823      	ldr	r3, [r4, #0]
 80085d8:	442b      	add	r3, r5
 80085da:	6023      	str	r3, [r4, #0]
 80085dc:	e00e      	b.n	80085fc <_malloc_r+0xa0>
 80085de:	6822      	ldr	r2, [r4, #0]
 80085e0:	1b52      	subs	r2, r2, r5
 80085e2:	d41e      	bmi.n	8008622 <_malloc_r+0xc6>
 80085e4:	2a0b      	cmp	r2, #11
 80085e6:	d916      	bls.n	8008616 <_malloc_r+0xba>
 80085e8:	1961      	adds	r1, r4, r5
 80085ea:	42a3      	cmp	r3, r4
 80085ec:	6025      	str	r5, [r4, #0]
 80085ee:	bf18      	it	ne
 80085f0:	6059      	strne	r1, [r3, #4]
 80085f2:	6863      	ldr	r3, [r4, #4]
 80085f4:	bf08      	it	eq
 80085f6:	6031      	streq	r1, [r6, #0]
 80085f8:	5162      	str	r2, [r4, r5]
 80085fa:	604b      	str	r3, [r1, #4]
 80085fc:	4638      	mov	r0, r7
 80085fe:	f104 060b 	add.w	r6, r4, #11
 8008602:	f000 f865 	bl	80086d0 <__malloc_unlock>
 8008606:	f026 0607 	bic.w	r6, r6, #7
 800860a:	1d23      	adds	r3, r4, #4
 800860c:	1af2      	subs	r2, r6, r3
 800860e:	d0b6      	beq.n	800857e <_malloc_r+0x22>
 8008610:	1b9b      	subs	r3, r3, r6
 8008612:	50a3      	str	r3, [r4, r2]
 8008614:	e7b3      	b.n	800857e <_malloc_r+0x22>
 8008616:	6862      	ldr	r2, [r4, #4]
 8008618:	42a3      	cmp	r3, r4
 800861a:	bf0c      	ite	eq
 800861c:	6032      	streq	r2, [r6, #0]
 800861e:	605a      	strne	r2, [r3, #4]
 8008620:	e7ec      	b.n	80085fc <_malloc_r+0xa0>
 8008622:	4623      	mov	r3, r4
 8008624:	6864      	ldr	r4, [r4, #4]
 8008626:	e7b2      	b.n	800858e <_malloc_r+0x32>
 8008628:	4634      	mov	r4, r6
 800862a:	6876      	ldr	r6, [r6, #4]
 800862c:	e7b9      	b.n	80085a2 <_malloc_r+0x46>
 800862e:	230c      	movs	r3, #12
 8008630:	603b      	str	r3, [r7, #0]
 8008632:	4638      	mov	r0, r7
 8008634:	f000 f84c 	bl	80086d0 <__malloc_unlock>
 8008638:	e7a1      	b.n	800857e <_malloc_r+0x22>
 800863a:	6025      	str	r5, [r4, #0]
 800863c:	e7de      	b.n	80085fc <_malloc_r+0xa0>
 800863e:	bf00      	nop
 8008640:	20000a48 	.word	0x20000a48

08008644 <_realloc_r>:
 8008644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008648:	4680      	mov	r8, r0
 800864a:	4614      	mov	r4, r2
 800864c:	460e      	mov	r6, r1
 800864e:	b921      	cbnz	r1, 800865a <_realloc_r+0x16>
 8008650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008654:	4611      	mov	r1, r2
 8008656:	f7ff bf81 	b.w	800855c <_malloc_r>
 800865a:	b92a      	cbnz	r2, 8008668 <_realloc_r+0x24>
 800865c:	f7ff ff12 	bl	8008484 <_free_r>
 8008660:	4625      	mov	r5, r4
 8008662:	4628      	mov	r0, r5
 8008664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008668:	f000 f838 	bl	80086dc <_malloc_usable_size_r>
 800866c:	4284      	cmp	r4, r0
 800866e:	4607      	mov	r7, r0
 8008670:	d802      	bhi.n	8008678 <_realloc_r+0x34>
 8008672:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008676:	d812      	bhi.n	800869e <_realloc_r+0x5a>
 8008678:	4621      	mov	r1, r4
 800867a:	4640      	mov	r0, r8
 800867c:	f7ff ff6e 	bl	800855c <_malloc_r>
 8008680:	4605      	mov	r5, r0
 8008682:	2800      	cmp	r0, #0
 8008684:	d0ed      	beq.n	8008662 <_realloc_r+0x1e>
 8008686:	42bc      	cmp	r4, r7
 8008688:	4622      	mov	r2, r4
 800868a:	4631      	mov	r1, r6
 800868c:	bf28      	it	cs
 800868e:	463a      	movcs	r2, r7
 8008690:	f7ff fed0 	bl	8008434 <memcpy>
 8008694:	4631      	mov	r1, r6
 8008696:	4640      	mov	r0, r8
 8008698:	f7ff fef4 	bl	8008484 <_free_r>
 800869c:	e7e1      	b.n	8008662 <_realloc_r+0x1e>
 800869e:	4635      	mov	r5, r6
 80086a0:	e7df      	b.n	8008662 <_realloc_r+0x1e>
	...

080086a4 <_sbrk_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	4d06      	ldr	r5, [pc, #24]	; (80086c0 <_sbrk_r+0x1c>)
 80086a8:	2300      	movs	r3, #0
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	602b      	str	r3, [r5, #0]
 80086b0:	f7fa f874 	bl	800279c <_sbrk>
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d102      	bne.n	80086be <_sbrk_r+0x1a>
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	b103      	cbz	r3, 80086be <_sbrk_r+0x1a>
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	bd38      	pop	{r3, r4, r5, pc}
 80086c0:	20000a50 	.word	0x20000a50

080086c4 <__malloc_lock>:
 80086c4:	4801      	ldr	r0, [pc, #4]	; (80086cc <__malloc_lock+0x8>)
 80086c6:	f000 b811 	b.w	80086ec <__retarget_lock_acquire_recursive>
 80086ca:	bf00      	nop
 80086cc:	20000a54 	.word	0x20000a54

080086d0 <__malloc_unlock>:
 80086d0:	4801      	ldr	r0, [pc, #4]	; (80086d8 <__malloc_unlock+0x8>)
 80086d2:	f000 b80c 	b.w	80086ee <__retarget_lock_release_recursive>
 80086d6:	bf00      	nop
 80086d8:	20000a54 	.word	0x20000a54

080086dc <_malloc_usable_size_r>:
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f18      	subs	r0, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfbc      	itt	lt
 80086e6:	580b      	ldrlt	r3, [r1, r0]
 80086e8:	18c0      	addlt	r0, r0, r3
 80086ea:	4770      	bx	lr

080086ec <__retarget_lock_acquire_recursive>:
 80086ec:	4770      	bx	lr

080086ee <__retarget_lock_release_recursive>:
 80086ee:	4770      	bx	lr

080086f0 <_init>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr

080086fc <_fini>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr
